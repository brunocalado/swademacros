{"_id":"0USlmX9tiE85iJe0","name":"GM Macro Manager","type":"script","author":"tckKxzbezKvre3KI","img":"icons/sundries/documents/document-sealed-signatures-red.webp","scope":"global","command":"const version = '0.9';\n\n/*\n  GM Menu\n  \n  icons: icons/sundries/documents/document-sealed-signatures-red.webp\n  \n  Fill the constant macros with the names of your macros, when you click the button it will run the macro.\n\n  Dialog Window will not close until the X button is pressed.\n*/\nconst managerType = 'GM - Macro Manager';\n\n(()=>{\n  const macros = [\n    \"Active Effect Builder\",\n    \"Adventure Deck - Deck\",    \n    \"Chase\",\n    \"Deviation\",\n    \"Dramatic Tasks\",\n    \"Falling Damage Calculator\",    \n    \"Interludes\",\n    \"Mass Battle\",\n    \"Mass Roll\",\n    \"Raise Calculator\",\n    \"Size/Scale Calculator\",\n    \"Quick Combat\",\n    \"Token Disposition Changer\"\n  ];\n\n  let buttons = {}, dialog, content = `<div sytle=\"width:100%;text-align:center;><h2>Choose Macro</h2></div>`;\n  \n  macros.forEach((str)=> {\n    let macro = game.macros.getName(str);\n    if(!macro) return;\n\n    buttons[str] = {\n      label : `\n        <div style=\"display:flex;flex-direction:row;justify-content:center;align-items:center;width\">\n          <div style=\"display:flex;justify-content:left;flex-grow:1;\"><img src=\"${macro.data.img}\" width=\"25\" height=\"25\" style=\"background-color:#5c5c5c;\"/></div>\n          <div style=\"display:flex;justify-content:left;flex-grow:4\"><label>${str}</label></div>\n        </div>`,\n      callback : () => {\n        game.macros.getName(str).execute();\n        //dialog.render(true);\n      }\n    }\n  });\n  dialog = new Dialog({title : `${managerType}`,content, buttons}).render(true);\n})();","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":null}}
{"_id":"28yrde5JhqMaEbHb","name":"Healing","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/life/cross-area-circle-green-white.webp","scope":"global","command":"/*\nHealing\n- Med kit heal faz roll\n- Natural heal faz roll\n\nicon: icons/magic/life/cross-area-circle-green-white.webp\n*/\n\nlet tokenD;\nconst version = 'v1.7';\nconst chatimage = \"icons/magic/life/cross-area-circle-green-white.webp\";\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\nif (canvas.tokens.controlled[0]===undefined) {\n  ui.notifications.error(\"Please, select a token.\"); // No Token is Selected\n} else {\n  tokenD = canvas.tokens.controlled[0];\n  main();\n}\n\nfunction main() {\n  let dialogText = ``;\n  \n  dialogButtons = {\n    one: {\n      label: \"Natural Healing\",\n      callback: (html) => {\n        naturalHeal(html);\n      }\n    },\n    two: {\n      label: \"Healing Skill\",\n      callback: (html) => {\n        skillHealSelector(html);\n      }\n    }\n  }\n\n  // Main Dialogue\n  new Dialog({\n    title: 'Healing',\n    content: dialogText,\n    buttons: dialogButtons,\n    default: \"one\",\n  }).render(true);\n\n}\n\n// MACRO FUNCTIONS\n\n/*\nWounded characters make a Vigor roll every five days. Success recovers one Wounds, and a raise recovers two.\nA Critical Failure increases the victim’s Wounds level by one—either from infection, blood loss, or aggravating the injuries. If this causes Incapacitation, don’t use the usual rules for taking damage. Instead, the victim lapses in and out of consciousness and makes a Vigor roll every 12 hours. If the roll is failed, he expires. Success means he must roll again 12 hours later. With a raise he stabilizes and wakes. Allies may also attempt to stabilize the hero as explained under Bleeding Out, above.\nSupport: Don’t forget to use Support when your party has been beaten up a bit. Characters with Healing, Survival, or other skills can make Support rolls to help allies make their Vigor rolls to heal!\n*/\nasync function naturalHeal(html) {\n  const edgeNames = ['fast healer'];  \n  // Roll Vigor and check for Fast Healer.\n  let rolled = await tokenD.actor.rollAttribute('vigor');\n  let r = rolled;\n  \n  const edges = tokenD.actor.data.items.filter(function (item) {\n    return edgeNames.includes(item.name.toLowerCase()) && (item.type === \"edge\" || item.type === \"ability\");\n  });\n  let rollWithEdge = r.total;\n  let edgeText = \"\";\n  for (let edge of edges) {\n    rollWithEdge += 2;\n    edgeText += `<br/><i>+ ${edge.name}</i>`;\n  }\n  r = rollWithEdge;\n  \n  // Roll Vigor including +2 if Fast Healer is present and another +2 if this is a reroll.\n  let message='';\n  let myTitle = `<img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Healing`;\n\n  // Checking for a Critical Failure.  \n  if ( sm.isCritical(rolled) ) {\n    message += `${tokenD.name} rolled a <b style=\"color: red; font-size:150%\">Critical Failure!</b> and takes another Wound!`;    \n    sm.applyWounds(tokenD, 1);\n    ChatMessage.create({ content: message });\n  } else {\n    message += `<p><b style=\"color:red\">${tokenD.name}</b> rolled <b style=\"color:blue\">${r}</b>`;    \n    if (r < 4) {\n      message += ` and is <b style=\"color:red\">unable to heal</b> any Wounds.</p>`;\n    } else if ( r>=4 && r<8 ) {\n      message += ` and heals <b style=\"color:darkgreen\">1</b> of his ${sm.getWounds(tokenD)} Wounds.</p>`;      \n      sm.applyWounds(tokenD, -1);\n    } else if ( r>8 ) {\n      message += ` and heals <b style=\"color:darkgreen\">2</b> of his ${sm.getWounds(tokenD)} Wounds.</p>`;      \n      sm.applyWounds(tokenD, -2);\n    }\n        \n    message += ` ${edgeText}`;\n  }\n\n  message += `<ul><li>This roll can be done every five days</li></ul>`;\n\n  //ChatMessage.create({ content: message });\n  sm.styledChatMessage(myTitle, '', message);\n}\n\nasync function skillHealSelector(html) {\n  let tokenTarget = Array.from(game.user.targets)[0];\n  if (tokenTarget === undefined) {\n    skillHeal(html);\n  } else {\n    skillHealTarget(html, tokenTarget);\n  }  \n}\n\n/*\nHealing skill: Each attempt requires 10 minutes per wound level of the patient. Subtract 1 from Healing rolls without a basic First Aid kit or similar supplies.\nA success removes one Wound, and a raise removes two. Failure means no Wounds are removed. A Critical Failure increases the victim’s Wound level by one.\n*/\nasync function skillHeal(html) {\n  // Roll Vigor and check for Fast Healer.  \n  let r = await sm.rollSkill(tokenD, 'healing');  \n  let rolled = r;\n  let startingWounds = sm.getWounds(tokenD);\n  \n  let message='';\n  let myTitle = `<img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Healing`;\n\n  r = r.total;\n\n  // Checking for a Critical Failure.\n  if ( sm.isCritical(rolled) ) {\n    message += `${tokenD.name} rolled a <b style=\"color: red; font-size:150%\">Critical Failure!</b> and takes another Wound!`;    \n    sm.applyWounds(tokenD, 1);\n  } else {\n    let skill = 'Healing'.toLowerCase();\n    let actorSkill = tokenD.actor.data.items.find(i => (i.name.toLowerCase() === skill) );\n    let skillName; \n    if (!actorSkill) {skillName = 'Untrained';} else {skillName = actorSkill.name;}\n    message += `<p><b style=\"color:red\">${tokenD.name}</b> rolled <b style=\"color:blue\">${r}</b> with <b style=\"color:darkgreen\">${skillName}</b>`;\n    if (r < 4) {\n      message += ` and is <b style=\"color:red\">unable to heal</b> any Wounds.</p>`;\n    } else if ( r>=4 && r<8 ) {\n      message += ` and heals <b style=\"color:darkgreen\">1</b> of his ${startingWounds} Wounds.</p>`;      \n      sm.applyWounds(tokenD, -1);      \n    } else if ( r>8 ) {\n      message += ` and heals <b style=\"color:darkgreen\">2</b> of his ${startingWounds} Wounds.</p>`;      \n      sm.applyWounds(tokenD, -2);\n    }\n  }\n  \n  message += `<ul>\n  <li><b>Subtract 1</b> from Healing rolls without a basic First Aid kit or similar supplies.</li>\n  <li>This attempt required <b>${startingWounds*10}</b> minutes</li></ul>`;\n  \n  //ChatMessage.create({ content: message });\n  sm.styledChatMessage(myTitle, '', message);\n}\n\n/*\nHealing skill: Each attempt requires 10 minutes per wound level of the patient. Subtract 1 from Healing rolls without a basic First Aid kit or similar supplies.\nA success removes one Wound, and a raise removes two. Failure means no Wounds are removed. A Critical Failure increases the victim’s Wound level by one.\n*/\nasync function skillHealTarget(html, tokenTarget) {\n  // Roll Vigor and check for Fast Healer.  \n  let r = await sm.rollSkill(tokenD, 'healing');  \n  let rolled = r;\n  let startingWounds = sm.getWounds(tokenTarget);\n\n  let message='';\n  let myTitle = `<img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Healing`;\n\n  r = r.total;\n\n  // Checking for a Critical Failure.\n  if ( sm.isCritical(rolled) ) {\n    message += `${tokenD.name} rolled a <b style=\"color: red; font-size:150%\">Critical Failure!</b> and <b style=\"color: red;\">${tokenTarget.name}</b> takes another Wound!`;    \n    sm.applyWoundsForNotOwnedToken(tokenTarget, 1);\n  } else {\n    let skill = 'Healing'.toLowerCase();\n    let actorSkill = tokenD.actor.data.items.find(i => (i.name.toLowerCase() === skill) );\n    let skillName; \n    if (!actorSkill) {skillName = 'Untrained';} else {skillName = actorSkill.name;}\n    message += `<p><b style=\"color:red\">${tokenD.name}</b> rolled <b style=\"color:blue\">${r}</b> with <b style=\"color:darkgreen\">${skillName}</b>`;\n    if (r < 4) {\n      message += ` and is <b style=\"color:red\">unable to heal</b> any Wounds from <b style=\"color: red;\">${tokenTarget.name}</b>.</p>`;\n    } else if ( r>=4 && r<8 ) {\n      message += ` and heals <b style=\"color:darkgreen\">1</b> from <b style=\"color: red;\">${tokenTarget.name}</b>.</p>`;            \n      sm.applyWoundsForNotOwnedToken(tokenTarget, -1);      \n    } else if ( r>8 ) {\n      message += ` and heals <b style=\"color:darkgreen\">2</b> from <b style=\"color: red;\">${tokenTarget.name}</b>.</p>`;   \n      sm.applyWoundsForNotOwnedToken(tokenTarget, -2);      \n    }\n  }\n\n  message += `<ul>\n  <li><b>Subtract 1</b> from Healing rolls without a basic First Aid kit or similar supplies.</li>\n  <li>This attempt required <b>${startingWounds*10}</b> minutes</li></ul>`;\n  \n  sm.styledChatMessage(myTitle, '', message);\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.SjOf7Sp0D4ljIWfQ"},"cf":null}}
{"_id":"2ZVSLM3AeamaG3wo","name":"Active Effect Builder","type":"script","author":"8A8MXeQUcdCXOOtn","img":"icons/magic/symbols/rune-sigil-green.webp","scope":"global","command":"/* AE Builder\ndocs: https://gitlab.com/peginc/swade/-/wikis/active-effects#attribute-keys\n*/\n\nconst version = 'v1.7';\nconst icon = \"icons/magic/symbols/rune-sigil-green.webp\";\n\nif ( canvas.tokens.controlled[0]===undefined && Array.from(game.user.targets)[0]===undefined ) {\n  ui.notifications.error(\"Please, select or target a token.\"); // No Token is Selected\n} else {\n  main();\n}\n\nfunction main() {\n  let tokenD = canvas.tokens.controlled[0];\n  let skills = tokenSkillReaderLabel(tokenD);\n\n  let aeExpirationBehavior = `<select id=\"select-aeExpirationBehavior\" name=\"select-aeExpirationBehavior\">`;\n  aeExpirationBehavior += `<option value=\"startOfTheTurn\">Start of the Turn</option>`;\n  aeExpirationBehavior += `<option value=\"EndOfTheTurn\" selected=\"selected\">End of the Turn</option>`;\n  aeExpirationBehavior += `</select>`;\n  \n  let dialogue_content = `\n    <form>\n      <div class=\"form-group\">\n        <label>Name:</label>\n        <input id=\"aename\" name=\"aename\" type=\"text\" value=\"effect 1\">\n      </div>    \n      <div class=\"form-group\">\n      \n        <label for=\"aeType\">Effect:</label>\n        <input list=\"aeTypes\" id=\"aeType\" name=\"aeType\">\n        <datalist id=\"aeTypes\">\n          <option value=\"data.stats.toughness.armor\">Armor</option>          \n          <option value=\"data.stats.size\">Size</option>\n          <option value=\"data.stats.speed.value\">Pace</option>\n          <option value=\"data.stats.parry.value\">Parry</option>\n          <option value=\"data.stats.toughness.value\">Toughness</option>\n          \n          <option value=\"data.status.isShaken\">Shaken</option>\n          <option value=\"data.status.isDistracted\">Distracted</option>\n          <option value=\"data.status.isVulnerable\">Vulnerable</option>\n          <option value=\"data.status.isStunned\">Stunned</option>\n          <option value=\"data.status.isEntangled\">Entangled</option>\n          <option value=\"data.status.isBound\">Bound</option>          \n          \n          <option value=\"data.attributes.agility.die.sides\">Agility Die</option>         \n          <option value=\"data.attributes.smarts.die.sides\">Smarts Die</option>         \n          <option value=\"data.attributes.spirit.die.sides\">Spirit Die</option>         \n          <option value=\"data.attributes.strength.die.sides\">Strength Die</option>         \n          <option value=\"data.attributes.vigor.die.sides\">Vigor Die</option>         \n\n          <option value=\"data.attributes.agility.die.modifier\">Agility Modifier</option>         \n          <option value=\"data.attributes.smarts.die.modifier\">Smarts Modifier</option>         \n          <option value=\"data.attributes.spirit.die.modifier\">Spirit Modifier</option>         \n          <option value=\"data.attributes.strength.die.modifier\">Strength Modifier</option>         \n          <option value=\"data.attributes.vigor.die.modifier\">Vigor Modifier</option>         \n\n          <option value=\"data.initiative.hasLevelHeaded\">Level Headed</option>         \n          <option value=\"data.initiative.hasImpLevelHeaded\">Improved Level Headed</option>         \n          <option value=\"data.initiative.hasHesitant\">Hesitant</option>         \n          <option value=\"data.initiative.hasQuick\">Quick</option>         \n\n          <option value=\"data.attributes.strength.encumbranceSteps\">Encumbrance Steps</option>                   \n        </datalist>  \n      </div>\n      <div class=\"form-group\">\n        <label>Value:</label>\n        <input id=\"aevalue\" name=\"aevalue\" type=\"text\" value=\"2\">\n      </div>   \n\n      <div class=\"form-group\">\n        <label>Turns:</label>\n        <input id=\"aeturns\" name=\"aeturns\" type=\"text\" value=\"0\">\n      </div>\n      \n      <div class=\"form-group\">\n        <label>Expiration Behavior:</label>\n        ${aeExpirationBehavior}\n      </div>      \n    </form>\n\n    <script>\n      var list = document.getElementById('aeTypes');\n      var skills2 = Array( ${skills} );\n    \n      skills2.forEach(function(item){\n         var option = document.createElement('option');\n         option.value = item + ' Skill Die';\n         list.appendChild(option);\n      });\n      skills2.forEach(function(item){\n         var option = document.createElement('option');\n         option.value = item + ' Skill Modifier';\n         list.appendChild(option);\n      });    \n    </script>\n`;\n\n  let applyChanges = false;\n  let dialogButtons = {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: (html) => {\n        applyActiveEffect(html);\n      }\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    }   \n  }\n\n  // Main Dialogue    \n  new Dialog({\n    title: `Active Effect Builder - ${version}`,\n    content: dialogue_content,\n    buttons: dialogButtons,\n    default: \"yes\",\n  }).render(true);\n}\n\nasync function applyActiveEffect(html) {\n  let aename = html.find('[name=\"aename\"]')[0].value;\n  let aekey = html.find(\"#aeType\")[0].value;\n  let aevalue = html.find('[name=\"aevalue\"]')[0].value;\n  let aeturns = html.find('[name=\"aeturns\"]')[0].value;\n  let aeExpirationBehavior = html.find('[name=\"select-aeExpirationBehavior\"]')[0].value;\n\n  let myActiveEffect;\n\n  let aemode = keyToMode(aekey);\n  aevalue = keyToValue(aekey, aevalue);\n  let tagToKey = skillToKey(aekey);\n  if (tagToKey!=-1) {\n    aekey = tagToKey;\n  }\n\n  if ( aename=='effect 1') {\n    aename = autoNaming(aekey);\n  }\n\n  if ( aeturns!=0) {\n    myActiveEffect = { // AE!!!\n      embedded: {\n        ActiveEffect: { \n          aename:{\n            label: aename,\n            icon : icon,\n            changes: [{\n              \"key\": aekey,\n              \"value\": aevalue, mode: aemode \n            }],\n            duration: {\n              \"rounds\": 5\n            },\n            flags: {\n              swade: {\n                \"expiration\": expirationBehaviorCode(aeExpirationBehavior)\n              }\n            }  \n          }\n        }\n      }      \n    };    \n  } else {\n    myActiveEffect = { // AE!!!\n      embedded: {\n        ActiveEffect:{ \n          aename: {\n            label: aename,\n            icon : icon,\n            changes: [{\n              \"key\": aekey,\n              \"value\": aevalue, mode: aemode \n            }]\n          }\n        }\n      }\n    }\n  }\n\n  //----------------------------------\n  for (let tokenD of canvas.tokens.controlled) {\n    let activeEffectClass = getDocumentClass(\"ActiveEffect\");\n    const output = await warpgate.mutate(tokenD.document, myActiveEffect, {}, {permanent: true});\n  }\n\n  for (let tokenD of Array.from(game.user.targets)) {\n    let activeEffectClass = getDocumentClass(\"ActiveEffect\");\n    const output = await warpgate.mutate(tokenD.document, myActiveEffect, {}, {permanent: true});\n  }\n  \n}\n\nfunction keyToMode(mykey) {\n  //let aeTypeAdd = ['data.stats.toughness.armor', 'data.stats.size', 'data.stats.speed.value', 'data.sta0ts.parry.value', 'data.stats.toughness.value' ];\n  let aeTypeOverride = [ 'data.status.isShaken', 'data.status.isDistracted', 'data.status.isVulnerable', 'data.status.isStunned', 'data.status.isEntangled', 'data.status.isBound', 'data.initiative.hasLevelHeaded', 'data.initiative.hasImpLevelHeaded', 'data.initiative.hasHesitant', 'data.initiative.hasQuick' ];\n\n  if ( aeTypeOverride.includes(mykey) ) {\n    return CONST.ACTIVE_EFFECT_MODES.OVERRIDE;\n  } else { // ADD\n    return CONST.ACTIVE_EFFECT_MODES.ADD;\n  }  \n}\n\nfunction keyToValue(mykey, myvalue) {\n  //let aeTypeAdd = ['data.stats.toughness.armor', 'data.stats.size', 'data.stats.speed.value', 'data.stats.parry.value', 'data.stats.toughness.value' ];\n  let aeTypeOverride = [ 'data.status.isShaken', 'data.status.isDistracted', 'data.status.isVulnerable', 'data.status.isStunned', 'data.status.isEntangled', 'data.status.isBound', 'data.initiative.hasLevelHeaded', 'data.initiative.hasImpLevelHeaded', 'data.initiative.hasHesitant', 'data.initiative.hasQuick' ];\n  let aeTypeSteps = ['data.attributes.agility.die.sides', 'data.attributes.smarts.die.sides', 'data.attributes.spirit.die.sides', 'data.attributes.strength.die.sides', 'data.attributes.vigor.die.sides' ];\n\n  if ( aeTypeOverride.includes(mykey) ) {\n    return true;\n  } else if ( aeTypeSteps.includes(mykey) ) {\n    if ([2,4,6,8,10].includes( Math.abs(myvalue) ) ) {\n      return myvalue;\n    } else {\n      return 2;\n    }\n  } else {\n    return myvalue;\n  }  \n}\n\nfunction skillToKey(mykey) {\n  let skillModifier = 'Skill Modifier';  \n  let skillDie = 'Skill Die';  \n\n  if ( mykey.search(skillModifier)>-1 ) {\n    return skillToModifier(mykey);\n  } else if ( mykey.search(skillDie)>-1 ) {\n    return skillToDie(mykey);\n  } else {\n    return -1;\n  }    \n}\n\n// Expiration\n/* 1 start prompt\n// 3 end promt\n*/\nfunction expirationBehaviorCode(expirationBehavior) {\n  if ( expirationBehavior=='startOfTheTurn' ) {\n    return 1;\n  } else {\n    return 3;\n  }    \n}\n\n// return array skills\nfunction tokenSkillReaderLabel(tokenD) {\n  if (tokenD===undefined) return;\n  let items = tokenD.actor.data.items.filter(e => e.type==='skill');\n  let itemsLabel = [];\n  let itemsList = \"\"; //Display the Chat Card for the selected item\n  for (let item of items) {\n    itemsLabel.push(\"\\\"\" + item.name + \"\\\"\");\n  }\n  return itemsLabel;\n} //return tokenD.actor.data.items.filter(i => (i.type === 'skill') ).map(i => (i.name));  \n  \nfunction skillToDie(skillName) {\n  skillName = skillName.replace(' Skill Die', '');\n  return '@Skill{'+ skillName + '}[data.die.sides]';\n}\n\nfunction skillToModifier(skillName) {\n  skillName = skillName.replace(' Skill Modifier', '');\n  return '@Skill{'+ skillName + '}[data.die.modifier]';\n}\n\nfunction autoNaming(mykey) {\n\n  if ( mykey.search('data.status.is')>-1 ) {\n    return mykey.replace('data.status.is', '');\n  } else if ( mykey.search('data.stats.')>-1 ) {    \n    return toTitleCase( mykey.replace('data.stats.', '').replace('.value', '').replace('.', ' ') );\n  } else if ( mykey.search('data.attributes.strength.encumbranceSteps')>-1 ) {                \n    return 'Encumbrance Steps';\n  } else if ( mykey.search('data.initiative.has')>-1 ) {            \n    return mykey.replace('data.initiative.has', '');\n  } else if ( mykey.search('data.attributes.')>-1 ) {        \n    return toTitleCase( mykey.replace('data.attributes.', '').replace('.die.', ' ') );\n  } else if ( mykey.search('data.die.modifier')>-1 ) {                \n    return mykey.replace('}[data.die.modifier]', '').replace('@Skill{', '') + ' Mod' ;\n  } else if ( mykey.search('data.die.sides')>-1 ) {                    \n    return mykey.replace('}[data.die.sides]', '').replace('@Skill{', '') + ' Die';\n  } else {    \n    return mykey;\n  }  \n} // end autoNaming\n\nfunction toTitleCase(str) {\n  return str.replace(\n    /\\w\\S*/g,\n    function(txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    }\n  );\n}","folder":null,"sort":0,"permission":{"default":0,"8A8MXeQUcdCXOOtn":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.75l7UQ8ICvV0DoJV"},"cf":{"id":"temp_s38de0ct1y","path":"Auto Update","color":"#d600bd"}}}
{"_id":"4QtCeDOxcJZkms5N","name":"LP Check","type":"script","author":"tckKxzbezKvre3KI","img":"icons/commodities/treasure/puzzle-box-glowing-blue.webp","scope":"global","command":"const version = 'v1.2';\nconst chatimage = \"icons/commodities/treasure/puzzle-box-glowing-blue.webp\";\nconst rule = '@Compendium[sprawl-core-rules.sprawl-rules.jhEs3al7qA4sAwaa]{Logistics Points}';\nlet coreRules = false;\nif (game.modules.get(\"sprawl-core-rules\")?.active) { coreRules = true; }\n\n/* LP Check\n\nTODO \n- async\n\nsource: https://gitlab.com/sigil-vtt-projects/sprawlrunners/sprawlrunners/-/issues/10\nicon: icons/commodities/treasure/puzzle-box-glowing-blue.webp\n*/\n\nlet grandTotal = 0;\nlet grandTotalMax = 0;\nlet message;\n\nif (coreRules) {\n  message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${rule}</h2></div><ul>`;\n} else {\n  message = `<div><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Logistics Points</h2><div><ul>`;\n}\n\nlet characters = game.actors.contents.filter(e => e.data.type === 'character' && e.hasPlayerOwner);\n\nif (characters==undefined) {\n  ui.notifications.warn(\"Each player should own a character!\");    \n} else {\n  for(const character of characters) {\n    if (character.data.data.additionalStats.LP==undefined) {\n      ui.notifications.error(\"You need to check Enabled for LP in player Tweaks!\");\n      return;\n    }   \n    \n    let maxLP = character.data.data.additionalStats.LP.max;\n\n    let total = character.items.map(i => i.data.data).filter(p => (p.price > 0) && (p.equipped) ).reduce((total, curr) => total + curr.price, 0);\n    /*let total = character.items\n        .map(i => i.data.data.price)\n        .filter(p => p > 0)\n        .reduce((total, curr) => total + curr, 0);*/\n\n    message += `<li> ${character.name}: <b style=\"color:darkblue\">${total}</b> of <b style=\"color:red\">${maxLP}</b> </li>`;\n\n    character.update({\"data.additionalStats.LP.value\": total});\n\n    grandTotal += total;\n    grandTotalMax += maxLP;\n  }\n\n  message += `</ul><p>Total: <b style=\"color:darkblue\">${grandTotal}</b> of <b style=\"color:red\">${grandTotalMax}</b> </p>`;\n\n  // to chat\n  let chatData = {\n    user: game.user.id,\n    speaker: ChatMessage.getSpeaker(),\n    content: message\n  };\n\n  ChatMessage.create(chatData, {});\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":null}}
{"_id":"4kPqkrZakBope3Sv","name":"Test","type":"script","author":"tckKxzbezKvre3KI","img":"icons/skills/ranged/arrow-strike-apple-orange.webp","scope":"global","command":"const version = 'v1.3';\nconst chatimage = 'icons/skills/ranged/arrow-strike-apple-orange.webp';\nlet coreRules = sm.isModuleOn(\"swade-core-rules\");\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\n/* Test\nIMPORTANT\n- \n\nTODO\n- \nsource: \nicon: icons/sundries/gaming/dice-pair-white-green.webp\n*/\n\n// Requires at least 1 target\nlet supporter;\nlet target;    \nif (canvas.tokens.controlled[0]===undefined || Array.from(game.user.targets)[0]===undefined){\n  ui.notifications.warn(\"You must select a token and target another one!\");    \n} else {\n  supporter=canvas.tokens.controlled[0];\n  target=Array.from(game.user.targets)[0];    \n  main();\n}\n\nfunction main() {  \n\n  let supporterSkills = sm.listSkills(supporter);\n  let targetSkills = sm.listSkills(target);\n\n  let supporterSkillsList = ``;\n  supporterSkills.map((t) => {\n    supporterSkillsList += `<option value=\"${t}\">${t}</option>`;\n  });\n\n  let template = `  \n    <h2>${supporter.name} will try to Test ${target.name}!</h2>\n    \n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\" align=\"center\">\n    <div class=\"divTableCell\">\n        <b>Skill (Choose):</b> \n        <select id=\"skillAttacker\" type=\"text\">\n          ${supporterSkillsList}\n        </select>      \n    </div>    \n    </div>\n    \n    </div>\n    </div>    \n    \n    <br>\n    <h2>Options</h2>\n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <input type=\"checkbox\" id=\"creativecombat\"/>Creative Combat\n    </div>\n    </div>\n    \n    </div>\n    </div> \n    <br>\n  `;\n  \n  new Dialog({\n    title: `Test - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Test!\",\n        callback: async (html) => {\n          testTarget(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      }\n    },\n    default: \"ok\"\n  }, { id: 'kultcss'}).render(true);\n}\n\nasync function testTarget(html) {\n  const skillSupporter = html.find(\"#skillAttacker\")[0].value;    \n  let creativecombat = html.find(\"#creativecombat\")[0].checked;\n  let supporterRolled;\n  let total;\n  let message;\n  let message_temp=``;\n  let word1 = 'Distracted';\n  let word2 = 'Vulnerable';\n  let word3 = 'Shaken';\n  if (coreRules) {\n    word1 = '@Compendium[swade-core-rules.swade-rules.R5Zjq1jL3Xc5VkcH]{Distracted}';\n    word2 = '@Compendium[swade-core-rules.swade-rules.R5Zjq1jL3Xc5VkcH]{Vulnerable}';\n    word3 = '@Compendium[swade-core-rules.swade-rules.HM1iVVbYciEa7X57]{Shaken}';\n  }\n\n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> @Compendium[swade-core-rules.swade-rules.qxPv5O5AJdAKbVFi]{Test}</h2><div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Push</h2>`;\n  }   \n  \n  supporterRolled = await sm.rollSkill(supporter, skillSupporter);  \n  total = supporterRolled.total;\n\n  message += `<p><b style=\"color:darkblue\">${supporter.name}</b> is trying to test <b style=\"color:darkred\">${target.name}</b>.</p>`;  \n\n  message_temp += `<p><b style=\"color:darkred\">${target.name}</b> should roll <b style=\"color:red\">${total}</b> or higher.</p>`;  \n  message_temp += `<h3>Outcomes</h3>`;\n  message_temp += `<ul><li><b style=\"color:darkred\">${supporter.name}</b> succeeded: <b style=\"color:darkblue\">${supporter.name}</b> can add ${word1} or ${word2} to <b style=\"color:darkred\">${target.name}</b></li></ul>`;\n  if (creativecombat==false) {\n    message_temp += `<ul><li><b style=\"color:darkred\">${supporter.name}</b> raised: <b style=\"color:darkblue\">${supporter.name}</b> can add ${word1} or ${word2} to <b style=\"color:darkred\">${target.name}</b> and <b style=\"color:darkred\">${target.name}</b> is ${word3}.</li></ul>`; \n  }\n  \n  if ( sm.isCritical(supporterRolled) ) {\n    message += `<p><b style=\"color:darkblue\">${supporter.name}</b> rolled a <b style=\"color: red;\">Critical Failure!</b>!</p>`;\n  } else if ( total>=4 ) {\n    message += `<p><b style=\"color:darkblue\">${supporter.name}</b> rolled <b style=\"color: red;\">${total}</b>!</p>`;\n    message += message_temp;\n    if (creativecombat==true) {\n      message += `<br>`;\n      message += await creativeCombatMessage();    \n    }\n  } else {\n    message += `<p><b style=\"color:darkblue\">${supporter.name}</b> failed!</p>`;    \n  }\n\n  // send message1\n  let chatData = {\n    content: message\n  };  \n  ChatMessage.create(chatData, {});\n  \n}\n\nasync function creativeCombatMessage() {\n  let message=``;\n  const tableCreativeCombatID = await game.packs.get(\"swade-core-rules.swade-tables\").index.find(el => el.name == \"Creative Combat\")._id;\n  let tableCreativeCombat = await game.packs.get(\"swade-core-rules.swade-tables\").getDocument( tableCreativeCombatID );\n\n  let output = await tableCreativeCombat.roll();\n  let result = output.results[0].data.text;\n  \n  message += `<h3>Creative Combat</h3>`;\n  message += `<p>If you got a raise, this will happen:</p>`;\n  message += `<p>${result}</p>`;\n  return `${message}`;\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":null}}
{"_id":"556DYvDpT7or1hDO","name":"Potion of Stoneskin","type":"script","author":"dJvi2seC8CqTkxhs","img":"icons/consumables/potions/bottle-round-corked-yellow.webp","scope":"global","command":"const version = 'v0.3';\nconst itemName = 'Potion of Stoneskin';\nconst icon = 'icons/consumables/potions/bottle-round-corked-yellow.webp';\n\nconst myActiveEffect = {\n  changes: [{\"key\":\"data.stats.toughness.value\", \"mode\":CONST.ACTIVE_EFFECT_MODES.ADD, \"value\":\"4\"}],\n  icon: icon,\n  label: itemName\n}  \n\n/* \nsource: \nicon: \n*/\nlet tokenD=canvas.tokens.controlled[0];\nconst myTitle = `Potion`;\n  \nif (tokenD===undefined) {\n  ui.notifications.error(\"Please select a token.\"); // No Token is Selected\n} else {\n  main();\n} \n\n// Modified from a macro by spacemandev\nasync function main() {\n  let myItem = await sm.getItem(tokenD, itemName);\n  if(undefined == myItem) {\n    return; \n  }\n  \n  // Active Effect On?\n  const temp = sm.getActiveEffect(tokenD, itemName);\n  if( temp != undefined ) {\n    sm.styledChatMessageSimple(itemName, `You already used it.`, icon);       \n    return;\n  }\n\n  // Subtract item\n  await sm.useItem(tokenD, itemName);\n  \n  // Item does stuff\n  sm.addActiveEffectToOwnedToken(tokenD, myActiveEffect); \n\n  // message\n  sm.styledChatMessageSimple(itemName, `${tokenD.actor.name} used a ${itemName}.`, icon);\n}","folder":null,"sort":0,"permission":{"default":0,"dJvi2seC8CqTkxhs":3},"flags":{"core":{"sourceId":"Macro.pEZxVFjyPvfArG9E"}}}
{"_id":"5Ux28ZwcbRI0VUjH","name":"Potion of Strong Healing","type":"script","author":"dJvi2seC8CqTkxhs","img":"icons/consumables/potions/potion-tube-corked-bat-gold-red.webp","scope":"global","command":"const itemName = 'Potion of Strong Healing';\n\n/* \nsource: \nicon: \n*/\nconst version = 'v0.3';\nlet tokenD=canvas.tokens.controlled[0];\n  \nif (tokenD===undefined) {\n  ui.notifications.error(\"Please select a token.\"); // No Token is Selected\n} else {\n  main();\n} \n\n// Modified from a macro by spacemandev\nasync function main() {\n  let myItem = await sm.getItem(tokenD, itemName);\n  if(undefined == myItem) {\n    return; \n  }\n  \n  //If token is max health if so, don't do anything\n  if( sm.getWounds(tokenD) == 0 ) {\n    sm.styledChatMessageSimple(itemName, `You are not injured.`);       \n    return;\n  }\n\n  //Subtract item\n  await sm.useItem(tokenD, itemName);\n  \n  // remove 1 current wound\n  sm.applyWounds(tokenD, -2);\n\n  sm.styledChatMessageSimple(itemName, `${tokenD.actor.name} used a ${itemName} and cured 2 wound.`);\n}","folder":null,"sort":0,"permission":{"default":0,"dJvi2seC8CqTkxhs":3},"flags":{"core":{"sourceId":"Macro.pEZxVFjyPvfArG9E"}}}
{"_id":"6CInQFu2d6s0s55b","name":"Size/Scale Calculator","type":"script","author":"tckKxzbezKvre3KI","img":"icons/tools/hand/scale-balances-merchant-brown.webp","scope":"global","command":"const version = 'v1.9';\nconst chatimage = \"icons/tools/hand/scale-balances-merchant-brown.webp\";\nconst debugFlag = false;\n\n/* Size Scale p106 SWADE\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/SizeScaleCalculator.js\nicon: icons/tools/hand/scale-balances-merchant-brown.webp\n    // v. 1.0.0 - Original code by brunocalado, modified by SalieriC#8263.\n*/\n\nlet tokenActor = canvas.tokens.controlled[0];\nlet tokenTarget = Array.from(game.user.targets)[0];\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\nconst rules = '@Compendium[swade-core-rules.swade-rules.mbP0fwcquD98QtwX]{Size & Scale}';\n\nif (tokenActor === undefined || tokenTarget === undefined) {\n    ui.notifications.warn(\"You must select a token and target another one!\");\n} else {\n  const actorSwat = token.actor.data.items.find(function (item) {\n      return ((item.name.toLowerCase() === \"swat\") && item.type === \"ability\");\n  });\n  const targetSwat = tokenTarget.actor.data.items.find(function (item) {\n      return ((item.name.toLowerCase() === \"swat\") && item.type === \"ability\");\n  });\n  rollForIt();\n\n\n  function rollForIt() {\n      let actorSize = tokenActor.actor.data.data.stats.size;\n      let targetSize = tokenTarget.actor.data.data.stats.size;\n      let actorModifier = sizeToScaleModifier(actorSize);\n      let targetModifier = sizeToScaleModifier(targetSize);\n      let modifier = getToHitScaleModifier(actorSize, targetSize);\n\n      let message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Size & Scale Calculator</h2>`;\n      if (coreRules === true) {\n          message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${rules} Calculator</h2></div>`;\n      }\n      \n      message += `<ul><li><b>${tokenActor.name}:</b> Size = ${actorSize} / Modifier = ${actorModifier}</li>`;\n      message += `<li><b>${tokenTarget.name}:</b> Size = ${targetSize} / Modifier = ${targetModifier}</li></ul>`;\n      message += `<h3>Result:</h3>`;\n      if (modifier != 0) {\n        message += `<ul><li>${tokenActor.name} has <b style=\"color:red\">${modifier}</b> to attack ${tokenTarget.name}`;\n\n        if (actorSwat) {\n          message += ` and has Swat*.</li>`;\n        } else { message += `.</li>` }\n\n        message += `<li>${tokenTarget.name} has <b style=\"color:red\">${getToHitScaleModifier(targetSize, actorSize)}</b> to attack ${tokenActor.name}`;\n\n        if (targetSwat) {\n          message += ` and has Swat*.</li></ul>`;\n        } else { message += `.</li></ul>` }\n\n        if ((actorSwat && targetSwat) || (actorSwat || targetSwat)) {\n          if (coreRules === true) {\n            message += `<p>*<b>@Compendium[swade-core-rules.swade-rules.q5sk5hEw6TED0FOU]{Swat}:</b> Ignore up to 4 points of penalties from Scale for the specified action(s).</p>`;\n          } else {\n            message += `<p>*<b>Swat:</b> Ignore up to 4 points of penalties from Scale for the specified action(s).</p>`;\n          }\n        }\n      } else {\n        message += `<p><b>There is no modifier.</b> They have the same Scale.</p>`;\n      }\n\n      // send message\n      let chatData = {\n        content: message\n      };\n      ChatMessage.create(chatData, {});\n  }\n\n  function getToHitScaleModifier(actorSize, targetSize) { // Match from page 106 core\n    let actorScaleModifier = sizeToScaleModifier(actorSize);\n    let targetScaleModifier = sizeToScaleModifier(targetSize);\n    return targetScaleModifier - actorScaleModifier;\n  } \n/*\n  function sizeCalculator(actorSize, targetSize) { // Mach from page 106 core\n    let actorModifier = sizeToModifier(actorSize);\n    let targetModifier = sizeToModifier(targetSize);\n\n    let diff;\n    if (actorSize == targetSize) {\n      return 0;\n    } else {\n      // When creatures of different Scales attack each other, the smaller creature adds the difference between its Scale and its target to its attacks. A Tiny fairy (−6 Scale modifier), for example, adds +10 to hurl a bolt at a Huge dragon (+4).\n      if (actorSize < targetSize) {\n        diff = Math.abs(actorModifier) + Math.abs(targetModifier);\n        return diff;\n      // The larger creature subtracts the difference from its attacks. A Very Small eagle (−4) subtracts 2 from its Fighting totals when attacking a Tiny fairy (−6).\n      } else { // actorSize > targetSize\n        diff = Math.abs(actorModifier) - Math.abs(targetModifier);\n        return diff;\n      }\n    }\n  }\n*/\n  function sizeToScaleModifier(size) { //p179 swade core\n    if (size == -4) {\n        return -6;\n    } else if (size == -3) {\n        return -4;\n    } else if (size == -2) {\n        return -2;\n    } else if (size >= -1 && size <= 3) {\n        return 0;\n    } else if (size >= 4 && size <= 7) {\n        return 2;\n    } else if (size >= 8 && size <= 11) {\n        return 4;\n    } else if (size >= 12 && size <= 20) {\n        return 6;\n    } else {\n      ui.notifications.error(\"Size out of scale. Core p179\");\n    }\n  }\n\n}\n\nfunction debugSize() {\n  let actorSize;\n  let targetSize;\n  let output;\n  \n  console.log(\"===========================\");\n  console.log(\"Size/Scale Debug\");\n\n  // actorSize > targetSize\n  actorSize = -3; // Very Small eagle\n  targetSize = -4; // Tiny fairy\n  output = sizeCalculator(actorSize, targetSize);\n  console.log(\"Very Small eagle \" + actorSize + \" attacks Tiny fairy \" + targetSize + ': ' + output);\n\n  actorSize = 8; // Dragon\n  targetSize = 5; // White rhino\n  output = sizeCalculator(actorSize, targetSize);\n  console.log(\"Dragon \" + actorSize + \" attacks White rhino \" + targetSize + ': ' + output);\n   \n  // targetSize > actorSize\n  actorSize = -4; // Tiny fairy\n  targetSize = 8; // dragon\n  output = sizeCalculator(actorSize, targetSize);\n  console.log(\"Tiny fairy \" + actorSize + \" attacks dragon \" + targetSize + ': ' + output);\n\n  console.log(\"===========================\");  \n}\n\nif (debugFlag) {\n  debugSize();\n}\n\n\n/* delete this stuff\n      console.log('---------------');\n      console.log('actorModifier: ' + actorModifier);\n      console.log('targetModifier: ' + targetModifier);\n      console.log('actorSize: ' + actorSize);\n      console.log('targetSize: ' + targetSize);\n      console.log('diff: ' + diff);\n      console.log('---------------');     \n*/","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"cf":null,"combat-utility-belt":{"macroTrigger":""}}}
{"_id":"7mvonjdWYTxqAMVD","name":"3D Measure","type":"script","author":"tckKxzbezKvre3KI","img":"icons/tools/navigation/sextant-steel-blue.webp","scope":"global","command":"const version = '0.2';\nconst icon = 'icons/tools/navigation/sextant-steel-blue.webp';\n\n/* Medir distância v0.1 / Measure distance between two 3d coordinates\nHow to\n1 - Marque um token.\n2 - Selecione outro token\n3 - Execute a macro.\n*/\n\nfunction measureDistance(origin, target) {\n  const gs = canvas.dimensions.size;\n  const ray = new Ray(origin, target);\n\n  // How many squares do we travel across to get there? If 2.3, we should count that as 3 instead of 2; hence, Math.ceil\n  const nx = Math.ceil(Math.abs(ray.dx / gs));\n  const ny = Math.ceil(Math.abs(ray.dy / gs));\n\n  // Elevation\n  const gd = game.scenes.active.data.gridDistance;\n  const oz = origin.elevation ? origin.elevation : 0;\n  const tz = target.elevation ? target.elevation : 0;\n  const nz = Math.ceil(Math.abs(tz - oz) / gd);\n\n  // Let's order and rename nx, ny, nz so that A >= B >= C\n  let [A, B, C] = [nx, ny, nz].sort(function(a, b) { return b - a; });\n\n  // Get the total number of straight and diagonal moves\n  const nStraight = A - B;\n  const nDiagonal = B;\n  const n3dDiagonal = C;\n\n  // Get total distance\n  const distance =\n      nStraight                       // 1 each\n    + Math.floor(nDiagonal * 1.5)     // 1 then 2 then 1 then 2...\n    + Math.floor(n3dDiagonal * 0.5);  // 0 then 1 then 0 then 1...\n\n  // Convert distance to grid's dimensions\n  const distanceOnGrid = distance * canvas.dimensions.distance;\n  return distanceOnGrid;\n}\n\n/*\n * Measure distance between two tokens\n */\nfunction computeDistance(token, target)\n{\n  let tokenData = token.data;\n  let targetData = target.data;\n  const gs = canvas.dimensions.size;\n  const gd = game.scenes.active.data.gridDistance;\n\n  // Set search variables\n  var minDistance = 100000;\n  var minTokenSquare = {};\n  var minTargetSquare = {};\n  var tokenSquare = {};\n  var targetSquare = {};\n  var distance;\n\n  // Search for minimum distance\n  for (let toX = 0; toX < tokenData.width; ++toX) {\n    for (let toY = 0; toY < tokenData.height; ++toY) {\n      for (let toZ = 0; toZ < tokenData.width; ++toZ) {\n        for (let taX = 0; taX < targetData.width; ++taX) {\n          for (let taY = 0; taY < targetData.height; ++taY) {\n            for (let taZ = 0; taZ < targetData.width; ++taZ) {\n              tokenSquare = {\n                x: tokenData.x + toX * gs,\n                y: tokenData.y + toY * gs,\n                elevation: tokenData.elevation + toZ * gd,\n              };\n              targetSquare = {\n                x: targetData.x + taX * gs,\n                y: targetData.y + taY * gs,\n                elevation: targetData.elevation + taZ * gd,\n              }\n              distance = measureDistance(tokenSquare, targetSquare);\n              if (distance < minDistance) {\n                minDistance = distance;\n                minTokenSquare = tokenSquare;\n                minTargetSquare = targetSquare;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return minDistance;\n}\n\n/*\n * Measure distances between a token and a list of targets\n */\nfunction computeDistances(token, targets)\n{\n  return targets.map(function(target) {\n    return {\n      name: target.data.name,\n      distance: computeDistance(token, target),\n    };\n  });\n}\n\n/*\n * Print results to chat\n */\nfunction showResults(token, distances) {\n  let content = '';\n  message = `<h3><img style=\"vertical-align:middle\" src=${icon} width=\"28\" height=\"28\"> Distance from <b>${token.name}</b></h3>`;\n  \n  for(const d of distances) {\n    message += `<p><b>${d.name}</b>: <b style=\"color: red\">${d.distance}</b></p>`;\n  };    \n\n  sm.styledChatMessage(`Distance`, '', message);\n}\n\n/*\n * Run everything\n */\nfunction main() {\n  const selected = canvas.tokens.controlled;\n  if (selected.length === 0) {\n    ui.notifications.error(\"Please select at least one token\");\n    return;\n  }\n\n  const targets = Array.from(game.user.targets);\n  if (targets.length === 0) {\n    ui.notifications.error(\"Please select at least one target\");\n    return;\n  }\n\n  for (let token of selected) {\n    const distances = computeDistances(token, targets);\n    showResults(token, distances);\n  }\n}\n\nmain();","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":null}}
{"_id":"AYCjrZATBexpVCeQ","name":"Potion of Strength","type":"script","author":"dJvi2seC8CqTkxhs","img":"icons/consumables/potions/bottle-conical-corked-labeled-shell-cyan.webp","scope":"global","command":"const version = 'v0.2';\nconst itemName = 'Potion of Strength';\n\nconst myActiveEffect = {\n  changes: [{\"key\":\"data.attributes.strength.die.sides\", \"mode\":CONST.ACTIVE_EFFECT_MODES.ADD, \"value\":\"2\"}],\n  icon: 'icons/consumables/potions/bottle-conical-corked-labeled-shell-cyan.webp',\n  label: itemName\n}  \n\n/* \nsource: \nicon: \n*/\nlet tokenD=canvas.tokens.controlled[0];\nconst myTitle = `Potion`;\nlet message1 = ``;\nlet message2 = itemName;\n  \nif (tokenD===undefined) {\n  ui.notifications.error(\"Please select a token.\"); // No Token is Selected\n} else {\n  main();\n} \n\n// Modified from a macro by spacemandev\nasync function main() {\n  let myItem = await sm.getItem(tokenD, itemName);\n  if(undefined == myItem) {\n    return; \n  }\n  \n  // Active Effect On?\n  const temp = sm.getActiveEffect(tokenD, itemName);\n  if( temp != undefined ) {\n    console.log(sm.getActiveEffect(tokenD, itemName));\n    sm.styledChatMessage(itemName, '', `You already used it.`)       \n    return;\n  }\n\n  // Subtract item\n  await sm.useItem(tokenD, itemName);\n  \n  // Item does stuff\n  sm.addActiveEffectToOwnedToken(tokenD, myActiveEffect); \n\n  // message\n  sm.styledChatMessage(itemName, '', `${tokenD.actor.name} used a ${itemName}.`);\n}","folder":null,"sort":0,"permission":{"default":0,"dJvi2seC8CqTkxhs":3},"flags":{"core":{"sourceId":"Macro.pEZxVFjyPvfArG9E"}}}
{"name":"Token Disposition Changer","type":"script","author":"AUlNbXaKGdJP4sUu","img":"icons/skills/social/diplomacy-handshake.webp","scope":"global","command":"const version = '1.0';\nlet tokens = [...new Set([...canvas.tokens.controlled, ...game.user.targets])]; //use deduplication to get rid of those which are both, selected and targeted:\nlet applyChanges = false;\n\nif (tokens.length === 0) {\n  ui.notifications.error(\"Please, select or target a token.\"); // No Token is Selected\n} else {\n  main();\n}\n\nfunction main() {\n  let currentDispositionList = `<ul>`;\n  for (var tokenD of tokens) {\n    currentDispositionList += `<li><b>${tokenD.name}: </b>${ dispositionToText(tokenD.document.data.disposition) }</li>`;\n  }    \n  currentDispositionList += `</ul>`;\n  \n  let template = `\n    <form>\n      <div class=\"form-group\">\n        <label>Disposition Type:</label>\n        <select id=\"dispo-type\" name=\"dispo-type\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"hostile\">Hostile</option>\n          <option value=\"neutral\">Neutral</option>\n          <option value=\"friendly\">Friendly</option>\n        </select>\n      </div>\n    </form> \n    ${currentDispositionList}\n  `;\n  \n  new Dialog({\n    title: `Token Disposition Changer - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Apply\",\n        callback: async (html) => {\n          dispositionModifier(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      },\n    },\n  }).render(true);  \n  \n}\n\nasync function dispositionModifier(html) {\n  const dispoType = html.find('[name=\"dispo-type\"]')[0].value.toUpperCase();\n  if(dispoType === \"NOCHANGE\") return;\n  const updates = await tokens.map(t => ({_id: t.id, disposition: CONST.TOKEN_DISPOSITIONS[dispoType]}));\n  await canvas.scene.updateEmbeddedDocuments(\"Token\", updates)\n}\n\nfunction dispositionToText(disposition) {\n  if (disposition==-1) {\n    return `<b style=\"color:red;\">Hostile</b>`;\n  } else if (disposition==0) {\n    return `<b style=\"color:black;\">Neutral</b>`;\n  } else {\n    return `<b style=\"color:darkgreen;\">Friendly</b>`;\n  }    \n}\n\n// sourcE: community macros","folder":null,"sort":0,"permission":{"default":0,"AUlNbXaKGdJP4sUu":3},"flags":{"core":{"sourceId":"Macro.D21nD1ljND8usi8p"}},"_id":"E8uKk1EEg0kKUWdN"}
{"_id":"Enp2bPCK5MnCGOK1","name":"Mass Battle","type":"script","author":"tckKxzbezKvre3KI","img":"icons/environment/people/charge.webp","scope":"global","command":"const version = 'v1.5';\nconst chatimage = \"icons/environment/people/charge.webp\";\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\n/* Mass Battle p133 SWADE\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/MassBattle.js\nicon: icons/environment/people/charge.webp\n*/\n\nmain();\n\nfunction main() {  \n  let template = `  \n    <style type=\"text/css\">\n      div.purpleHorizon {\n        border: 4px solid #ff0000;\n        background-color: #000000;\n        width: 100%;\n        text-align: center;\n        border-collapse: collapse;\n      }\n      .divTable.purpleHorizon .divTableCell, .divTable.purpleHorizon .divTableHead {\n        border: 0px solid #550000;\n        padding: 5px 2px;\n      }\n      .divTable.purpleHorizon .divTableBody .divTableCell {\n        font-size: 13px;\n        font-weight: bold;\n        color: #FFFFFF;\n      }\n      \n      .divTable{ display: table; }\n      .divTableRow { display: table-row; }\n      .divTableHeading { display: table-header-group;}\n      .divTableCell, .divTableHead { display: table-cell;}\n      .divTableHeading { display: table-header-group;}\n      .divTableFoot { display: table-footer-group;}\n      .divTableBody { display: table-row-group;}\n\n      /* HIDE RADIO */\n      [type=radio] { \n      position: absolute;\n      opacity: 0;\n      width: 0;\n      height: 0;\n      }\n\n      /* IMAGE STYLES */\n      [type=radio] + img {\n      cursor: pointer;\n      }\n\n      /* CHECKED STYLES */\n      [type=radio]:checked + img {\n      outline: 4px solid #f00;\n      }\n      \n      .container {\n        position: relative;\n        text-align: center;\n        color: white;\n      }\n      /* Centered text */\n      .centered {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        font-size: 18px;\n      }    \n\n      #kultcss .window-content {    \n        background: #000000;\n      }     \n      #kultcss .dialog-button {\n        height: 40px;\n        background: #000000;\n        color: #ffffff;\n        justify-content: space-evenly;\n        align-items: center;\n        cursor: pointer;\n        border: none;    \n      }  \n      #kultcss header {\n        background: #000000;\n        border-radius: 0;    \n        border: none;    \n        margin-bottom: 2px;\n        font-size: .75rem;\n      }\n    </style>    \n    \n    <h1 style=\"color:white\">Force 1</h1>\n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Name</p>\n        <input id=\"name1\" type=\"text\" max=\"20\" style=\"width: 100px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"Force1\">    \n    </div>\n    <div class=\"divTableCell\">      \n      <label>        \n        <div class=\"container\">\n          <p>Force</p>\n        <input id=\"force1\" type=\"number\" min=\"10\" max=\"10\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=10>\n        </div>\n      </label>      \n    </div>    \n    <div class=\"divTableCell\">\n        <p>Die</p>\n        <select id=\"commanderdie1\" type=\"text\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\">\n        <option value=\"1d4x\">1d4x</option>\n        <option value=\"1d6x\">1d6x</option>\n        <option value=\"1d8x\" selected=\"selected\">1d8x</option>\n        <option value=\"1d10x\">1d10x</option>\n        <option value=\"1d12x\">1d12x</option>\n        </select>\n    </div>\n    <div class=\"divTableCell\">\n        <p>Bonus</p>\n        <input id=\"commanderbonus1\" type=\"text\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"3\">       \n    </div>       \n    </div>\n\n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Advantage</p>\n        <input id=\"tacticaladvantage1\" type=\"number\" min=\"0\" max=\"4\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>\n    <div class=\"divTableCell\">      \n      <p>Plan</p>\n      <input id=\"battleplan1\" type=\"number\" min=\"0\" max=\"4\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>    \n    <div class=\"divTableCell\">\n        <p>Players Bonus</p>\n        <input id=\"playersbonus1\" type=\"number\" min=\"-20\" max=\"20\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>\n    <div class=\"divTableCell\">\n        <p>Is Wild?</p>\n        <input id=\"wildcard1\" type=\"checkbox\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" checked>       \n    </div>    \n    </div>\n    \n    </div>\n    </div>\n    \n\n    <h1 style=\"color:white\">Force 2</h1>\n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Name</p>\n        <input id=\"name2\" type=\"text\" max=\"20\" style=\"width: 100px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"Force2\">    \n    </div>\n    <div class=\"divTableCell\">      \n      <label>        \n        <div class=\"container\">\n          <p>Force</p>\n        <input id=\"force2\" type=\"number\" min=\"10\" max=\"10\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=7>\n        </div>\n      </label>      \n    </div>   \n    <div class=\"divTableCell\">\n        <p>Die</p>\n        <select id=\"commanderdie2\" type=\"text\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\">\n        <option value=\"1d4x\">1d4x</option>\n        <option value=\"1d6x\">1d6x</option>\n        <option value=\"1d8x\" selected=\"selected\">1d8x</option>\n        <option value=\"1d10x\">1d10x</option>\n        <option value=\"1d12x\">1d12x</option>\n        </select>\n    </div>\n    <div class=\"divTableCell\">\n        <p>Bonus</p>\n        <input id=\"commanderbonus2\" type=\"text\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"3\">       \n    </div>    \n    </div>\n\n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Advantage</p>\n        <input id=\"tacticaladvantage2\" type=\"number\" min=\"0\" max=\"4\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>\n    <div class=\"divTableCell\">      \n      <label>        \n        <div class=\"container\">\n          <p>Plan</p>\n        <input id=\"battleplan2\" type=\"number\" min=\"0\" max=\"4\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n        </div>\n      </label>      \n    </div>    \n    <div class=\"divTableCell\">\n        <p>Players Bonus</p>\n        <input id=\"playersbonus2\" type=\"number\" min=\"-20\" max=\"20\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>\n    <div class=\"divTableCell\">\n        <p>Is Wild?</p>\n        <input id=\"wildcard2\" type=\"checkbox\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" checked>       \n    </div>      \n    </div>\n    \n    </div>\n    </div>\n    \n  `;\n  \n  new Dialog({\n    title: `Mass Battle - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Battle!\",\n        callback: async (html) => {\n          massbattle(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      }\n    },\n    default: \"ok\"\n  }, { id: 'kultcss'}).render(true);\n}\n\nasync function massbattle(html){\n  // FORCE 1\n  const name1 =  html.find(\"#name1\")[0].value;    \n  const force1 = parseInt( html.find(\"#force1\")[0].value );    \n  const commanderdie1 = html.find(\"#commanderdie1\")[0].value;  \n  const commanderbonus1 = html.find(\"#commanderbonus1\")[0].value;    \n  const tacticaladvantage1 =  parseInt( html.find(\"#tacticaladvantage1\")[0].value );    \n  const battleplan1 = parseInt( html.find(\"#battleplan1\")[0].value );    \n  const playersbonus1 = parseInt( html.find(\"#playersbonus1\")[0].value );  \n  const wildcard1 = html.find(\"#wildcard1\")[0].checked;\n  //const stackupcards = html.find(\"#stackupcards\")[0].checked;\n\n  // FORCE 2\n  const name2 =  html.find(\"#name2\")[0].value;    \n  const force2 = parseInt( html.find(\"#force2\")[0].value );    \n  const commanderdie2 = html.find(\"#commanderdie2\")[0].value;  \n  const commanderbonus2 = html.find(\"#commanderbonus2\")[0].value;    \n  const tacticaladvantage2 =  parseInt( html.find(\"#tacticaladvantage2\")[0].value );    \n  const battleplan2 = parseInt( html.find(\"#battleplan2\")[0].value );    \n  const playersbonus2 = parseInt( html.find(\"#playersbonus2\")[0].value ); \n  const wildcard2 = html.find(\"#wildcard2\")[0].checked;\n\n  // \n  let commander1DiceExpression;\n  if (wildcard1) {\n    commander1DiceExpression = '{' + commanderdie1 + '+' + commanderbonus1 + ', 1d6x+' + commanderbonus1 + '}';\n  } else {\n    commander1DiceExpression = commanderdie1 + '+' + commanderbonus1;\n  }  \n  if (wildcard2) {\n    commander2DiceExpression = '{' + commanderdie2 + '+' + commanderbonus2 + ', 1d6x+' + commanderbonus2 + '}';\n  } else {\n    commander2DiceExpression = commanderdie2 + '+' + commanderbonus2;\n  }  \n  \n  let commander1Dice = await new Roll(commander1DiceExpression).roll({ async : false });  \n  let commanderRolled1;\n  if (wildcard1) {\n    commanderRolled1 = Math.max( commander1Dice.terms[0].rolls[0].total,  commander1Dice.terms[0].rolls[1].total );\n  } else {\n    commanderRolled1 = commander1Dice.total;\n  }\n  \n  let commander2Dice = new Roll(commander2DiceExpression).roll({ async : false });  \n  let commanderRolled2;\n  if (wildcard2) {\n    commanderRolled2 = Math.max( commander2Dice.terms[0].rolls[0].total,  commander2Dice.terms[0].rolls[1].total );\n  } else {\n    commanderRolled2 = commander2Dice.total;\n  }\n  let result1=0;\n  let result2=0;\n  \n  let message;\n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> @Compendium[swade-core-rules.swade-rules.IJkWxV4kddDaU0Gl]{ Mass Battles}</h2></div>`;\n  } else {\n    message = `<div><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Mass Battle</h2><div>`;\n  }\n  \n  let forceMessage1;\n  let forceMessage2;\n  if (force1>force2) {\n    result1 += forceBonus(force1, force2);\n    forceMessage1 = `<li><b>Force Size:</b> ${force1} <b style=\"color:red\">(+${forceBonus(force1, force2)})</b></li>`;\n    forceMessage2 = `<li><b>Force Size:</b> ${force2} <b style=\"color:red\">(+0)</b></li>`;\n  } else {\n    result2 += forceBonus(force1, force2);\n    forceMessage2 = `<li><b>Force Size:</b> ${force2} <b style=\"color:red\">(+${forceBonus(force1, force2)})</b></li>`;\n    forceMessage1 = `<li><b>Force Size:</b> ${force1} <b style=\"color:red\">(+0)</b></li>`;    \n  }\n  result1 += tacticaladvantage1;\n  result2 += tacticaladvantage2;\n  result1 += battleplan1;\n  result2 += battleplan2;\n  result1 += playersbonus1;\n  result2 += playersbonus2;\n  result1 += commanderRolled1;\n  result2 += commanderRolled2;\n  \n  if (wildcard1) {\n    message += `<h2>(Wild Card) ${name1}</h2>`;\n  } else {\n    message += `<h2>${name1}</h2>`;\n  }\n   \n  message += `<ul>\n  <li><b style=\"color:red\">Total:</b> ${result1}</li>\n  <li><b>Commander Roll:</b> ${commanderRolled1}</li>\n  ${forceMessage1}\n  <li><b>Tactical Advantage:</b> ${tacticaladvantage1}</li>\n  <li><b>Battle Plan:</b> ${battleplan1}</li>\n  <li><b>Players Bonus:</b> ${playersbonus1}</li>\n  </ul>`;\n  \n  if (wildcard2) {\n    message += `<h2>(Wild Card) ${name2}</h2>`;\n  } else {\n    message += `<h2>${name2}</h2>`;\n  }\n  message += `<ul>\n  <li><b style=\"color:red\">Total:</b> ${result2}</li>\n  <li><b>Commander Roll:</b> ${commanderRolled2}</li>\n  ${forceMessage2}\n  <li><b>Tactical Advantage:</b> ${tacticaladvantage2}</li>\n  <li><b>Battle Plan:</b> ${battleplan2}</li>\n  <li><b>Players Bonus:</b> ${playersbonus2}</li>\n  </ul>`;\n  \n  message += winnerCheck(result1, result2, name1, name2, force1, force2);\n  \n  // 3D Dice\n  commander1Dice.toMessage({flavor: `${name1}`, whisper : ChatMessage.getWhisperRecipients(\"GM\") });\n  commander2Dice.toMessage({flavor: `${name2}`, whisper : ChatMessage.getWhisperRecipients(\"GM\") });\n  \n  // Create Journal on Click\n  const buttonID = Math.floor(Math.random(0.1)*1000000000);\n  sm.addEventListenerOnHtmlElement(\"#createJournalEntry_\"+buttonID, 'click', (e) => {    \n    let data = {\n      name: 'Mass Battle',\n      content: message\n    };  \n    createJournalEntry(data);\n  });  \n\n  message+=`<p>Click the button to create a journal with this data.</p>`;\n  message+=`<button style=\"background:#d10000;color:white\" id=\"createJournalEntry_${buttonID}\">Create Journal</button>`;  \n  \n  let chatData = {\n    content: message,\n    whisper : ChatMessage.getWhisperRecipients(\"GM\")\n  };  \n  ChatMessage.create(chatData, {});  \n}\n\nfunction forceBonus(force1, force2) {\n  if (force1>force2) {\n    return (force1-force2)\n  } else if (force2>force1) {\n    return (force2-force1)\n  } else {\n    return 0;\n  }\n}\n\nfunction winnerCheck(result1, result2, name1, name2, force1, force2) {\n  let message = `<h2 style=\"color:red\">Result</h2>`;\n  let force1after = force1;\n  let force2after = force2;\n  if (result1>result2) {\n    if ( (result1+4)>=result2 ) { // raise\n      message += `<p><b>Victory:</b> The defeated army loses two Force Tokens.</p>`;        \n      force2after -= 2; \n    } else {\n      message += `<p><b>Marginal Victory:</b> The victor loses one Force Token, the defeated loses two.</p>`;        \n      force2after -= 2; \n      force1after -= 1;          \n    }    \n    message += `<ul><li>Winner: <b>${name1}</b></li>`;\n    message += `<li>Loser: <b>${name2}</b></li>`;         \n  } else if (result2>result1) {\n    if ( (result2+4)>=result1 ) { // raise\n      message += `<p><b>Victory:</b> The defeated army loses two Force Tokens.</p>`;        \n      force1after -= 2; \n    } else {\n      message += `<p><b>Marginal Victory:</b> The victor loses one Force Token, the defeated loses two.</p>`;        \n      force1after -= 2; \n      force2after -= 1;          \n    }\n    message += `<ul><li>Winner: <b>${name2}</b></li>`;\n    message += `<li>Loser: <b>${name1}</b></li>`;    \n  } else {\n    message += `<p><b>Draw:</b> Both sides lose one Force Token.</p>`;    \n    force1after -= 1; \n    force2after -= 1;\n    message += `<ul><li>The <b>${name1}</b> and <b>${name2}</b> are tied.</li>`;    \n  }\n\n  message += `<li><b>${name1}:</b> has ${force1after} force tokens</li>`;\n  message += `<li><b>${name2}:</b> has ${force2after} force tokens</li></ul>`;\n  \n  message += `<h2 style=\"color:darkblue\">Morale</h2><ul>`;\n  if ( (force1-force1after)>0 ) {\n    message += `<li>-${force1-force1after}: for <b>${name1}</b> spirit roll</li>`;\n  }\n  if ( (force2-force2after)>0 ) {\n    message += `<li>-${force2-force2after}: for <b>${name2}</b> spirit roll</li>`;\n  }\n  message += `<li>+2: The army is made up mostly of undead or other fearless troops.</li>`;\n  message += `<li>+2: The army is within fortifications or prepared positions.</li>`;\n  message += `<li>+2: The army cannot retreat or will be killed if it does.</li></ul>`;\n\n  return message;\n}\n\nasync function createJournalEntry(data) {  \n  const instantAdventure = await JournalEntry.create(data);\n  await instantAdventure.sheet.render(true);    \n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":null}}
{"_id":"FRhH6lKHaWDR2JVF","name":"Player Macro Manager","type":"script","author":"tckKxzbezKvre3KI","img":"icons/sundries/documents/document-writing-pink.webp","scope":"global","command":"const version = '0.7';\n\n/*\n  GM Menu\n  \n  icons: icons/sundries/documents/document-writing-pink.webp\n  \n  Fill the constant macros with the names of your macros, when you click the button it will run the macro.\n\n  Dialog Window will not close until the X button is pressed.\n*/\nconst managerType = 'Player - Macro Manager';\n\n(()=>{\n  const macros = [\n    \"Unshaken\",\n    \"Unstun\",\n    \"Fear Table\",\n    \"Gang Up\",\n    \"Healing\",\n    \"Raise Calculator\",\n    \"Size/Scale Calculator\",\n    \"Support\",\n    \"Survival Guide\",\n    \"Power Point Management\",\n    \"Test\"\n  ];\n\n  let buttons = {}, dialog, content = `<div sytle=\"width:100%;text-align:center;><h2>Choose Macro</h2></div>`;\n  \n  macros.forEach((str)=> {\n    let macro = game.macros.getName(str);\n    if(!macro) return;\n\n    buttons[str] = {\n      label : `\n        <div style=\"display:flex;flex-direction:row;justify-content:center;align-items:center;width\">\n          <div style=\"display:flex;justify-content:left;flex-grow:1;\"><img src=\"${macro.data.img}\" width=\"25\" height=\"25\" style=\"background-color:#5c5c5c;\"/></div>\n          <div style=\"display:flex;justify-content:left;flex-grow:4\"><label>${str}</label></div>\n        </div>`,\n      callback : () => {\n        game.macros.getName(str).execute();\n        //dialog.render(true);\n      }\n    }\n  });\n  dialog = new Dialog({title : `${managerType}`,content, buttons}).render(true);\n})();","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":null}}
{"_id":"G8iyhjvVbL6Y0i27","name":"Interludes","type":"script","author":"tckKxzbezKvre3KI","img":"icons/sundries/books/book-backed-blue-gold.webp","scope":"global","command":"const tableName = 'Action Cards';\nconst version = 'v1.0';\nconst chatimage = \"icons/sundries/books/book-backed-blue-gold.webp\";\nconst ruleLink = '@Compendium[swade-core-rules.swade-rules.fSBsmuTK9aYdGBsE]{Interludes}';\nlet coreRules = sm.isModuleOn(\"swade-core-rules\");\n\n/*\n\nTODO \n- \nsource: \nicon: \n*/\n\nif (canvas.tokens.controlled[0]===undefined) {\n  ui.notifications.error(\"Please select one or more tokens.\"); // No Token is Selected\n} else {\n  main();\n}\n\nasync function main() {\n  let messageHeader = ``;\n  const players_list = await game.users.contents;\n  let characters = canvas.tokens.controlled.filter(e => e.actor.data.type === 'character' && e.actor.hasPlayerOwner);\n  \n  if (coreRules) {\n    messageHeader = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${ruleLink}</h2></div><ul>`;\n  } else {\n    messageHeader = `<div><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Interludes</h2><div><ul>`;\n  }\n\n  await game.tables.find((t) => t.data.name == tableName).reset(); // reset table\n\n  for (var i = 0; i < characters.length; i++) {\n    let message = messageHeader;\n    const tableResult = await drawFromTable(tableName);\n    message+=`<h3><b style=\"color:red\">${characters[i].name}</b> got <b>${tableResult}!</b></h3>`\n    if( tableResult.includes('Joker') ) {\n      message+=`<p>You drew a Joker! Everyone will get an extra Benny and you can choose the suit and category!</p>`\n    } \n    message+=interludeOutcome(tableResult);\n    \n    const selected_player = await players_list.find((t) => t.data.character == characters[i].actor.id);\n    //players_list.find((t) => t.data.character == canvas.tokens.controlled[0].actor.id);\n    sm.debug(characters[i].actor.id)\n    sm.debug(selected_player.data.character)\n    let chatData = {\n      user: game.user.id,    \n      content: message,\n      whisper : [selected_player.id],\n      speaker: ChatMessage.getSpeaker( { actor: characters[i].actor } )      \n    };   \n\n    ChatMessage.create(chatData, {});     \n  } // end for\n  \n}\n\nasync function drawFromTable(tableName) {\n  let tableResult = (\n    await game.tables\n      .find((t) => t.data.name == tableName)\n      .drawMany(1, { displayChat: false })\n  ).results;\n  \n  return tableResult[0].data.text;\n}\n\nfunction interludeOutcome(tableResult) {\n  const spadesText=`<ul>\n  <li><p><b>Downtime:</b> The character spends time alone in quiet contemplation. What does she do?</p></li>\n<li><p><b>Backstory:</b> A great victory or personal triumph.</p></li>\n<li><p><b>Trek:</b> A difficult obstacle the group negotiated along the way.</p></li></ul>`;\n  const heartsText=`<ul>\n  <li><p><b>Downtime:</b> The hero practices a skill. What is it?</p></li>\n<li><p><b>Backstory:</b> A tale of the hero’s greatest love—lost, found, present, or waiting on her back home.</p></li>\n<li><p><b>Trek:</b> How the party endured a trying hardship on the journey.</p></li></ul>`;\n  const diamondsText=`<ul>\n  <li><p><b>Downtime:</b> The character studies or works on an object of some sort. What is it?</p></li>\n<li><p><b>Backstory:</b> Something your hero wants or already has. It might be a material possession, recognition, a political goal, or even a trip he wishes to take to some amazing destination.</p></li>\n<li><p><b>Trek:</b> How the group found something that helped them along the way, such as an oasis, minor treasure, ammo, food, friendly locals, etc.</p></li></ul>`;\n  const clubsText=`<ul>\n  <li><p><b>Downtime:</b> Your hero broods or is angry about something. What is it, and how does she misbehave?</p></li>\n<li><p><b>Backstory:</b> A tale of misfortune from your hero’s past, perhaps revealing something of his Hindrances or a dark secret.</p></li>\n<li><p><b>Trek:</b> A hardship the party overcame on their trip: the tragic death of a favored Extra, spoiled or lost supplies, a mechanical breakdown, abysmal weather, and so on.</p></li></ul>`;\n  let jokerText = `\n    <style scoped>\n      .custom-sizing-spacing {\n          margin: 1em 0;\n      }\n    </style>\n    <details class=\"custom-sizing-spacing\">\n      <summary>Spades</summary>\n        ${spadesText}\n    </details>\n    <details class=\"custom-sizing-spacing\">\n      <summary>Hearts</summary>\n        ${heartsText}\n    </details>\n    <details class=\"custom-sizing-spacing\">\n      <summary>Diamonds</summary>\n        ${diamondsText}\n    </details>\n    <details class=\"custom-sizing-spacing\">\n      <summary>Clubs</summary>\n        ${clubsText}\n    </details>    \n  `  ;\n\n  if( tableResult.includes('Spades') ) {\n    return spadesText;\n  } else if( tableResult.includes('Hearts') ) {\n    return heartsText;\n  } else if( tableResult.includes('Diamonds') ) {\n    return diamondsText;\n  } else if( tableResult.includes('Clubs') ) {    \n    return clubsText;\n  } else { // joker\n    //   send joker to every one\n    return jokerText;\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.PZeMy30QEsGkWAhZ"},"cf":null}}
{"_id":"GrvWFpJ8aaEQpt68","name":"Feet To SWADE","type":"script","author":"tckKxzbezKvre3KI","img":"icons/tools/navigation/map-chart-tan.webp","scope":"global","command":"// IMPORTANT: MAKE A SCENE BACKUP BEFORE RUN THIS MACRO\n// ----------------------------------------------------\n\n/* Feet to SWADE\nsource: \nicon: icons/tools/navigation/map-chart-tan.webp \n*/\n\nconst version = 'v1.1';\n\nmain()\n\nasync function main() {\n  new Dialog({\n    title: `Grid/Light Modifier - ${version}`,\n    content: `\n    <p style=\"text-align:center;\"><b style=\"color:red;\">WARNING: THIS ACTION CAN'T BE UNDONE!</b></p>\n    <h2>Light Divider</h2>\n    <p>\n      <input type=\"number\" id=\"lightMulti\" value=5 min=\"1\" max=\"20\" style=\"text-align:center;\"/>\n    </p>\n    <p>\n      All lights size in the scene will be divided by this number.\n    </p>\n    \n    <br>\n    <h2>Grid Distance</h2>\n    <p>\n      <input type=\"number\" id=\"newDistance\" value=1 min=\"1\" max=\"1000\" style=\"text-align:center;\"/>\n    </p>\n    <p>\n      The Grid Distance will be set to this number.\n    </p>\n    \n    <br>\n    <h2>Grid Unit Name</h2>\n    <p>\n      <input type=\"text\" id=\"newUnit\" value=\"in\" style=\"text-align:center;\"/>\n    </p>    \n    <p>\n      The grid unit will be set to this.\n    </p>\n\n    <br>\n    `,\n    buttons: {\n      roll: {\n        label: \"Update\",\n        callback: (html) => {\n          patchScene(html);\n        }\n      }, \n      cancel: {\n        label: \"Cancel\"\n      }\n    }\n  }).render(true)\n}\n\nasync function patchScene(html) { \n  let lightMulti =  parseInt( html.find(\"#lightMulti\")[0].value );  \n  let newDistance = parseInt( html.find(\"#newDistance\")[0].value );  \n  let newUnit = html.find(\"#newUnit\")[0].value;    \n  \n  await canvas.lighting.updateAll((i) => ({\n    \"config.bright\" : Math.round( i.data.config.bright / lightMulti ) , \"config.dim\" : Math.round( i.data.config.dim / lightMulti ) \n  }));\n  \n  await canvas.scene.update({gridDistance: newDistance, gridUnits: newUnit});\n\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":null}}
{"_id":"HsbLPXpTogjxOWDA","name":"Potion of Full Healing","type":"script","author":"dJvi2seC8CqTkxhs","img":"icons/consumables/potions/bottle-round-corked-orante-red.webp","scope":"global","command":"const itemName = 'Potion of Full Healing';\n\n/* \nsource: \nicon: \n*/\nconst version = 'v0.2';\nlet tokenD=canvas.tokens.controlled[0];\nconst myTitle = `Potion`;\n  \nif (tokenD===undefined) {\n  ui.notifications.error(\"Please select a token.\"); // No Token is Selected\n} else {\n  main();\n} \n\n// Modified from a macro by spacemandev\nasync function main() {\n  let myItem = await sm.getItem(tokenD, itemName);\n  if(undefined == myItem) {\n    return; \n  }\n  \n  //If token is max health if so, don't do anything\n  if( sm.getWounds(tokenD) == 0 ) {\n    sm.styledChatMessageSimple(itemName, `You are not injured.`)       \n    return;\n  }\n\n  //Subtract item\n  await sm.useItem(tokenD, itemName);\n  \n  // remove 1 current wound\n  sm.applyWounds(tokenD, -sm.getWounds(tokenD));\n\n  sm.styledChatMessageSimple(itemName, `${tokenD.actor.name} used a ${itemName} and cured ${sm.getWounds(tokenD)} wounds.`);\n}","folder":null,"sort":0,"permission":{"default":0,"dJvi2seC8CqTkxhs":3},"flags":{"core":{"sourceId":"Macro.pEZxVFjyPvfArG9E"}}}
{"_id":"IwToW7k2oGStzoAy","name":"Falling Damage Calculator","type":"script","author":"AUlNbXaKGdJP4sUu","img":"icons/skills/wounds/bone-broken-marrow-red.webp","scope":"global","command":"const version = 'v1.1';\nconst chatimage = 'icons/skills/wounds/bone-broken-marrow-red.webp';\n/*\nFailing Damage\n*/\n\n/* rules\nselect 1d6+1 \nmax 10d6 + 10\nSoft grounds (foot):\n\nOUTPUT water:\n\nFalling damage is 1d6 + 1 per 2″ (4 yards), to a maximum of 10d6 + 10.\n\nSnow: Particularly soft ground, such as very deep snow, acts as a cushion. Every foot of soft snow reduces damage 1 point.\n\nWater: A successful Athletics roll halves damage into reasonably deep water at heights of 10″ (20 yards) or less. A raise negates the damage entirely. Those who fall into water from heights greater than 20 yards take damage as if they’d hit solid earth.\n*/\n\nlet tokens = [...new Set([...canvas.tokens.controlled, ...game.user.targets])]; //use deduplication to get rid of those which are both, selected and targeted:\n\nif (tokens.length === 0) {\n  return ui.notifications.error(\"Select or target one or more tokens first.\");\n}\n\nlet messageContent = `<h2><img style=\"border: 0;vertical-align:middle;\" src=${this.data.img} width=\"28\" height=\"28\"> Damage from Falling</h2>`;\nconst options = `<option value=\"na\">n/a</option><option value=\"success\">Success</option><option value=\"raise\">Raise</option>`;\n\nmain();\n\n// ---------------\n//roll the damage the character takes based on the distance:\nasync function roll_damage(token, fallingDepth, snowDepth, waterSuccess) {\n  let halvedDepth = Math.min( Math.ceil(fallingDepth / 2), 10); //damage per 2\" - max 10\n  let damageFormula = `(${halvedDepth}d6)+${halvedDepth}`;\n  let rollDamage = await new Roll(`${damageFormula}`).roll({ async : false });\n  await rollDamage.toMessage(); // 3d dice\n  let damage = rollDamage.total;\n  let waterRaise = false;\n  if (snowDepth > 0) {\n    damage = damage - snowDepth;\n  } else if (waterSuccess != \"na\") {\n    if (waterSuccess === \"success\") {\n      damage = Math.ceil(damage / 2)\n    } else if (waterSuccess === \"raise\") {\n      waterRaise = true;\n      damage = 0;\n    }\n  }\n  if (waterRaise === false) {\n    messageContent += `<p><b>${token.data.name}</b> falls <b>${fallingDepth}&rdquo;</b> and takes <strong style=\"color:red\">${damage}</strong> damage.</p>`\n  } else if (waterRaise === true) {\n    messageContent += `<p><b>${token.data.name}</b> falls <b>${fallingDepth}&rdquo;</b> but dives into the water gracefully, taking no damage in the process.</p>`\n  }\n  await calculate_damage(token, damage);\n}\n\nasync function calculate_damage(token, damage) {\n  const toughness = token.document._actor.data.data.stats.toughness.value;\n  const isShaken = token.document._actor.data.data.status.isShaken;\n  const raises = Math.floor((damage - toughness) / 4);\n  const isHardy = token.document._actor.data.items.find(function(item) {\n    return ((item.name.toLowerCase() === \"hardy\") && item.type === \"ability\");\n  });\n  if (toughness > damage) {\n    messageContent += `<ul><li>No harm.</li></ul>`;\n  } else if (toughness <= damage) {\n    if (isShaken === false && raises <= 0) {\n      messageContent += `<ul><li>Shaken.</li></ul>`;\n    } else if (isShaken === false && raises >= 1) {\n      messageContent += `<ul><li>Shaken and ${raises} Wounds.</li></ul>`;\n      sm.applyWounds(token, raises);\n    } else if (isShaken === true && raises <= 1) {\n      if (!isHardy || raises === 1) {\n        messageContent += `<ul><li>1 Wounds.</li></ul>`;\n        sm.applyWounds(token, 1);\n      } else if (isHardy) {\n        messageContent += `<ul><li>No harm.</li></ul>`;\n      }\n    } else if (isShaken === true && raises >= 1) {\n      let wounds = raises - 1;\n      messageContent += `<ul><li>${wounds} Wounds.</li></ul>`;\n      sm.applyWounds(token, wounds);\n    }\n  }\n}\n\nasync function main() {\n  let content =\n    `<div>\n        <details>\n          <summary>Fall Calculation (click to expand)</summary>\n          <p>Provide a falling depth in &rdquo; (squares on the tabletop; each equals 2 yards &cong; 2 meters).</p>\n          <p>Snow and other soft ground reduces the damage. Provide a depth in feet (&cong; 30 cm) if applicable or leave it at 0 if not.</p>\n          <p>Falling in water allows an Athletics roll. If applicable provide the degree of success. If not applicable or if the roll was failed, leave it at \"n/a\".</p>\n        </details> <br>\n        <p style=\"font-size:12px\"><b>Tip:</b> One click the text and use mouse scroll to change the number.</p>\n        <div style=\"display: grid; grid-template-columns: 5fr 1.2fr 1fr 1.3fr; grid-gap: 2px;\">\n        <strong style=\"text-align: left;\">Token</strong>\n        <strong style=\"text-align: center;\">Depth</strong>\n        <strong style=\"text-align: center;\">Snow</strong>\n        <strong style=\"text-align: center;\">Athletics</strong>\n    `;\n  for (let token of tokens) {\n    content += `\n        <p>\n          <img style=\"border: 0; text-align: left;\" src=\"${token.data.img}\" width=\"25\" height=\"25\" /> \n          <span style=\"vertical-align: super; text-align: left;\">${token.data.name}</span>\n        </p>\n        <input style=\"text-align: center;\" id=\"fallingDepth-${token.id}\" style=\"flex: 1;\" type=\"number\" value=\"0\" />\n        <input style=\"text-align: center;\" id=\"snowDepth-${token.id}\" style=\"flex: 1;\" type=\"number\" value=\"0\" />\n        <select style=\"text-align: center;\" id=\"water-${token.id}\">${options}</select>\n    `;\n  };\n  content += `\n        </div>\n    </div><br>`;\n  new Dialog({\n    title: \"Falling Damage Calculator\",\n    content: content,\n    buttons: {\n      roll: {\n        label: \"Roll\",\n        callback: async (html) => {\n          for (let token of tokens) {\n            //Getting results from checkboxes and making the rolls.\n            let fallingDepth = Number(html.find(`#fallingDepth-${token.id}`)[0].value);\n            let snowDepth = Number(html.find(`#snowDepth-${token.id}`)[0].value);\n            let waterSuccess = html.find(`#water-${token.id}`)[0].value;\n            if (waterSuccess != \"na\" && snowDepth != 0) {\n              return ui.notifications.error(`You can't combine water and snow.`)\n            }\n            await roll_damage(token, fallingDepth, snowDepth, waterSuccess);\n          }\n/* TODO chat button   \n          sm.addEventListenerOnHtmlElement(\"#ChatButtonMacrosForSWADE\", 'click', (e) => {    \n            let tokenD = canvas.tokens.controlled[0];\n            let rolled = tokenD.actor.rollAttribute('spirit');    // ROLL SPIRIT\n          });  \n          messageContent+=`<button style=\"background:#d10000;color:white\" id=\"ChatButtonMacrosForSWADE\">Soak</button>`;            \n*/          \n          ChatMessage.create({\n            speaker: ChatMessage.getSpeaker({\n              token: actor\n            }),\n            content: messageContent\n          });\n        }\n      },\n      cancel: {\n        label: \"Cancel\"\n      }\n    }\n  }).render(true)\n}\n\n\n          \n  \n  \n\n  \n\n/*****\n * Falling Damage Macro.\n * This macro automatically calculates falling damage for all selected tokens.\n * It is capable of factoring in water and snow/soft surfaces as per the core rules.\n * v. 1.0.0 by SalieriC#8263, CSS of the dialogue by Kyane von Schnitzel#8654\n * (Do not remove credits, even if editing.)\n *****/","folder":null,"sort":0,"permission":{"default":0,"AUlNbXaKGdJP4sUu":3},"flags":{"core":{"sourceId":"Macro.C5HPCPFdYFzxeyu2"}}}
{"name":"Coin Manager for Savage Pathfinder","type":"script","author":"8A8MXeQUcdCXOOtn","img":"icons/commodities/currency/coins-plain-gold.webp","scope":"global","command":"/* Coin Manager for Savage Pathfinder \nsource: \nicon: icons/commodities/currency/coins-plain-gold.webp\n\nTODO\n*/\n\nconst version = 'v1.1';\nconst icon = \"icons/commodities/currency/coins-plain-gold.webp\";\n\nconst iconCopper = \"icons/commodities/currency/coins-assorted-mix-platinum.webp\";\nconst iconSilver = \"icons/commodities/currency/coins-assorted-mix-silver.webp\";\nconst iconGold = \"icons/commodities/currency/coins-plain-gold.webp\";\nconst iconPlatinum = \"icons/commodities/currency/coin-embossed-unicorn-silver.webp\";\n\nlet coreRules = false;\nif (game.modules.get(\"swpf-core-rules\")?.active) { coreRules = true; }\n\nif ( canvas.tokens.controlled[0]===undefined && Array.from(game.user.targets)[0]===undefined ) {\n  ui.notifications.error(\"Please, select or target a token.\"); // No Token is Selected\n} else {\n  main();\n}\n\nfunction main() {\n  let tokens = canvas.tokens.controlled;\n  let playersNames = tokens.map((p=> p.data.name)); \n\n\n  let playerNameList = `<option value=\"everyone\" selected>Everyone</option>`;\n  //let playerNameList=``;\n  for (var tokenD of tokens) {\n    playerNameList += `<option value=\"${tokenD.actor.id}\">${tokenD.name}</option>`;\n  }  \n\n  /* Show actual xp points*/\n  let currentHeroPointsList = '';\n  for (var tokenD of tokens) {\n    var copper = getCoinsTotal(getCoins(tokenD.actor.id, 'Copper') );\n    var silver = getCoinsTotal(getCoins(tokenD.actor.id, 'Silver') );\n    var gold = getCoinsTotal(getCoins(tokenD.actor.id, 'Gold') );\n    var platinum = getCoinsTotal(getCoins(tokenD.actor.id, 'Platinum') );\n    currentHeroPointsList += `<p><b>${tokenD.name}</b></p>`;\n    currentHeroPointsList += `<ul><li>Copper: <b>${copper}</b> • Silver: <b>${silver}</b> • Gold: <b>${gold}</b> • Platinum: <b>${platinum}</b></li></ul>`;\n  }    \n\n  let template = `\n    <style type=\"text/css\">\n      .tg  {border-collapse:collapse;border-spacing:0;margin:0px auto;}\n      .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n        overflow:hidden;padding:10px 5px;word-break:normal;}\n      .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n        font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n      .tg .tg-baqh{text-align:center;vertical-align:top}\n      .tg .tg-xwyw{border-color:#000000;text-align:center;vertical-align:middle}\n    </style>\n    \n    <table class=\"tg\">\n    <tbody>\n      <tr>\n        <td class=\"tg-xwyw\" colspan=\"4\"><b>Choose: </b><select id=\"playerName\" style=\"width: 200px\">${playerNameList}</select></td>\n      </tr>\n      <tr>      \n        <td class=\"tg-baqh\">\n          <div>\n            <img src=\"${iconCopper}\" style=\"vertical-align:middle\" width=\"24\" height=\"24\">\n            <span style=\"\">Copper</span>\n          </div>        \n        </td>\n        <td class=\"tg-baqh\">\n          <div>\n            <img src=\"${iconSilver}\" style=\"vertical-align:middle\" width=\"24\" height=\"24\">\n            <span style=\"\">Silver</span>\n          </div>          \n        </td>\n        <td class=\"tg-baqh\">\n          <div>\n            <img src=\"${iconGold}\" style=\"vertical-align:middle\" width=\"24\" height=\"24\">\n            <span style=\"\">Gold</span>\n          </div>         \n        </td>\n        <td class=\"tg-baqh\">\n          <div>\n            <img src=\"${iconPlatinum}\" style=\"vertical-align:middle\" width=\"24\" height=\"24\">\n            <span style=\"\">Platinum</span>\n          </div>         \n        </td>\n      </tr>\n      <tr>\n        <td class=\"tg-baqh\">\n          <input id=\"copper\" type=\"number\" min=\"-1000\" max=\"1000\" style=\"width: 100%;\" value=0>\n        </td>\n        <td class=\"tg-baqh\">\n          <input id=\"silver\" type=\"number\" min=\"-1000\" max=\"1000\" style=\"width: 100%;\" value=0>\n        </td>\n        <td class=\"tg-baqh\">\n          <input id=\"gold\" type=\"number\" min=\"-1000\" max=\"1000\" style=\"width: 100%;\" value=0>\n        </td>\n        <td class=\"tg-baqh\">\n          <input id=\"platinum\" type=\"number\" min=\"-1000\" max=\"1000\" style=\"width: 100%;\" value=0>\n        </td>\n      </tr>\n    </tbody>\n    </table>\n \n  <h2>Current Coins</h2>\n  <ul>\n    ${currentHeroPointsList}\n  </ul>\n  `;\n  \n  new Dialog({\n    title: `Coin Manager for Savage Pathfinder - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Apply\",\n        callback: async (html) => {\n          coinManager(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      },\n    },\n  }).render(true);\n}\n\n\n// -------------------------------------------------------\n// Functions\nasync function coinManager(html) {\n  let actorID = html.find(\"#playerName\")[0].value;  \n  let copper = html.find(\"#copper\")[0].value;  \n  let silver = html.find(\"#silver\")[0].value; \n  let gold = html.find(\"#gold\")[0].value; \n  let platinum = html.find(\"#platinum\")[0].value; \n  \n  console.log('Actor ID: ' + actorID)\n  if (actorID=='everyone') {    \n    console.log('-------------------')\n    \n    \n    let tokens = canvas.tokens.controlled;\n    for (var tokenD of tokens) {\n      let actorid = tokenD.actor.id;\n      console.log('Token ID: ' + actorid)\n      coinMessage(actorid, copper, silver, gold, platinum);\n      updateHeroCoins(actorid, copper, silver, gold, platinum);\n    }\n  } else { \n    coinMessage(actorID, copper, silver, gold, platinum);\n    updateHeroCoins(actorID, copper, silver, gold, platinum);\n  }  \n}\n\nasync function updateHeroCoins(actorID, copper, silver, gold, platinum) {\n  let character = game.actors.get(actorID);\n  let copperCurrent = getCoinsTotal(getCoins(actorID, 'Copper', true) );\n  let silverCurrent = getCoinsTotal(getCoins(actorID, 'Silver', true) );\n  let goldCurrent = getCoinsTotal(getCoins(actorID, 'Gold', true) );\n  let platinumCurrent = getCoinsTotal(getCoins(actorID, 'Platinum', true) );  \n  \n  // create missing coins + Patch actor\n  await patchHeroCoins(actorID);\n  \n  // add/remove coins\n  updateCoins(actorID, copperCurrent, copper, 'Copper');\n  updateCoins(actorID, silverCurrent, silver, 'Silver');\n  updateCoins(actorID, goldCurrent, gold, 'Gold');\n  updateCoins(actorID, platinumCurrent, platinum, 'Platinum');\n}\n\nasync function createCoin(actorID, coinName) { \n  let missingIcon;\n  let rules = '';\n  switch (coinName) {\n    case 'Copper':\n      missingIcon = iconCopper;\n      break;\n    case 'Silver':\n      missingIcon = iconSilver;\n      break;\n    case 'Gold':\n       missingIcon = iconGold;\n      break;\n    case 'Platinum':\n      missingIcon = iconPlatinum;\n      break;\n  }  \n  \n  rules += `<table><colgroup> <col/> <col/> <col/> <col/> <col/> </colgroup><tbody><tr><th class=\"main-heading\" colspan=\"5\">Coins &amp; exchange value</th></tr><tr><th class=\"sub-heading left\">Coin</th><th class=\"sub-heading\">CP</th><th class=\"sub-heading\">SP</th><th class=\"sub-heading\">GP</th><th class=\"sub-heading\">PP</th></tr><tr><td>Copper (cp)</td><td class=\"centered\">1</td><td class=\"centered\">1/10</td><td class=\"centered\">1/100</td><td class=\"centered\">1/1,000</td></tr><tr><td>Silver (sp)</td><td class=\"centered\">10</td><td class=\"centered\">1</td><td class=\"centered\">1/10</td><td class=\"centered\">1/100</td></tr><tr><td>Gold (gp)</td><td class=\"centered\">100</td><td class=\"centered\">10</td><td class=\"centered\">1</td><td class=\"centered\">1/10</td></tr><tr><td>Platinum (pp)</td><td class=\"centered\">1,000</td><td class=\"centered\">100</td><td class=\"centered\">10</td><td class=\"centered\">1</td></tr></tbody></table>`; \n  \n  if (coreRules) {\n    rules += '</br>@Compendium[swpf-core-rules.swpf-rules.orozFFWbzOxXU1hR]{1 Gear}';\n  }\n  \n  //let character = game.actors.contents.filter((t) => t.id === actorID)[0];  \n  let character = game.actors.get(actorID);\n  let data = [{\n    name: coinName,\n    type: 'gear',\n    img: missingIcon,    \n    data: {\n      \"description\": `<p>${rules}</p>`,\n      \"quantity\": 0\n    }\n  }];  \n  const createCoin = await character.createEmbeddedDocuments('Item', data);\n}\n\nasync function updateCoins(actorID, currentCoins, newCoins, coinType) {\n  if (newCoins!=0) {\n    //let character = game.actors.contents.filter((t) => t.id === actorID)[0];  \n    let character = game.actors.get(actorID);\n    let coinsTotal = parseInt(currentCoins)+parseInt(newCoins);\n    let coin = getCoins(actorID, coinType, true)[0];            \n    \n    // Check\n    if ( (coinsTotal)<=0 ) {\n      coinsTotal = 0;\n    }\n    \n    await coin.update({\n      [\"data.quantity\"]: coinsTotal\n    });    \n  }\n}\n\nasync function patchHeroCoins(actorID) {\n  let character = game.actors.get(actorID);  \n\n  // Add missing coins\n  if (getCoins(actorID, 'Copper').length==0) await createCoin(actorID, 'Copper');   \n  if (getCoins(actorID, 'Silver').length==0) await createCoin(actorID, 'Silver');\n  if (getCoins(actorID, 'Gold').length==0) await createCoin(actorID, 'Gold');   \n  if (getCoins(actorID, 'Platinum').length==0) await createCoin(actorID, 'Platinum');\n\n  let copperCurrent = await getCoins(actorID, 'Copper');\n  let silverCurrent = await getCoins(actorID, 'Silver');\n  let goldCurrent = await getCoins(actorID, 'Gold');\n  let platinumCurrent = await getCoins(actorID, 'Platinum');  \n  \n  if (copperCurrent.length>1) { // join\n    await patchCoin(actorID, 'Copper', getCoinsTotal(copperCurrent));\n  }\n  if (silverCurrent.length>1) {\n    await patchCoin(actorID, 'Silver', getCoinsTotal(silverCurrent));\n  } \n  if (goldCurrent.length>1) {\n    await patchCoin(actorID, 'Gold', getCoinsTotal(goldCurrent));\n  }\n  if (platinumCurrent.length>1) {\n    await patchCoin(actorID, 'Platinum', getCoinsTotal(platinumCurrent));\n  } \n  \n}\n\nasync function patchCoin(actorID, coinType, coinsTotal) {\n  let character = game.actors.get(actorID);\n  \n  let coins = getCoins(actorID, coinType, true);  \n  coins = coins.splice(1);\n  const ids = coins.map( coin => coin.id );\n  await character.deleteEmbeddedDocuments('Item', ids);        \n  // update\n  let coin = getCoins(actorID, coinType, true)[0];  \n  await coin.update({\n    [\"data.quantity\"]: coinsTotal\n  }); \n}\n\nfunction getCoins(actorID, coinType, isActor=false) {\n  let character = game.actors.get(actorID);\n  \n  let coins=0;\n  if (coinType=='Copper') {\n    coins = character.items.filter(e => e.name==='Copper');  \n  } else if (coinType=='Silver') {\n    coins = character.items.filter(e => e.name==='Silver');   \n  } else if (coinType=='Gold') {\n    coins = character.items.filter(e => e.name==='Gold');   \n  } else if (coinType=='Platinum') {\n    coins = character.items.filter(e => e.name==='Platinum');      \n  }  \n  return coins;\n}\n\nfunction getCoinsTotal(coins) {\n  if (coins.length>0) {\n    const sum = coins.reduce((total, item) => total += item.data.data.quantity, 0);\n    return sum;\n  } else {\n    return 0;\n  }  \n}\n\nfunction coinMessage(actorID, copper, silver, gold, platinum) {\n  let message = ``;\n  let copperCurrent = getCoinsTotal(getCoins(actorID, 'Copper', true) );\n  let silverCurrent = getCoinsTotal(getCoins(actorID, 'Silver', true) );\n  let goldCurrent = getCoinsTotal(getCoins(actorID, 'Gold', true) );\n  let platinumCurrent = getCoinsTotal(getCoins(actorID, 'Platinum', true) );  \n  let character = game.actors.get(actorID);\n\n  message += `<h2>${character.name}</h2> \n  <h3>Current + <b style=\"color:red;\">Change</b></h3>\n  <ul><li>Copper: <b>${copperCurrent}</b> + <b style=\"color:red;\">${copper}</b></li>\n  <li>Silver: <b>${silverCurrent}</b> + <b style=\"color:red;\">${silver}</b></li> \n  <li>Gold: <b>${goldCurrent}</b> + <b style=\"color:red;\">${gold}</b></li>\n  <li>Platinum: <b>${platinumCurrent}</b> + <b style=\"color:red;\">${platinum}</b></li></ul>\n  `;  \n\n  let chatData = {\n    user: game.user.id,\n    speaker: ChatMessage.getSpeaker(),\n    content: message\n  };  \n  ChatMessage.create(chatData, {});\n}\n\n// debug\n/*\nfunction debugme() {\n  let tokenD = canvas.tokens.controlled[0].actor.id  \n  console.log('Copper: ' + getCoinsTotal(getCoins(tokenD, 'Copper') ));\n  console.log( getCoins(tokenD, 'Copper') );\n  console.log( getCoins(tokenD, 'Copper').length );\n  console.log('Silver: ' + getCoinsTotal(getCoins(tokenD, 'Silver') ));\n  console.log( getCoins(tokenD, 'Silver') );\n  console.log( getCoins(tokenD, 'Silver').length );\n  console.log('Gold: ' + getCoinsTotal(getCoins(tokenD, 'Gold') ));\n  console.log( getCoins(tokenD, 'Gold') );\n  console.log( getCoins(tokenD, 'Gold').length );\n  console.log('Platinum: ' + getCoinsTotal(getCoins(tokenD, 'Platinum') ));  \n  console.log( getCoins(tokenD, 'Platinum') );\n  console.log( getCoins(tokenD, 'Gold').length );\n  \n  \n  // dump\n  console.log('==============================');\n  tokenD = canvas.tokens.controlled[0];  \n  let coins = getCoins(tokenD, 'Copper');  \n  coins = coins.splice(1);\n  let ids = coins.map( coin => coin.id );\n  console.log(ids);\n   tokenD.actor.deleteEmbeddedDocuments('Item', ids);\n  \n  tokenD = canvas.tokens.controlled[0];  \n  let coin = getCoins(tokenD, 'Copper')[0];  \n   coin.update({\n    [\"data.quantity\"]: 666\n  });\n  \n  console.log('==============================');\n  \n  //let character = game.actors.contents.filter((t) => t.data.type === \"character\").filter((v) => v.data.name === playerName)[0];\n  //let character = game.actors.contents.filter((t) => t.id === tokenD.actor.id);\n}\n*/","folder":null,"sort":0,"permission":{"default":0,"8A8MXeQUcdCXOOtn":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.3YEDgtuMjfMAQd2x"}},"_id":"KFGRyPHeXhOtaVNZ"}
{"_id":"LMeuEXFcqHbpWDWo","name":"Unstun","type":"script","author":"8A8MXeQUcdCXOOtn","img":"icons/magic/symbols/symbol-lightning-bolt.webp","scope":"global","command":"const version = 'v1.4';\n\n/* Unstun\n\nsource: \nicon: icons/magic/symbols/symbol-lightning-bolt.webp\n*/\nconst chatimage = \"icons/magic/symbols/symbol-lightning-bolt.webp\";\nlet tokenD=canvas.tokens.controlled[0];\nconst myTitle = `Stunned`;\nlet message1 = ``;\nlet message2 = ``;\n\nif (tokenD===undefined) {\n  ui.notifications.error(\"Please select a token.\"); // No Token is Selected\n} else {\n  main();\n}\n\nasync function main() {\n  if (tokenD.actor.data.data.status.isStunned === true) {\n    rollUnstun();\n  } else if (tokenD) {\n    let message = ``;\n    \n    if (tokenD.actor.data.data.status.isStunned === false) {\n      await tokenD.actor.update({ \"data.status.isStunned\": true });\n    };\n\n    if ( sm.isModuleOn(\"combat-utility-belt\") ) {\n      await game.cub.addCondition(\"Prone\");\n    };\n    await tokenD.actor.update({ \"data.status.isDistracted\": true });\n    await tokenD.actor.update({ \"data.status.isVulnerable\": true });\n     \n    sm.styledChatMessageSimple(myTitle, `<b>${tokenD.name}</b> is <b>stunned</b> now!`, chatimage);        \n  }\n}\n\nasync function rollUnstun() {\n  let message = ``;\n  let rolled = await tokenD.actor.rollAttribute('vigor');\n  \n  if (rolled!=null) {  \n    let rollWithEdge = rolled.total;\n\n    message1 = `<b>${tokenD.name}</b> rolled <b>${rollWithEdge}</b>.`;\n    \n    // Checking for a Critical Failure.\n    if ( sm.isCritical(rolled) ) {\n      ui.notifications.notify(\"You've rolled a Critical Failure!\");\n      message2 = `<b>${tokenD.name}</b> rolled a <b style=\"color: red;\">Critical Failure!</b>!`;    \n    } else {\n      if (rollWithEdge > 3 && rollWithEdge <= 7) {\n        message2 = `<b>${tokenD.name}</b> is no longer <b>Stunned</b>.`;\n        message2 += `<ul><li>Vulnerable until end of next turn.</li>`;\n        message2 += `<li>Distracted until end of this turn.</li></ul>`;\n        await tokenD.actor.update({ \"data.status.isVulnerable\": true });\n        await tokenD.actor.update({ \"data.status.isStunned\": false });\n      } else if (rollWithEdge >= 8) {\n        message2 = `<b>${tokenD.name}</b> is no longer <b>Stunned</b> and looses <b>Vulnerable/Distracted</b>.`;\n        await tokenD.actor.update({ \"data.status.isDistracted\": false });\n        await tokenD.actor.update({ \"data.status.isStunned\": false });\n        await tokenD.actor.update({ \"data.status.isVulnerable\": false });\n      } else {\n        message2 = `<b>${tokenD.name}</b> remains <b>Stunned</b>.`;        \n        if ( (sm.checkBennies(tokenD)>0) ) {\n          const buttonID = Math.floor(Math.random(0.1)*1000000000);\n          sm.addEventListenerOnHtmlElement(\"#swadeMacrosUnstunButton_\"+buttonID, 'click', async (e) => {                \n            sm.spendBenny(tokenD);\n            sm.styledChatMessageSimple(myTitle, `<b>${tokenD.name}</b> spent a benny to roll again.`);\n            sm.macroRun('Unstun');\n          });            \n          message2+=`<button style=\"background:#d10000;color:white\" id=\"swadeMacrosUnstunButton_${buttonID}\">Use Benny</button>`;     \n        }\n      }\n    }\n    sm.styledChatMessageSimple(myTitle, message1 + `<br>` + message2, chatimage);\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"8A8MXeQUcdCXOOtn":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_s38de0ct1y","path":"Auto Update","color":"#d600bd"},"core":{"sourceId":"Compendium.swademacros.auto-update-macros.zuMtvqcPooF5a597"}}}
{"_id":"M6tFfOeu6r0UPIrL","name":"Potion of Strong Invigoration","type":"script","author":"dJvi2seC8CqTkxhs","img":"icons/consumables/potions/bottle-bulb-corked-green.webp","scope":"global","command":"const itemName = 'Potion of Strong Invigoration';\n\n/* \nsource: \nicon: \n*/\nconst version = 'v0.4';\nlet tokenD=canvas.tokens.controlled[0];\n  \nif (tokenD===undefined) {\n  ui.notifications.error(\"Please select a token.\"); // No Token is Selected\n} else {\n  main();\n} \n\n// Modified from a macro by spacemandev\nasync function main() {\n  let myItem = await sm.getItem(tokenD, itemName);\n  if(undefined == myItem) {\n    return; \n  }\n  \n  //If token is max health if so, don't do anything\n  if( sm.getFatigue(tokenD) == 0 ) {\n    sm.styledChatMessageSimple(itemName, `You are not fatigued.`);       \n    return;\n  }\n\n  //Subtract item\n  await sm.useItem(tokenD, itemName);\n  \n  // remove 1 \n  sm.applyFatigue(tokenD, -2);\n\n  sm.styledChatMessageSimple(itemName, `${tokenD.actor.name} used a ${itemName} and removed 2 level of fatigue.`);\n}","folder":null,"sort":0,"permission":{"default":0,"dJvi2seC8CqTkxhs":3},"flags":{"core":{"sourceId":"Macro.pEZxVFjyPvfArG9E"}}}
{"_id":"MP5O31SOdiTiyVhw","name":"Potion of Flight","type":"script","author":"dJvi2seC8CqTkxhs","img":"icons/consumables/potions/potion-jar-corked-green.webp","scope":"global","command":"const version = 'v0.3';\nconst itemName = 'Potion of Flight';\n\nconst myActiveEffect = {\n  changes: [\n    {\"key\":\"data.stats.speed.value\", \"mode\":CONST.ACTIVE_EFFECT_MODES.OVERRIDE, \"value\":\"12\"}\n  ],\n  icon: 'icons/consumables/potions/potion-jar-corked-green.webp',\n  label: itemName\n}  \n\n/* \nsource: \nicon: \n*/\nlet tokenD=canvas.tokens.controlled[0];\nconst myTitle = `Potion`;\nlet message1 = ``;\nlet message2 = itemName;\n  \nif (tokenD===undefined) {\n  ui.notifications.error(\"Please select a token.\"); // No Token is Selected\n} else {\n  main();\n} \n\n// Modified from a macro by spacemandev\nasync function main() {\n  let myItem = await sm.getItem(tokenD, itemName);\n  if(undefined == myItem) {\n    return; \n  }\n  \n  // Active Effect On?\n  const temp = sm.getActiveEffect(tokenD, itemName);\n  if( temp != undefined ) {\n    sm.styledChatMessageSimple(itemName, `You already used it.`)       \n    return;\n  }\n\n  // Subtract item\n  await sm.useItem(tokenD, itemName);\n  \n  // Item does stuff\n  sm.addActiveEffect(tokenD, myActiveEffect, false); \n\n  // message\n  sm.styledChatMessageSimple( itemName, `${tokenD.actor.name} used a ${itemName}.` );\n}","folder":null,"sort":0,"permission":{"default":0,"dJvi2seC8CqTkxhs":3},"flags":{"core":{"sourceId":"Macro.pEZxVFjyPvfArG9E"}}}
{"_id":"MUTCxqyZYVpPQvLo","name":"Cyberspace Actions","type":"script","author":"tckKxzbezKvre3KI","img":"icons/commodities/tech/antenna-powered-purple.webp","scope":"global","command":"const skillToRoll = 'Hacking';\n\n\nconst version = 'v1.1';\nconst chatimage = 'icons/commodities/tech/antenna-powered-purple.webp';\nlet coreRules = false;\nconst coreRulesLink = '@Compendium[sprawl-core-rules.sprawl-rules.YlzlYF4w9OiFgHTG]{Cyberspace Actions}';\nif (game.modules.get(\"sprawl-core-rules\")?.active) { coreRules = true; }\n\n/* \nIMPORTANT\n- \n\nTODO\n- \nsource: \nicon: \n*/\n\nmain();\n\nfunction main() {  \n\n  let inoutActions = ['Choose', 'ANALYZE NODE/PERSONA/ICE/ICON','ATTACK PERSONA/ICE', 'HIDE FROM ICE/PERSONA', 'IMPROVISE A UTILITY', 'JACK OUT', 'LOAD/END UTILITY'];\n  let outActions = ['Choose', 'SEARCH FOR A SYSTEM WITH AN UNKNOWN ADDRESS'];\n  let inActions = ['Choose', 'ACCESS ENCRYPTED DATA', 'DECEIVE ICE', 'EDIT/COPY/ERASE DATA', 'MANIPULATE A DEVICE PORT'];\n\n  let inoutActionsList = ``;\n  inoutActions.map((t) => {\n    inoutActionsList += `<option value=\"${t}\">${t}</option>`;\n  });\n  let outActionsList = ``;\n  outActions.map((t) => {\n    outActionsList += `<option value=\"${t}\">${t}</option>`;\n  });\n  let inActionsList = ``;\n  inActions.map((t) => {\n    inActionsList += `<option value=\"${t}\">${t}</option>`;\n  });\n  \n  let template = `  \n    <style type=\"text/css\">\n      div.purpleHorizon {\n        border: 4px solid #ff0000;\n        background-color: #000000;\n        width: 100%;\n        text-align: center;\n        border-collapse: collapse;\n      }\n      .divTable.purpleHorizon .divTableCell, .divTable.purpleHorizon .divTableHead {\n        border: 0px solid #550000;\n        padding: 5px 2px;\n      }\n      .divTable.purpleHorizon .divTableBody .divTableCell {\n        font-size: 13px;\n        font-weight: bold;\n        color: #FFFFFF;\n      }\n      \n      .divTable{ display: table; }\n      .divTableRow { display: table-row; }\n      .divTableHeading { display: table-header-group;}\n      .divTableCell, .divTableHead { display: table-cell;}\n      .divTableHeading { display: table-header-group;}\n      .divTableFoot { display: table-footer-group;}\n      .divTableBody { display: table-row-group;}\n\n      /* HIDE RADIO */\n      [type=radio] { \n      position: absolute;\n      opacity: 0;\n      width: 0;\n      height: 0;\n      }\n\n      /* IMAGE STYLES */\n      [type=radio] + img {\n      cursor: pointer;\n      }\n\n      /* CHECKED STYLES */\n      [type=radio]:checked + img {\n      outline: 4px solid #f00;\n      }\n      \n      .container {\n        position: relative;\n        text-align: center;\n        color: white;\n      }\n      /* Centered text */\n      .centered {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        font-size: 18px;\n      }    \n\n      #kultcss .window-content {    \n        background: #000000;\n      }     \n      #kultcss .dialog-button {\n        height: 40px;\n        background: #000000;\n        color: #ffffff;\n        justify-content: space-evenly;\n        align-items: center;\n        cursor: pointer;\n        border: none;    \n      }  \n      #kultcss header {\n        background: #000000;\n        border-radius: 0;    \n        border: none;    \n        margin-bottom: 2px;\n        font-size: .75rem;\n      }\n    </style>    \n    \n    <h1 style=\"text-align:center; color:white\">ACTIONS</h1>\n    \n    <h2 style=\"text-align:center; color:white\">INSIDE/OUTSIDE SYSTEMS NODES</h2>\n    \n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <select id=\"inoutActionsList\" type=\"text\" style=\"width: 340px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\">\n          ${inoutActionsList}\n        </select>      \n    </div>\n    </div>\n    \n    </div>\n    </div>    \n    \n    <h2 style=\"text-align:center; color:white\">OUTSIDE OF SYSTEMS/NODES</h2>\n\n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <select id=\"outActionsList\" type=\"text\" style=\"width: 340px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\">\n          ${outActionsList}\n        </select>      \n    </div>\n    </div>\n    \n    </div>\n    </div>  \n\n    <h2 style=\"text-align:center; color:white\">WITHIN SYSTEMS/NODES</h2>\n    \n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <select id=\"inActionsList\" type=\"text\" style=\"width: 340px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\">\n          ${inActionsList}\n        </select>      \n    </div>\n    </div>\n    \n    </div>\n    </div>  \n\n  `;\n  \n  new Dialog({\n    title: `Cyberspace Actions - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"EXEC!\",\n        callback: async (html) => {\n          sendAction(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      }\n    },\n    default: \"ok\"\n  }, { id: 'kultcss'}).render(true);\n}\n\nasync function sendAction(html) {\n  const inoutActionsList = html.find(\"#inoutActionsList\")[0].value;    \n  const outActionsList = html.find(\"#outActionsList\")[0].value;    \n  const inActionsList = html.find(\"#inActionsList\")[0].value;    \n  let message;\n  let temp;\n  \n  if (coreRules) {\n      message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${coreRulesLink}</h2><div>`;\n  } else {\n     message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Cyberspace Actions</h2>`;\n  }    \n\n  if (inoutActionsList!='Choose') {\n    temp = inoutActionsList;\n  } else if (outActionsList!='Choose') {\n    temp = outActionsList;\n  } else if (inActionsList!='Choose') {\n    temp = inActionsList;\n  } else {\n    ui.notifications.error(\"You must choose one action!!!\");    \n    return;\n  }   \n  \n  message += idToDescription(temp);\n\n  // send message1\n  let chatData = {\n    content: message\n  };  \n  ChatMessage.create(chatData, {});\n  \n}\n\nfunction idToDescription(myid) {  \n  if (myid=='ANALYZE NODE/PERSONA/ICE/ICON') {\n    requestRoll();\n    return `<h3>ANALYZE NODE/PERSONA/ICE/ICON</h3>\n<p>Requirements: Notice Utility</p>\n<p>The appearance of a non-hidden object is revealed simply by looking at it, and can often provide experienced operators with valuable instant information about it (for example, armed soldiers usually represent nasty ICE, while data storages often appear as cubes or bookshelves).</p>\n<p>Analyzing a persona, ICE, or icon within the same Node as the operator takes an action. On a success the operator learns the type and rating of the analyzed object.</p>`;\n  } else if (myid=='ATTACK PERSONA/ICE') {\n    requestRoll();\n    return `<h3>ATTACK PERSONA/ICE</h3>\n<p>Requirements: Fighting Utility</p>\n<p>This works like Fighting. Cyberspace Parry is calculated with the Fighting Utility or ICE Rating.</p>\n<p>(ICE is always considered to have a loaded Fighting Utility for this purpose, even if the ICE has no attack capability!)</p>`;\n  } else if (myid=='HIDE FROM ICE/PERSONA') {\n    requestRoll();\n    return `<h3>HIDE FROM ICE/PERSONA</h3>\n<p>Requirements: Stealth Utility</p>\n<p>An operator can try to sneak past ICE and even hide from other personas. To do this they must succeed on a Hacking roll. If the ICE or persona is actively looking for an intruder, this becomes an opposed roll. ICE rolls its Rating, other personas their Hacking.</p>`;\n  } else if (myid=='IMPROVISE A UTILITY') {\n    return `<h3>IMPROVISE A UTILITY</h3>\n<p>Requirements: —</p>\n<p>As an action an operator may hastily cobble together a rough piece of code to improvise a Utility they don’t have. See Utilities for details (page 43).</p>`;\n  } else if (myid=='JACK OUT') {\n    return `<h3>JACK OUT</h3>\n<p>Requirements: —</p>\n<p>To jack out without suffering dumpshock the operator doesn’t have to roll, but it takes an action. An operator may jack out without caring about dumpshock as a free action, but they need to succeed on a Vigor roll –2 or suffer 1 level of Dumpshock Fatigue. When fighting Black ICE this does not apply, see Black ICE on page 41 for details.</p>`;\n  } else if (myid=='LOAD/END UTILITY') {\n    return `<h3>LOAD/END UTILITY</h3>\n<p>Requirements: —</p>\n<p>Loading/ending Utilities does not require a roll, but takes an action. Loading and ending Utilities can be done with the same action. An operator can load a number of new Utilities into the RAM equal to the Loading Speed of their deck. They can end any number of Utilities. An operator can’t have more Utilities loaded than the RAM of their cyberdeck.</p>`;\n  } else if (myid=='SEARCH FOR A SYSTEM WITH AN UNKNOWN ADDRESS') {\n    requestRoll();\n    return `<h3>SEARCH FOR A SYSTEM WITH AN UNKNOWN ADDRESS</h3>\n<p>Requirements: —</p>\n<p>Public Access Nodes can be found via directory listings (it takes [[/r 1d6]] rounds to actually get there, if time is important).</p>\n<p>To find a Hidden Access Node the operator must know one exists and succeed on a Research roll with the Access Node’s System Toughness as the target number. This roll can be repeated once with a –2 penalty. After that, the operator had better know somebody who can sell them the Node’s address or act as a guide.</p>`;\n  } else if (myid=='ACCESS ENCRYPTED DATA') {\n    requestRoll();\n    return `<h3>ACCESS ENCRYPTED DATA</h3>\n<p>Requirements: varying</p>\n<p>The operator may either try to decrypt the data, or outright a�ack the Scramble ICE.</p>\n<p>Decrypting the data requires the Decrypt Utility. The operator needs a successful Hacking roll, with the ICE’s Toughness as the target number. Decrypting the data takes [[/r 2d4]] rounds. Every raise on the roll lowers this number by 1, to a minimum of 1 round. If the operator fails the ICE may raise the alarm, delete the data, activate additional ICE, or any combination thereof.</p>\n<p>Attacking the ICE requires the Fighting Utility. The operator has to perform a normal attack against the Scramble ICE. If the attack misses or doesn’t inflict enough damage to Shake or destroy it, the ICE may take action as noted above. If the attack shakes the ICE it must Unshake first before it can take any further action. If the attack succeeds and inflicts 1 or more Wounds, the ICE crashes and the data can be accessed.</p>`;\n  } else if (myid=='DECEIVE ICE') {\n    requestRoll();\n    return `<h3>DECEIVE ICE</h3>\n<p>Requirements: Persuasion Utility</p>\n<p>To gain access to a Node protected by Access ICE the operator must succeed in an opposed roll with their Hacking skill against the ICE’s Rating. Grey ICE can be deceived also, if the Node hasn’t flagged the operator as hostile yet.\nICE only has to be deceived once. It will only require a new identification (and therefore another roll) if the Alarm Status changes, or it is instructed by an administrator to re-check everyone. Barrier ICE and Black ICE can’t be deceived.</p>`;\n  } else if (myid=='EDIT/COPY/ERASE DATA') {\n    requestRoll();\n    return `<h3>EDIT/COPY/ERASE DATA</h3>\n<p>Requirements: —</p>\n<p>This requires a successful Hacking roll against the System Toughness.</p>`;\n  } else if (myid=='MANIPULATE A DEVICE PORT') {\n    requestRoll();\n    return `<h3>MANIPULATE A DEVICE PORT</h3>\n<p>Requirements: —</p>\n<p>Devices like cameras, factory machines, doors, or even coffee makers in meat-space may be controlled via cyberspace. These devices are connected to Nodes via ports. A successful Hacking roll against the System Toughness allows the operator to manipulate or control a port. They can deactivate the port, see what kind of device is connected, even dump an enemy operator if a cyberterminal or cyberdeck is connected to cyberspace with this particular port. The dumped operator needs to succeed on a Vigor roll –2 or suffer 1 level of Dumpshock Fatigue. The operator can also control the device attached to the port.</p>`;\n  }\n\n}\n\nasync function requestRoll() {\n  if (canvas.tokens.controlled[0]!=undefined) {  \n    let tokenD = canvas.tokens.controlled[0];\n    await sm.rollSkill(tokenD, skillToRoll);\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.03SEs6ZYE1mt9jEt"},"cf":null}}
{"_id":"MmyaOIYnRpILkYQi","name":"Image Folder to Deck","type":"script","author":"KKMHfutCWkOZSJp9","img":"icons/sundries/gaming/playing-cards-brown.webp","scope":"global","command":"const version = '1.1';\nconst defaultPath = 'modules/swadecore/images/adventure-deck';\n\nmain();\n\nasync function main() {\n  new Dialog({\n    title: `Images To Deck - ${version}`,\n    content: `\n    <h2>Important!</h2>\n    <ul>\n      <li>To get the folder path right, you can drop a tile from it in the canvas and copy the path.</li>\n      <li>Leave Card Back Image blank if you don't want to add the Card Back Image.</li>\n    </ul>\n    <h2>Configuration</h2>\n    <div>\n      <p>Deck Name: </p>\n      <input type=\"text\" id=\"folderName\" value='The Office'/>\n    </div>\n    <div>\n      <p>Folder Path: </p>\n      <input type=\"text\" id=\"folderPath\" value=${defaultPath}/>\n    </div>    \n    <div>\n      <p>Card Back Image (optional): </p>\n      <input type=\"text\" id=\"cardBackImg\" value=''/>\n    </div>    \n    <br>\n    `,\n    buttons: {\n      roll: {\n        label: \"Create\",\n        callback: (html) => {\n          createDeck(html);\n        }\n      }, \n      cancel: {\n        label: \"Cancel\"\n      }\n    }\n  }).render(true)\n}\n\nasync function createDeck(html) {\n  const deckName = html.find(\"#folderName\")[0].value;  \n  const folderPath = html.find(\"#folderPath\")[0].value;  \n  const cardBackImg = html.find(\"#cardBackImg\")[0].value;  \n\n  let {files} = await FilePicker.browse(\"data\", folderPath);\n  \n  // Name Cleaning\n  var splitPath = function (str) {\n    let imageName = str.split('\\\\').pop().split('/').pop(); // remove path\n    imageName = imageName.split('.').slice(0, -1).join('.'); // remove extension\n    imageName = imageName.replace(/_/g, \" \");\n    imageName = imageName.replace(/-/g, \" \");\n    imageName = decodeURI( imageName )\n    return imageName;\n  }\n\n  //create the empty deck\n  const deck = await Cards.create({\n    name: deckName,\n    type: 'deck',\n  });\n\n  //map the journal entry data to the raw card data\n  const rawCardData = files.map((file) => {\n    // file = imagePath and splitPath(file) = image name\n    const imagePath = file;\n    const imageName = splitPath(file);\n    return {\n      name: imageName,\n      type: 'base',\n      faces: [\n        {\n          img: imagePath,\n          name: imageName,\n        },\n      ],\n      back: {\n        name: '',\n        text: '',\n        img: cardBackImg\n      },      \n      face: 0,\n      origin: deck?.id,\n    };\n  });\n  \n  //create the cards in the deck\n  deck?.createEmbeddedDocuments('Card', rawCardData);\n  \n  //open the sheet once we're done\n  deck?.sheet?.render(true);  \n\n} // end createDeck","folder":null,"sort":0,"permission":{"default":0,"KKMHfutCWkOZSJp9":3},"flags":{"core":{"sourceId":"Macro.QlAwEp9ZTfEFO8jH"}}}
{"_id":"OrIFBwaS93XQoBjk","name":"Mass Roll","type":"script","author":"AUlNbXaKGdJP4sUu","img":"icons/sundries/gaming/dice-pair-white-green.webp","scope":"global","command":"const version = 'v1.2';\nconst icon = 'icons/sundries/gaming/dice-pair-white-green.webp';\n\nvar personas = canvas.tokens.controlled;\nif (personas.length <= 0) {\n  simpleDialog();\n} else {\n  tokenDialog();\n}\n\nfunction tokenDialog() {\n  let template = ``;\n  template += `<div style=\"background:#00b0ff;color:white;padding:3px\">There are tokens selected. To ignore tokens and choose rolled dice, click the Choose Dice button</div>`;\n \n  template += `<br><p>Trait: <select id=\"caract\">`;\n  template += `<optgroup label=\"Attributes\">`;\n  template += `<option value=\"Agility\">Agility</option>`;\n  template += `<option value=\"Smarts\">Smarts</option>`;\n  template += `<option value=\"Spirit\">Spirit</option>`;\n  template += `<option value=\"Strength\">Strength</option>`;\n  template += `<option value=\"Vigor\">Vigor</option>`;\n  template += `</optgroup>`;\n  template += `<optgroup label=\"Skills\">`;\n  for (let i = 0; i < personas.length; i++) {\n    let skills = personas[i].actor.items.filter((el) => el.type == \"skill\");\n    let skillList = [];\n    for (let j = 0; j < skills.length; j++) {\n\n      if (!skillList.includes(skills[j].name)) {\n        template += `<option value=\"` + skills[j].name + `\">` + skills[j].name + `</option>`;\n      }\n      skillList.push(skills[j].name);\n    }\n  }\n  template += `</optgroup>`;\n  template += `</select></p>`;\n\n  \n  template += `\n    <br>\n    <table>\n    <tbody>\n    <tr>\n    <td style=\"text-align: center;\">Modifier: <input type=\"text\" id=\"modificador\" value=\"\" style=\"width:50px\" /></td>\n    <td>&nbsp;</td>\n    <td style=\"text-align: center;\">Target Number: <input type=\"text\" id=\"targetnum\" value=\"4\" style=\"width:50px\" /></td>\n    <td>&nbsp;</td>\n    <td style=\"text-align: center;\"><input type=\"checkbox\" id=\"secret\" style=\"margin:0;vertical-align:middle\" /> Secret</label></td>\n    </tr>\n    </tbody>\n    </table>  \n  `;\n\n  new Dialog({\n    title: 'Token Roll',\n    content: template,\n    buttons: {\n      ok: {\n        label: `Roll`,\n        callback: function(html) {\n          applyFormOptionsToken(html);\n        }\n      },      \n      cancel: {\n        label: `Choose Dice`,\n        callback: function(html) {\n          simpleDialog();\n        }\n      }\n    }\n  }).render(true);\n\n}\n\n\nfunction simpleDialog() {\n  let template = ``;\n  if (personas.length <= 0) {\n    template += `<div style=\"background:#00b0ff;color:white;padding:3px\">No tokens selected. </div>`;\n  }\n  template += `\n    <br>\n    <table>\n    <tbody>\n    <tr>\n    <td>\n      <p>Dice: <select id=\"dice\">\n        <option value=\"d4\">d4</option>\n        <option value=\"d6\">d6</option>\n        <option value=\"d8\">d8</option>\n        <option value=\"d10\">d10</option>\n        <option value=\"d12\">d12</option>\n      </select></p>\n    </td>\n    <td><label style=\"font-size:16px\"><input type=\"checkbox\" id=\"wild\" value=\"1\" checked style=\"margin:0;vertical-align:middle\" /> Wild Card</label></td>\n    <td><label style=\"font-size:16px\"><input type=\"checkbox\" id=\"secret\" value=\"false\" style=\"margin:0;vertical-align:middle\" /> Secret</label></td>    \n    </tr>\n    </tbody>\n    </table>  \n  <br>`;\n  \n  template += `\n    <table>\n    <tbody>\n    <tr\">\n    <td style=\"text-align: center;border:1px;\">Modifier:<br><input type=\"number\" id=\"modificador\" value=\"\" style=\"width:50px\" /></td>\n    <td style=\"text-align: center;border:1px;\">Target Number:<br><input type=\"number\" id=\"targetnum\" value=\"4\" style=\"width:50px\" /></td>\n    <td style=\"text-align: center;border:1px;\">Roll:<br><input type=\"number\" id=\"repetir\" value=\"1\" style=\"width:50px\" /> time(s)</td>\n    </tr>\n    </tbody>\n    </table>  \n  `;\n\n  new Dialog({\n    title: 'Simple Roll',\n    content: template,\n    buttons: {\n      ok: {\n        label: `Roll`,\n        callback: function(html) {\n          applyFormOptionsSimpleRoll(html);\n        }\n      }\n    }\n  }).render(true);\n}\n\n\nfunction applyFormOptionsToken(html) {\n  let caractName = html.find(\"#caract\")[0].value;\n  let targetNumber = parseInt(html.find(\"#targetnum\")[0].value);\n  let modificador = Number(html.find(\"#modificador\")[0].value);\n  let isSecret=html.find(\"#secret\")[0].checked;\n  \n  let contentText = ``;\n\n\n  let atributes = {\n    'Agility': 'agility',\n    'Smarts': 'smarts',\n    'Spirit': 'spirit',\n    'Vigor': 'vigor',\n    'Strength': 'strength'\n  };\n\n  for (let i = 0; i < personas.length; i++) {\n\n    let isWCard = personas[i].actor.data.data.wildcard;\n    let dice;\n    let wilddice = 'd6';\n    let caractmod = 0;\n    let modStr = '';\n\n    let addCaracName = ``;\n\n    if (atributes[caractName] !== undefined) {\n      let attkey = atributes[caractName];\n      dice = 'd' + personas[i].actor.data.data.attributes[attkey].die.sides;\n      if (isWCard) {\n        wilddice = 'd' + personas[i].actor.data.data.attributes[attkey][\"wild-die\"].sides;\n      }\n\n      caractmod = Number(personas[i].actor.data.data.attributes[attkey].die.modifier);\n\n    } else {\n      /// is skill\n      let skill = personas[i].actor.items.filter((el) => el.type == \"skill\" && el.name == caractName)[0];\n      if (skill !== undefined) {\n        dice = 'd' + skill.data.data.die.sides;\n        if (isWCard) {\n          wilddice = 'd' + skill.data.data[\"wild-die\"].sides;\n        }\n        caractmod = Number(skill.data.data.die.modifier);\n\n      } else {\n        dice = 'd4';\n        caractmod = caractmod - 2;\n        addCaracName = ` (no skill -2)`;\n      }\n    }\n\n    if (modificador != 0) {\n      if (modificador > 0) {\n        modStr += '+';\n      }\n\n      modStr += String(modificador);\n    }\n\n    let modificadorFinal = modificador + caractmod;\n\n    contentText += `<strong style=\"font-size:16px\">` + personas[i].actor.name + `</strong>`;\n\n    contentText += '<div style=\"color:#4b4a44;font-size:12px\">' + caractName + addCaracName + modStr + ' | TN:' + targetNumber + '</div>';\n\n    contentText += resultInfo(dice, targetNumber, modificadorFinal, isWCard, wilddice);\n\n\n  }\n\n  styledChatMessage(contentText,isSecret); // CHECK!\n}\n\n\nfunction applyFormOptionsSimpleRoll(html) {\n  let dice = html.find(\"#dice\")[0].value;\n  let isWCard = html.find(\"#wild\")[0].checked;\n  let isSecret=html.find(\"#secret\")[0].checked;\n  let targetNumber = parseInt(html.find(\"#targetnum\")[0].value);\n  let repeat = parseInt(html.find(\"#repetir\")[0].value);\n  let modificador = Number(html.find(\"#modificador\")[0].value);\n  let contentText = ``;\n  let flavor = dice;\n\n\n  if (modificador) {\n\n    let modificadorStr = String(modificador);\n    if (modificador > 0) {\n      modificadorStr = '+' + modificadorStr;\n    }\n    flavor += modificadorStr;\n\n  }\n\n  if (isWCard) {\n    flavor += ` (WC)`\n  }\n\n  if (repeat > 1) {\n    flavor += ' x' + repeat;\n  }\n\n  flavor += ' | TN:' + String(targetNumber);\n\n\n  for (let i = 1; i <= repeat; i++) {\n    contentText += resultInfo(dice, targetNumber, modificador, isWCard);\n  }\n\n  styledChatMessage(contentText,isSecret, flavor);\n  \n}\n\nfunction resultInfo(mainDie, targetNumber, modifier = 0, isWCard = true, wilddie = 'd6') {\n  let mainDieResult = new Roll('1' + mainDie + 'x=').roll({\n    async: false\n  }).total;\n  let wilddieResult = new Roll('1' + wilddie + 'x=').roll({\n    async: false\n  }).total;\n  let textColor = 'grey';\n  let mainDieColor = '#666';\n  let wilddieColor = '#666';\n  let tag = 'Failure';\n  let criticalFailure = false;\n  let showWildDie = false;\n  let raise = false;\n  let contentText = ``;\n  let finalMainDieResult;\n  let finalWilddieResult;\n  let finalResult;\n\n  if (mainDieResult == 1) {\n    mainDieColor = 'red';\n  }\n\n  if (wilddieResult == 1) {\n    wilddieColor = 'red';\n  }\n\n  if (isWCard) {\n    showWildDie = true;\n  }\n\n  if (mainDieResult == 1 && wilddieResult == 1) {\n    tag = 'Critical Failure';\n    textColor = 'red';\n\n    if (!isWCard) {\n      showWildDie = true;\n    }\n\n    criticalFailure = true;\n    finalMainDieResult = 1;\n    finalWilddieResult = 1;\n    finalResult = 1;\n\n  }\n\n  if (!criticalFailure) {\n    finalMainDieResult = mainDieResult + modifier;\n    finalWilddieResult = 0;\n    finalResult = finalMainDieResult;\n\n    if (isWCard) {\n      finalWilddieResult = wilddieResult + modifier;\n      finalResult = Math.max(finalWilddieResult, finalMainDieResult);\n    }\n\n\n    if (finalMainDieResult >= targetNumber || finalWilddieResult >= targetNumber) {\n      \n      let targetNumberRaise = targetNumber + 4\n\n      if (finalMainDieResult >= targetNumber) {\n        mainDieColor = 'green';\n        if (finalMainDieResult >= targetNumberRaise) {\n          raise = true;\n          mainDieColor = 'purple';\n        }\n      }\n\n      if (finalWilddieResult >= targetNumber) {\n        wilddieColor = 'green';\n        if (finalWilddieResult >= targetNumberRaise) {\n          raise = true;\n          wilddieColor = 'purple';\n        }\n      }\n\n      if (raise) {\n        //    raiseStr=1;\n\n        let raiseNum=Math.floor(finalResult/4) - 1;\n            let wordAmp='Raise';\n            if (raiseNum>1){\n                wordAmp='Raises';\n            } \n            tag='Success! and '+raiseNum+' '+wordAmp;\n            textColor='purple';\n\n      } else {\n        tag = 'Success!';\n        textColor = 'green';\n      }\n    }\n  }\n\n  contentText += `<div class=\"dice-tooltip\"><div class=\"dice-rolls\"><ol class=\"dice-rolls\"><li class=\"roll die ` + mainDie + `\" style=\"color:` + mainDieColor + `\">` + finalMainDieResult + `</li>`;\n\n  if (showWildDie) {\n    contentText += `<li class=\"roll die ` + wilddie + `\" style=\"color:` + wilddieColor + `\">` + finalWilddieResult + `</li>`\n  }\n\n  contentText += `<li style=\"line-height:24px;float:left;font-size:16px;color:` + textColor + `;font-weight:bold;margin-left:10px\">` + tag + `</li>`;\n  contentText += `</ol></div></div>`;\n\n  return contentText;\n}\n\nasync function styledChatMessage(message, isSecret, flavor='') {\n  let finalMessage = `<h2><img style=\"border: 0;vertical-align:middle;\" src=${icon} width=\"28\" height=\"28\"> Mass Roll</h2>`;\n  finalMessage+=message;\n  let chatData = {\n    flavor: flavor,\n    speaker: null,\n    content: finalMessage\n  };\n  if(isSecret){\n    chatData['whisper'] = [game.user.id];\n    chatData['type'] =  CONST.CHAT_MESSAGE_TYPES.WHISPER;\n  }  \n  ChatMessage.create(chatData, {});\n}\n\n/*\ndevs: lipefl#5425 Reef#9327 Laslo#5711\n*/","folder":null,"sort":0,"permission":{"default":0,"AUlNbXaKGdJP4sUu":3},"flags":{"core":{"sourceId":"Macro.Wr7qHOk7cqUdvdQ5"}}}
{"_id":"PHOj0SkYIUnI3i6F","name":"Potion of Giant Strength","type":"script","author":"dJvi2seC8CqTkxhs","img":"icons/consumables/potions/bottle-round-corked-blue.webp","scope":"global","command":"const version = 'v0.3';\nconst itemName = 'Potion of Giant Strength';\n\nconst myActiveEffect = {\n  changes: [{\"key\":\"data.attributes.strength.die.sides\", \"mode\":CONST.ACTIVE_EFFECT_MODES.ADD, \"value\":\"4\"}],\n  icon: 'icons/consumables/potions/bottle-round-corked-blue.webp',\n  label: itemName\n}  \n\n/* \nsource: \nicon: \n*/\n\nlet tokenD=canvas.tokens.controlled[0];\nconst myTitle = `Potion`;\n  \nif (tokenD===undefined) {\n  ui.notifications.error(\"Please select a token.\"); // No Token is Selected\n} else {\n  main();\n} \n\n// Modified from a macro by spacemandev\nasync function main() {\n  let myItem = await sm.getItem(tokenD, itemName);\n  if(undefined == myItem) {\n    return; \n  }\n  \n  // Active Effect On?\n  const temp = sm.getActiveEffect(tokenD, itemName);\n  if( temp != undefined ) {\n    sm.styledChatMessageSimple(itemName, `You already used it.`)       \n    return;\n  }\n\n  // Subtract item\n  await sm.useItem(tokenD, itemName);\n  \n  // Item does stuff\n  sm.addActiveEffectToOwnedToken(tokenD, myActiveEffect); \n\n  // message\n  sm.styledChatMessageSimple(itemName, `${tokenD.actor.name} used a ${itemName}.`);\n}","folder":null,"sort":0,"permission":{"default":0,"dJvi2seC8CqTkxhs":3},"flags":{"core":{"sourceId":"Macro.pEZxVFjyPvfArG9E"}}}
{"_id":"RixcGVc6z29d4Mmj","name":"Unshaken","type":"script","author":"8A8MXeQUcdCXOOtn","img":"icons/magic/control/fear-fright-white.webp","scope":"global","command":"const version = 'v1.9';\n\n/* Unshaken\n\nsource: \nicon: icons/magic/control/fear-fright-white.webp\n*/\n\nconst chatimage = \"icons/magic/control/fear-fright-white.webp\";\nlet tokenD=canvas.tokens.controlled[0];\nconst myTitle = `Shaken`;\nlet message1 = ``;\nlet message2 = ``;\n  \nif (tokenD===undefined) {\n  ui.notifications.error(\"Please select a token.\"); // No Token is Selected\n} else {\n  main();\n} \n\nasync function main() {\n  if (tokenD.actor.data.data.status.isShaken === true) {\n    rollUnshake();\n  } else if (tokenD) {\n    let message=``;\n    await tokenD.actor.update({ \"data.status.isShaken\": true });\n    sm.styledChatMessageSimple(myTitle, `<b\">${tokenD.name}</b> is <b>shaken</b> now!`, chatimage);       \n  }  \n}\n\nasync function rollUnshake() {\n  let rolled = await tokenD.actor.rollAttribute('spirit');    // ROLL SPIRIT\n  \n  if (rolled!=null) {  \n    let rollWithEdge = rolled.total;\n   \n    message1 = `<b>${tokenD.name}</b> rolled <b>${rollWithEdge}</b>.`;\n    \n    // Checking for a Critical Failure.\n    if ( sm.isCritical(rolled) ) {\n      ui.notifications.notify(\"You've rolled a Critical Failure!\");\n      message2 = `<b>${tokenD.name}</b> rolled a <b>Critical Failure!</b>!`;    \n    } else {\n      if (rollWithEdge <= 3) {\n        message2 = `${tokenD.name} will remain Shaken.`;\n        const buttonID = Math.floor(Math.random(0.1)*1000000000);\n        if ( (sm.checkBennies(tokenD)>0) ) {\n          sm.addEventListenerOnHtmlElement(\"#swadeMacrosUnshakenButton_\"+buttonID, 'click', async (e) => {    \n            sm.spendBenny(tokenD);\n            await tokenD.actor.update({ \"data.status.isShaken\": false });              \n            sm.styledChatMessageSimple(myTitle, `<b>${tokenD.name}</b> spent a benny and is no longer <b>shaken</b>.`, chatimage);\n          });            \n          message2+=`<button style=\"background:#d10000;color:white\" id=\"swadeMacrosUnshakenButton_${buttonID}\">Use Benny</button>`;  \n        }\n      } else if (rollWithEdge >= 4) {\n        await tokenD.actor.update({ \"data.status.isShaken\": false });\n        message2 = `<b>${tokenD.name}</b> is no longer <b>shaken</b> and may act normally.`;\n      }\n    }\n    sm.styledChatMessageSimple(myTitle, message1 + `<br>` + message2, chatimage);\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"8A8MXeQUcdCXOOtn":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_s38de0ct1y","path":"Auto Update","color":"#d600bd"},"core":{"sourceId":"Compendium.swademacros.auto-update-macros.mfCwlyMROXPAKHyb"}}}
{"_id":"T4Cd8E6HH2OIgquG","name":"Potion of Healing","type":"script","author":"dJvi2seC8CqTkxhs","img":"icons/consumables/potions/potion-tube-corked-red.webp","scope":"global","command":"const itemName = 'Potion of Healing';\n\n/* \nsource: \nicon: \n*/\nconst version = 'v0.4';\nlet tokenD=canvas.tokens.controlled[0];\nconst myTitle = `Potion`;\n  \nif (tokenD===undefined) {\n  ui.notifications.error(\"Please select a token.\"); // No Token is Selected\n} else {\n  main();\n} \n\n// Modified from a macro by spacemandev\nasync function main() {\n  let myItem = await sm.getItem(tokenD, itemName);\n  if(undefined == myItem) {\n    return; \n  }\n  \n  //If token is max health if so, don't do anything\n  if( sm.getWounds(tokenD) == 0 ) {\n    sm.styledChatMessageSimple(itemName, `You are not injured.`)       \n    return;\n  }\n\n  //Subtract item\n  await sm.useItem(tokenD, itemName);\n  \n  // remove 1 current wound\n  sm.applyWounds(tokenD, -1);\n\n  sm.styledChatMessageSimple(itemName, `${tokenD.actor.name} used a ${itemName} and cured 1 wound.`);\n}","folder":null,"sort":0,"permission":{"default":0,"dJvi2seC8CqTkxhs":3},"flags":{"core":{"sourceId":"Macro.pEZxVFjyPvfArG9E"}}}
{"name":"Spellbook Manager","type":"script","author":"8A8MXeQUcdCXOOtn","img":"icons/sundries/books/book-embossed-spiral-purple-white.webp","scope":"global","command":"const spellBookName1 = 'Attack';\nconst spellBookName2 = 'Support';\nconst spellBookName3 = 'Defense';\nconst spellBookName4 = 'Everything';\n\nconst spellBookTag1 = '#spellBook1';\nconst spellBookTag2 = '#spellBook2';\nconst spellBookTag3 = '#spellBook3';\nconst spellBookTag4 = '#spellBook4';\n\n/*\nSpellbook Manager\n-\n\nicon: icons/sundries/books/book-embossed-spiral-purple-white.webp\n*/\n\nlet tokenD;\nconst version = 'v0.1';\nconst chatimage = \"icons/sundries/books/book-embossed-spiral-purple-white.webp\";\n\nif (canvas.tokens.controlled[0]===undefined) {\n  ui.notifications.error(\"Please, select a token.\"); // No Token is Selected\n} else {\n  tokenD = canvas.tokens.controlled[0];\n  main();\n}\n\nfunction main() {\n  let dialogText = ``;\n  \n  dialogButtons = {\n    one: {\n      label: spellBookName1,\n      callback: (html) => {\n        activeSpellbook(spellBookTag1);\n      }\n    },\n    two: {\n      label: spellBookName2,\n      callback: (html) => {\n        activeSpellbook(spellBookTag2);\n      }\n    },\n    three: {\n      label: spellBookName3,\n      callback: (html) => {\n        activeSpellbook(spellBookTag3);\n      }\n    },\n    four: {\n      label: spellBookName4,\n      callback: (html) => {\n        equipAllItems();\n      }\n    }\n  }\n  \n\n  // Main Dialogue\n  new Dialog({\n    title: 'Spellbook Switcher',\n    content: dialogText,\n    buttons: dialogButtons,\n    default: \"one\",\n  }).render(true);\n\n}\n\n// MACRO FUNCTIONS\nasync function activeSpellbook(spellbookTag) {\n  let tmp=``;\n  let message=``;\n\n  await equipAllItems(false);\n  tmp = await equipItems(spellbookTag, true);\n\n  if (tmp!='') {\n    message+=`<p>${tokenD.actor.name} equipped:</p>`;\n    message+=`<ul>${tmp}</ul>`;    \n    \n    let chatData = {\n      user: game.user.id,\n      speaker: ChatMessage.getSpeaker(),\n      content: message\n    };  \n    ChatMessage.create(chatData, {});\n  }\n\n}\n\nasync function equipItems(spellbookTag, itemStatus=true) {\n  let message =``;\n  let itemSet = await tokenD.actor.items.filter( e => e.data.data.description?.includes(spellbookTag));\n  if (itemSet.length>0) {\n    for (var item of itemSet) {\n      await item.update({\"data.equipped\" : itemStatus});\n      message+= `<li>${item.name}</li>`;\n    }    \n  } else {\n    message=``;\n  }\n  return message;\n}\n\nasync function equipAllItems(itemStatus=true) {\n  let tokenD = canvas.tokens.controlled[0];  //debug\n  let itemSet = await tokenD.actor.items.filter( e => e.type==='power');\n  if (itemSet.length>0) {\n    for (var item of itemSet) {\n      await item.update({\"data.equipped\" : itemStatus});\n    }    \n  } \n}","folder":null,"sort":0,"permission":{"default":0,"8A8MXeQUcdCXOOtn":3},"flags":{"core":{"sourceId":"Macro.t0PGxNUpSjIQgoXd"}},"_id":"TbweFIz7dugb4h59"}
{"_id":"WWr4vKN2xDRz43Mu","name":"Adventure Deck - Table","type":"script","author":"dJvi2seC8CqTkxhs","img":"icons/sundries/gaming/playing-cards-grey.webp","scope":"global","command":"/* Adventure Deck\nsource:\nicon: icons/sundries/gaming/playing-cards-grey.webp\n\n*/\nconst version = 'v1.4';\nconst icon = 'icons/sundries/gaming/playing-cards-grey.webp';\nconst adventureCardName = 'Adventure Card';\nconst flagType = 'Adventure Card'\nconst showTableDrawToChat = false;\nconst defaultTable = game.settings.get(\"swademacros\", \"adventuredecktable\");\nlet tableToDrawAdventureCards = 'Action Cards';\n\nif (canvas.tokens.controlled[0] === undefined) {\n  ui.notifications.error(\"Please, select a token.\"); // No Token is Selected\n} else {\n  main();\n}\n\nfunction main() {\n  const tokens = canvas.tokens.controlled;\n\n  let playerNameList = `<option value=\"everyone\" selected>Everyone</option>`;\n  for (const tokenD of tokens) {\n    playerNameList += `<option value=\"${tokenD.actor.id}\">${tokenD.name}</option>`;\n  }\n\n  let tableNameList = ``;  \n  Array.from(game.tables).map((t) => {\n    if (defaultTable==t.data.name) {\n      tableNameList += `<option value=\"${t.data.name}\" selected>${t.data.name}</option>`;\n    } else {\n      tableNameList += `<option value=\"${t.data.name}\">${t.data.name}</option>`;\n    }\n  });\n\n  let template = `\n    <style type=\"text/css\">\n      .tg  {border-collapse:collapse;border-spacing:0;margin:0px auto;}\n      .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n        overflow:hidden;padding:10px 5px;word-break:normal;}\n      .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n        font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n      .tg .tg-baqh{text-align:center;vertical-align:top}\n      .tg .tg-xwyw{border-color:#000000;text-align:center;vertical-align:middle}\n    </style>\n\n    <table class=\"tg\">\n    <tbody>\n      <tr>\n        <td class=\"tg-baqh\">\n          <b>All selected tokens will receive Adventure Cards</b>\n        </td>\n      </tr>\n\n      <tr>\n        <td class=\"tg-xwyw\" colspan=\"4\"><b>Players: </b><select id=\"playerName\" style=\"width: 200px\">${playerNameList}</select></td>\n      </tr>\n\n      <tr>\n        <td class=\"tg-xwyw\" colspan=\"4\"><b>Tables: </b><select id=\"tableName\" style=\"width: 200px\">${tableNameList}</select></td>\n      </tr>\n\n    </tbody>\n    </table>\n\n  `;\n\n  new Dialog({\n    title: `Adventure Card - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        icon: \"<i class='fas fa-dice'></i>\",\n        label: \"Give Cards\",\n        callback: async (html) => {\n          adventureCardManager(html);\n        },\n      },\n      reset: {\n        icon: \"<i class='fas fa-skull'></i>\",\n        label: \"Reset Table\",\n        callback: async (html) => {\n          resetDeck(html)\n        }\n      },\n      cancel: {\n        icon: \"<i class='fas fa-window-close'></i>\",        \n        label: \"Cancel\",\n      },\n    },\n  }).render(true);\n}\n\n// -------------------------------------------------------\n// Functions\nasync function adventureCardManager(html) {\n  let actorID = html.find(\"#playerName\")[0].value;\n  tableToDrawAdventureCards = html.find(\"#tableName\")[0].value;\n\n  if (actorID == 'everyone') {\n    let tokens = canvas.tokens.controlled;\n    for (var tokenD of tokens) {\n      let actorID = tokenD.actor.id;\n      await updateAdventureCards(actorID);\n      cardMessage(actorID);\n    }\n  } else {\n    await updateAdventureCards(actorID);\n    cardMessage(actorID);\n  }\n\n}\n\nasync function updateAdventureCards(actorID) {\n  // get amount of cards to give\n  const cardsToGive = await getAdventureCardsToDraw(actorID);\n  //get table\n  const selectedCards = await game.tables\n    .find((t) => t.data.name == tableToDrawAdventureCards)\n    .drawMany(cardsToGive, {\n      displayChat: showTableDrawToChat\n    })\n  // add cards to the actor\n  await createCards(actorID, selectedCards);\n}\n\nasync function wipeAdventureCards(actorID) {\n  const character = await game.actors.get(actorID);\n\n  const cards = await character.items.filter(item => item.getFlag('swademacros', 'type') === flagType);\n\n  for (const card of cards) {\n    await card.delete()\n  }\n}\n\nasync function createCards(actorID, selectedCards) {\n  const cardsToAdd = []\n  const character = await game.actors.get(actorID);\n  for (const card of selectedCards.results) {\n    const resultName = card.data.text;\n\n    if (resultName == '') {\n      resultName = adventureCardName;\n    }\n\n    const data = {\n      name: resultName,\n      type: 'gear',\n      img: icon,\n      data: {\n        description: `<img src=\"${card.data.img}\"/>`\n      }\n    };\n\n    cardsToAdd.push(data)\n  }\n  const cards = await character.createEmbeddedDocuments('Item', cardsToAdd);\n  //const cards = await character.getEmbeddedCollection('Item').filter((i) => i.getFlag('swademacros', 'type') === flagType);\n  for (const card of cards) {\n    await card.setFlag('swademacros', 'type', flagType)\n  }\n}\n\nasync function cardMessage(actorID) {\n  const character = game.actors.get(actorID);\n  const amountCards = await getAdventureCardsToDraw(actorID);\n  const message1 = `<b>${character.name}</b> received <b>${amountCards}</b> cards.`;\n  const message2 = `Check your items. Your card is under <b>gear</b>.`;\n  sm.styledChatMessage('Adventure Cards', message1, message2);\n}\n\nasync function getAdventureCardsToDraw(actorID) {\n  const character = await game.actors.get(actorID);\n  const cardsByRank = await getCardsByRank(actorID);\n  \n  if (character.data.data.additionalStats.adventurecards != undefined) {\n    return parseInt(character.data.data.additionalStats.adventurecards.value);\n  } else if (  cardsByRank != 0) {\n    return cardsByRank;\n  } else {\n    return 1;\n  }\n}\n\nasync function getCardsByRank(actorID) {\n  const character = game.actors.get(actorID);\n  switch (character.data.data.advances.rank) {\n    case 'Novice':\n      return 1;\n    case 'Seasoned':\n      return 2;\n    case 'Veteran':\n      return 3;\n    case 'Heroic':\n      return 4;\n    case 'Legendary':\n      return 5;\n    default:\n      return 0;\n  }\n}\n\nasync function resetDeck(html) {\n  tableToDrawAdventureCards = html.find(\"#tableName\")[0].value;\n\n  const actorsWithCards = await game.actors.filter((a) => a.items.some((i) => i.getFlag('swademacros', 'type') === flagType))\n  for (const actor of actorsWithCards) {\n\n    const cardItems = await actor.items.filter((i) => i.getFlag('swademacros', 'type') === flagType)\n\n    for (const item of cardItems) {\n      await item.delete()\n    }\n  }\n  // Reset the table\n  await game.tables.find((t) => t.data.name == tableToDrawAdventureCards).reset();\n  \n  sm.styledChatMessage('Adventure Cards', 'The table was reset.', 'The adventure cards were removed from the actors.');\n}","folder":null,"sort":0,"permission":{"default":0,"dJvi2seC8CqTkxhs":3},"flags":{"core":{"sourceId":"Macro.IUfYY7hJTVTUd9vL"}}}
{"_id":"X1ITwlCiFdTbFTUZ","name":"Images To Folder","type":"script","author":"tckKxzbezKvre3KI","img":"icons/sundries/gaming/rune-card.webp","scope":"global","command":"/*\nsource: \nicon: icons/sundries/gaming/rune-card.webp\n*/\nconst version = '1.2';\nmain();\n\nasync function main() {\n  new Dialog({\n    title: `Images To Folder - ${version}`,\n    content: `\n    <h3>Important</h3>\n    <ul>\n      <li>To get the folder path right, you can drop a tile from it in the canvas and copy the path.</li>\n    </ul>\n    <h3>Form</h3>\n    <div>\n      <p>Folder Name: </p>\n      <input type=\"text\" id=\"folderName\" value='The Office'/>\n    </div>\n    <div>\n      <p>Folder Path: </p>\n      <input type=\"text\" id=\"folderPath\" value='assets/decks/TheOffice/'/>\n    </div>    \n    `,\n    buttons: {\n      roll: {\n        label: \"Create\",\n        callback: (html) => {\n          createImageFolder(html);\n        }\n      }, \n      cancel: {\n        label: \"Cancel\"\n      }\n    }\n  }).render(true)\n}\n\nasync function createImageFolder(html) {\n  const folderName = html.find(\"#folderName\")[0].value;  \n  const folderPath = html.find(\"#folderPath\")[0].value;  \n\n  const createdFolder = await Folder.createDocuments([{name: folderName, type: \"JournalEntry\"}]);\n  const folderID = createdFolder[0].id;\n\n  let {files} = await FilePicker.browse(\"data\", folderPath);\n  \n  // Name Cleaning\n  var splitPath = function (str) {\n    let imageName = str.split('\\\\').pop().split('/').pop(); // remove path\n    imageName = imageName.split('.').slice(0, -1).join('.'); // remove extension\n    imageName = imageName.replace(/_/g, \" \");\n    imageName = imageName.replace(/-/g, \" \");\n    imageName = decodeURI( imageName )\n    return imageName;\n  }\n  \n  for (let img of files) {\n    await JournalEntry.create({\n      img,\n      name: splitPath(img), // fix this to something more creative than naming it the file name :D\n      folder: folderID\n    });\n  }\n  \n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.2tI1gMP6N5zfZciw"},"cf":null}}
{"_id":"X4li2u2eDXQSTbtq","name":"Equip/Unequip Set","type":"script","author":"8A8MXeQUcdCXOOtn","img":"icons/magic/time/arrows-circling-pink.webp","scope":"global","command":"/*\nicon: icons/magic/time/arrows-circling-pink.webp\nMacros for SWADE\n*/\nconst setName1 = '#equipSet1';\nconst setName2 = '#equipSet2';\n\nconst version = 'v0.2';\n\nlet tokenD;\nif (canvas.tokens.controlled[0]===undefined) {\n  ui.notifications.error(\"Please, select a token.\"); // No Token is Selected\n} else {\n  tokenD = canvas.tokens.controlled[0];\n  main();\n}\n\nasync function main() {  \n  let message=``;\n  var tmp='';  \n\n  let itemsSet1 = tokenD.actor.items.filter( e => e.data.data.description?.includes(setName1)); // get set1\n  let itemsSet2 = tokenD.actor.items.filter( e => e.data.data.description?.includes(setName2)); // get set2\n\n  const itemsSet1FullSize = itemsSet1.length;\n  const itemsSet2FullSize = itemsSet2.length;\n \n  const itemsSet1Size = itemsSet1.filter( e => e.data.data.equipped==true ).length;\n  const itemsSet2Size = itemsSet2.filter( e => e.data.data.equipped==true ).length;\n  \n  //check if any item from set 1 is equipped\n  if ( itemsSet1Size>0 ) { // true means set1 is on, so turn them off and turn set2 on\n    for (var item of itemsSet1) {\n      await item.update({\"data.equipped\" : false});\n    }    \n    if (itemsSet2FullSize>0) {    \n      tmp = '';   \n      for (var item of itemsSet2) {\n        await item.update({\"data.equipped\" : true});\n        tmp+= `<li>${item.name}</li>`;\n      }     \n    }\n  } else if (itemsSet2Size>0) { // true set3 is on\n    for (var item of itemsSet2) {\n      await item.update({\"data.equipped\" : false});\n    }         \n    if (itemsSet1FullSize>0) {    \n      tmp = '';   \n      for (var item of itemsSet1) {\n        await item.update({\"data.equipped\" : true});\n        tmp+= `<li>${item.name}</li>`;\n      } \n    }\n  } else { \n    for (var item of itemsSet2) {\n      await item.update({\"data.equipped\" : false});\n    }         \n    if (itemsSet1FullSize>0) {\n      tmp = '';       \n      for (var item of itemsSet1) {\n        await item.update({\"data.equipped\" : true});\n        tmp+= `<li>${item.name}</li>`;\n      }    \n    }\n  }   \n  \n  if (tmp!='') {\n    message+=`<p>${tokenD.actor.name} equipped:</p>`;\n    message+=`<ul>${tmp}</ul>`;    \n    \n    let chatData = {\n      user: game.user.id,\n      speaker: ChatMessage.getSpeaker(),\n      content: message\n    };  \n    ChatMessage.create(chatData, {});\n  }\n}\n\n\n/*\n  // debug -------------------------------\n  tokenD.actor.items.filter( e => e.name=='Rapier')[0]\n  tokenD = canvas.tokens.controlled[0];\n  tokenD.actor.items.filter( e => e.name=='Bow (long)')[0].data.data.description?.includes(setName1)\n  tokenD.actor.items.filter( e => e.name=='Rapier')[0].data.data.description?.includes(setName2)\n  \n  tokenD.actor.items.filter( e => e.data.data.description?.includes(setName2));\n  \n  console.log('-------------------')\n  console.log('itemsSet1')\n  console.log(itemsSet1)\n  console.log('itemsSet2')\n  console.log(itemsSet2)  \n  console.log('-------------------')\n  // debug --------------------------------\n*/","folder":null,"sort":0,"permission":{"default":0,"8A8MXeQUcdCXOOtn":3},"flags":{"core":{"sourceId":"Macro.M102QNSbMiOwDzRK"}}}
{"_id":"XRYElywBM6F0FNQL","name":"Support","type":"script","author":"tckKxzbezKvre3KI","img":"icons/skills/social/diplomacy-unity-alliance.webp","scope":"global","command":"const version = 'v1.4';\nconst chatimage = \"icons/skills/social/diplomacy-unity-alliance.webp\";\nlet coreRules = false;\nconst coreRulesLink = '@Compendium[swade-core-rules.swade-rules.L8ifBUyo8n9IDqSc]{Support}';\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\n/* Support p104 SWADE core\nIMPORTANT\n- \n\nTODO\n- \nsource: \nicon: icons/skills/social/diplomacy-unity-alliance.webp\n*/\n\n/*\n- list target skills\n- search the same skill\n- roll\n- report outcome\n*/\n\n\n// Requires at least 1 target\nlet supporter;\nlet target;    \nif (canvas.tokens.controlled[0]===undefined || Array.from(game.user.targets)[0]===undefined){\n  ui.notifications.warn(\"You must select a token and target another one!\");    \n} else {\n  supporter=canvas.tokens.controlled[0];\n  target=Array.from(game.user.targets)[0];    \n  main();\n}\n\nfunction main() {  \n\n  let supporterSkills = sm.listSkills(supporter);\n\n  let supporterSkillsList = ``;\n  supporterSkills.map((t) => {\n    supporterSkillsList += `<option value=\"${t}\">${t}</option>`;\n  });\n\n  let template = `      \n    <h2 style=\"text-align:center;\">${supporter.name} will try to Support ${target.name}.</h2>\n    \n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\" align=\"center\">\n    <div class=\"divTableCell\">\n        Supporter Skill (Choose): \n        <select id=\"skillAttacker\" type=\"text\" style=\"width: 100px; text-align: center;\">\n          ${supporterSkillsList}\n        </select>      \n    </div>\n    </div>\n    \n    </div>\n    </div> \n    <br>    \n  `;\n  \n  new Dialog({\n    title: `Support - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Support!\",\n        callback: async (html) => {\n          support(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      }\n    },\n    default: \"ok\"\n  }, { id: 'kultcss'}).render(true);\n}\n\nasync function support(html) {\n  const skillSupporter = html.find(\"#skillAttacker\")[0].value;    \n  let supporterRolled;\n  let total;\n  let message;\n  let modifier = 0;\n  \n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${coreRulesLink}</h2><div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Support</h2>`;\n  }    \n\n  supporterRolled = await sm.rollSkill(supporter, skillSupporter);  \n  total = supporterRolled.total;\n\n  message += `<p><b style=\"color:darkblue\">${supporter.name}</b> is trying to support <b style=\"color:darkred\">${target.name}</b> with <b>${skillSupporter}</b>.</p>`;  \n  \n  if ( sm.isCritical(supporterRolled) ) {\n    message += `<p><b style=\"color:darkblue\">${supporter.name}</b> rolled a <b style=\"color: red; font-size:150%\">Critical Failure!</b>!</p>`;\n    modifier = -2;\n    message += `<p><b style=\"color:darkred\">${target.name}</b> should roll with <b style=\"color:red\">${modifier}</b>.</p>`;;\n  } else if ( total>=4 && total<8 ) {\n    message += `<p><b style=\"color:darkblue\">${supporter.name}</b> rolled <b style=\"color: red;\">${total}</b>!</p>`;\n    modifier = 1;\n    message += `<p><b style=\"color:darkred\">${target.name}</b> should roll with <b style=\"color:red\">${modifier}</b>.</p>`;;\n  } else if ( total>=8 ) {\n    message += `<p><b style=\"color:darkblue\">${supporter.name}</b> rolled <b style=\"color: red;\">${total}</b>!</p>`;\n    modifier = 2;\n    message += `<p><b style=\"color:darkred\">${target.name}</b> should roll with <b style=\"color:red\">${modifier}</b>.</p>`;;\n  } else {\n    message += `<p><b style=\"color:darkblue\">${supporter.name}</b> rolled <b style=\"color: red;\">${total}</b>!</p>`;\n    message += `<p><b style=\"color:darkblue\">${supporter.name}</b> failed!</p>`;    \n  }\n\n  \n\n  // send message1\n  let chatData = {\n    content: message\n  };  \n  ChatMessage.create(chatData, {});  \n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":null}}
{"_id":"bNtNIenZqEIFUnaX","name":"Raise Calculator","type":"script","author":"tckKxzbezKvre3KI","img":"icons/skills/movement/arrow-upward-yellow.webp","scope":"global","command":"const iconSize = 45;\nconst icon = 'icons/skills/movement/arrow-upward-yellow.webp';\nconst failureIcon = 'icons/magic/death/bones-crossed-orange.webp';\nconst successIcon = 'icons/skills/social/trading-justice-scale-yellow.webp';\nconst raisesIcon = 'icons/skills/social/peace-luck-insult.webp';\nconst text = `<div>\n  <img style=\"vertical-align:middle\" src=\"${icon}\" alt=\"\" width=\"${iconSize}\" height=\"${iconSize}\" /> \n  <span>Raises will show here once you leave the Result field.</span>\n</div>`;  \n\n\nnew Dialog({\n  title: 'Raise Calculator',\n  content: `\n    <style type=\"text/css\">\n    .tg  {border-collapse:collapse;border-spacing:0;height:200px;}\n    .tg td{border-color:black;border-style:solid;border-width:0px; width:60px;\n      overflow:hidden;padding:10px 5px;word-break:normal;}\n    .tg th{border-color:black;border-style:solid;border-width:0px;\n      font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n    .tg .tg-xwyw{border-color:#000000;text-align:center;vertical-align:middle}\n    </style>\n\n    <form>\n\n    <table class=\"tg\">\n    <tbody>\n      <tr>\n        <td class=\"tg-xwyw\">\n          <b style=\"font-size:20px\">Target Number</b>\n        </td>\n        <td class=\"tg-xwyw\">\n          <b style=\"font-size:20px\">Result</b>\n        </td>\n      </tr>\n      <tr>\n        <td class=\"tg-xwyw\">\n          <div class=\"form-group\">\n            <input name=\"target\" type=\"number\" min=\"0\" max=\"200\" value=4 autofocus onClick=\"this.select();\" style=\"width: 50px;\"/>\n          </div>                  \n        </td>\n        <td class=\"tg-xwyw\">\n          <div class=\"form-group\"> \n            <input name=\"result\" type=\"number\" min=\"0\" max=\"200\" onClick=\"this.select();\" style=\"width: 50px;\"/>\n          </div>        \n        </td>\n      </tr>\n      <tr>\n        <td colspan=\"2\">\n          <div class=\"calculation\">${text}</div>\n        </td>\n      </tr>\n    </tbody>\n    </table>\n\n    </form>`,\n  buttons: {},\n  render: ([dialogContent]) => {\n    \n    dialogContent.querySelector(`input[name=\"target\"`).focus();\n    dialogContent.querySelector(`input[name=\"result\"`).addEventListener(\"input\", (event) => {\n        const textInput = event.target;\n        const form = textInput.closest(\"form\")\n        const calcResult = form.querySelector(\".calculation\");\n        const target = form.querySelector('input[name=\"target\"]').value;\n        const result = form.querySelector('input[name=\"result\"]').value;\n        let raises = Math.floor((parseInt(result) - parseInt(target)) / 4);\n        let tmpIcon;\n        \n        if (parseInt(target) > parseInt(result)) {\n          tmpIcon = failureIcon;\n          calcResult.innerHTML = `<div>\n          <img style=\"vertical-align:middle\" src=\"${tmpIcon}\" alt=\"\" width=\"${iconSize}\" height=\"${iconSize}\" /> \n          <span style=\"font-size:20px\"><b>Failure</b></span>\n          </div>`;\n        }\n        else if (parseInt(target) <= parseInt(result) && raises < 1) {\n          tmpIcon = successIcon;\n          calcResult.innerHTML = `<div>\n          <img style=\"vertical-align:middle\" src=\"${tmpIcon}\" alt=\"\" width=\"${iconSize}\" height=\"${iconSize}\" /> \n          <span style=\"font-size:20px\"><b>Success</b></span>\n          </div>`;          \n        }\n        else {\n          tmpIcon = raisesIcon;\n          calcResult.innerHTML = `<div>\n          <img style=\"vertical-align:middle\" src=\"${tmpIcon}\" alt=\"\" width=\"${iconSize}\" height=\"${iconSize}\" /> \n          <span style=\"font-size:20px\"><b>${raises} Raise(s)</b></span>\n          </div>`;      \n        }\n        \n      });\n      \n  },\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.onkkfY2zBddVpiLr"},"cf":null}}
{"_id":"bhWOfV0r1BspboyA","name":"Boost/Lower Trait","type":"script","author":"8A8MXeQUcdCXOOtn","img":"icons/magic/movement/chevrons-down-yellow.webp","scope":"global","command":"const version = 'v1.6';\n\n/*\nicon: /icons/svg/up.svg\nsource: https://gist.githubusercontent.com/bloy/f82dcd44d949f820bd9375b1a790b3cc/raw/1e369a6ae01d89a50fd9a72aaa0daff7f8a30a2b/boost_lower_trait.js\n*/\n\nconst UPICON = \"icons/magic/life/cross-embers-glow-yellow-purple.webp\";\nconst DOWNICON = \"icons/magic/movement/chevrons-down-yellow.webp\";\n\nif ( canvas.tokens.controlled[0]===undefined && Array.from(game.user.targets)[0]===undefined ) {\n  ui.notifications.error(\"Please, select or target a token.\"); // No Token is Selected\n} else {\n  main();\n}\n\nasync function main() {\n  let tokens = [];\n  tokens = tokens.concat(Array.from(game.user.targets));\n  tokens = tokens.concat(canvas.tokens.controlled);\n\n  let traits = {\n    \"Agility\": { \n      type: \"attribute\",\n      name: \"Agility\",\n      modkey: \"data.attributes.agility.die.modifier\",\n      diekey: \"data.attributes.agility.die.sides\"\n    },\n    \"Smarts\": { \n      type: \"attribute\",\n      name: \"Smarts\",\n      modkey: \"data.attributes.smarts.die.modifier\",\n      diekey: \"data.attributes.smarts.die.sides\"\n    },\n    \"Spirit\": { \n      type: \"attribute\",\n      name: \"Spirit\",\n      modkey: \"data.attributes.spirit.die.modifier\",\n      diekey: \"data.attributes.spirit.die.sides\"\n    },\n    \"Strength\": { \n      type: \"attribute\",\n      name: \"Strength\",\n      modkey: \"data.attributes.strength.die.modifier\",\n      diekey: \"data.attributes.strength.die.sides\"\n    },\n    \"Vigor\": { \n      type: \"attribute\",\n      name: \"Vigor\",\n      modkey: \"data.attributes.vigor.die.modifier\",\n      diekey: \"data.attributes.vigor.die.sides\"\n    }\n  };\n\n  for (let token of tokens) {\n    let skills = token.actor.items.filter(e => e.type == \"skill\");\n    for (const skill of skills) {\n        let name = skill.data.name;\n        traits[name] = { type: \"skill\", name: name, \n                         modkey: `@Skill{${name}}[data.die.modifier]`, \n                         diekey: `@Skill{${name}}[data.die.sides]` };\n    }\n  }\n\n  let traitoptions = `<select id=\"select-trait\" name=\"select-trait\">`;\n  for (let trait in traits) {\n    traitoptions += `<option value=\"${trait}\">${trait}</option>`;\n  }\n  traitoptions += `</select>`;\n\n  let applyChanges = false;\n  let raise = false;\n  new Dialog({\n      title: `Boost/Lower Trait - ${version}`,\n      content: `\n      <style>\n        div.blueTable {\n          width: 100%;\n          text-align: center;\n          border-collapse: collapse;\n        }\n        .divTable.blueTable .divTableCell, .divTable.blueTable .divTableHead {\n        }\n        .blueTable .tableFootStyle {\n          font-size: 14px;\n        }\n        .blueTable .tableFootStyle .links {\n           text-align: right;\n        }\n        .blueTable .tableFootStyle .links a{\n          display: inline-block;\n          background: #1C6EA4;\n          color: #FFFFFF;\n          padding: 2px 8px;\n          border-radius: 5px;\n        }\n        .blueTable.outerTableFooter {\n          border-top: none;\n        }\n        .blueTable.outerTableFooter .tableFootStyle {\n          padding: 3px 5px; \n        }\n        /* DivTable.com */\n        .divTable{ display: table; }\n        .divTableRow { display: table-row; }\n        .divTableHeading { display: table-header-group;}\n        .divTableCell, .divTableHead { display: table-cell;}\n        .divTableHeading { display: table-header-group;}\n        .divTableFoot { display: table-footer-group;}\n        .divTableBody { display: table-row-group;}\n      </style>      \n      \n        <div class=\"divTable blueTable\">\n        <div class=\"divTableBody\">\n        <div class=\"divTableRow\">\n        <div class=\"divTableCell\"><b>Which Trait?</b></div>\n        <div class=\"divTableCell\"><b>Boost or Lower?</b></div>\n        </div>\n        <div class=\"divTableRow\">\n        <div class=\"divTableCell\">${traitoptions}</div>\n        <div class=\"divTableCell\">\n            <select id=\"select-direction\" name=\"select-direction\">\n                <option value=\"Boost\">Boost</option>\n                <option value=\"Lower\">Lower</option>\n            </select        \n        </div>\n        </div>\n        </div>\n        </div>\n        </br>\n      `,\n      buttons: {\n          apply: {\n              label: \"Apply\",\n              callback: () => {applyChanges = true; raise}\n          },\n          raise: {\n              label: \"Apply with raise\",\n              callback: () => {applyChanges = true; raise = true}\n          },\n          cancel: {\n              label: \"Cancel\"\n          }\n      },\n      default: \"apply\",\n      close: html => {\n          if (applyChanges) {\n              let direction = html.find('[name=\"select-direction\"]')[0].value;\n              let trait = html.find('[name=\"select-trait\"]')[0].value;\n              createEffect(tokens, traits, direction, trait, raise);\n          }\n      }\n  }).render(true);\n} // end main\n\nasync function createEffect(tokens, traits, direction, trait, raise) {\n  trait = traits[trait];\n  for (let tokenD of tokens) {\n    let currentdie = 0;\n    let currentmod = 0;\n    if (trait[\"type\"] == \"attribute\") {\n      let part;\n      let val = tokenD.actor.data;\n      for (part of trait[\"diekey\"].split(\".\")) {\n          val = val[part];\n      }\n      currentdie = val\n      val = tokenD.actor.data\n      for (part of trait[\"modkey\"].split(\".\")) {\n          val = val[part];\n      }\n      currentmod = val;\n    } else {\n      let skill = tokenD.actor.items.filter(s => s.type == \"skill\").find(s => s.data.name == trait[\"name\"])\n      if (skill) {\n        currentdie = skill.data.data.die.sides;\n        currentmod = skill.data.data.die.modifier;\n      } \n    }\n    if (currentdie == 0) {\n      continue;\n    }\n    if (currentdie == 4 && direction == \"Lower\") {\n      continue;\n    }\n    let diemod = 2;\n    let modmod = 0;\n    if (direction == \"Lower\") {\n      diemod = -2;\n    }\n    if (currentdie == 6 && direction == \"Lower\" && raise) {\n      diemod = -1;\n    } else if (currentdie == 12 && direction == \"Boost\") {\n      diemod = 0;\n      modmod = 1;\n    }\n    if (raise) {\n      diemod *= 2;\n      modmod *= 2;\n    }\n    if (currentdie == 10 && direction == \"Boost\" && raise) {\n      diemod = 2;\n      modmod = 1;\n    }\n\n    const effectData = {\n      embedded: {\n        ActiveEffect:{ \n          label: {\n            label: `${raise ? \"major\" : \"minor\"} ${direction} ${trait.name}`,\n            icon: direction == \"Lower\" ? DOWNICON : UPICON,\n            changes: [{                    \n              \"key\": trait[\"diekey\"],\n              \"mode\": 2,\n              \"value\": diemod,\n              \"priority\": 0\n            },{\n              \"key\": trait[\"modkey\"],\n              \"mode\": 2,\n              \"value\": modmod,\n              \"priority\": 0\n            }],\n            duration: {\n              \"rounds\": direction == \"Lower\" ? 1 : 5\n            },\n            flags: {\n              swade: {\n                \"expiration\": 3,\n              }\n            }\n          }\n        }\n      }      \n    };\n\n    boostMessage(tokenD.name, direction, trait.name, raise ? \"major\" : \"minor\"); // chat message\n    await applyUniqueEffect(tokenD, effectData);    \n  } // LOOP - END FOR \n}\n\n// define applyUniqueEffect function\nasync function applyUniqueEffect(tokenD, myActiveEffect) {\n  let activeEffectClass = getDocumentClass(\"ActiveEffect\");\n  const output = await warpgate.mutate(tokenD.document, myActiveEffect, {}, {permanent: true});  \n}\n\nfunction boostMessage(tokenD, direction, traitName, raise) {\n  let message = ``;\n  message += `<h2>${direction}</h2>\n    ${tokenD} will ${raise} ${direction} ${traitName}.`;  \n\n  let chatData = {\n    user: game.user.id,\n    speaker: ChatMessage.getSpeaker(),\n    content: message\n  };  \n  ChatMessage.create(chatData, {});\n}","folder":null,"sort":0,"permission":{"default":0,"8A8MXeQUcdCXOOtn":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.dVj0CSN1HF9MwQ6w"}}}
{"_id":"cDKiXCsaOlsDVvC0","name":"Deviation","type":"script","author":"tckKxzbezKvre3KI","img":"icons/weapons/thrown/dynamite-simple-brown.webp","scope":"global","command":"const version = 'v1.4';\nconst chatimage = \"https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/icons/clock.webp\";\n\n/* Deviation p99 SWADE\nIf a blast template misses, it deviates 1d6″ for thrown weapons (such as grenades) and 2d6″ for fired projectiles. Multiply by 2 if the attack was made at Medium Range, 3 if Long, and 4 for Extreme.\n\nNext roll a d12 and read it like a clock facing to determine the direction the missile deviates. A weapon can never deviate more than half the distance to the original target (that keeps it from going behind the thrower).\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/Deviation.js\nicon: icons/weapons/thrown/dynamite-simple-brown.webp\n*/\n\nconst chaticon = 'icons/weapons/thrown/dynamite-simple-brown.webp';\n\ngetRequirements();\n\nfunction getRequirements() {\n  let template = `\n  <h2>Weapon Type</h2>\n  <table style=\"width:100%\">\n  <tr>\n    <td><input type=\"radio\" id=\"thrown\" name=\"weapontype\" value=\"thrown\"><label for=\"thrown\">Thrown weapon</label></td>\n    <td><input type=\"radio\" id=\"projectile\" name=\"weapontype\" value=\"projectile\" checked=\"checked><label for=\"projectile\">Projectile</label></td>    \n  </tr>\n  </table>  \n  <h2>Range</h2>\n  <table style=\"width:100%\">\n  <tr>\n    <td><input type=\"radio\" id=\"short\" name=\"range\" value=\"short\" checked=\"checked><label for=\"short\">Short</label></td>\n    <td><input type=\"radio\" id=\"medium\" name=\"range\" value=\"medium\"><label for=\"medium\">Medium</label></td>    \n    <td><input type=\"radio\" id=\"long\" name=\"range\" value=\"long\"><label for=\"long\">Long</label></td>    \n    <td><input type=\"radio\" id=\"extreme\" name=\"range\" value=\"extreme\"><label for=\"extreme\">Extreme</label></td>    \n  </tr>\n  </table>    \n  <h2>Blast Size</h2>\n  <table style=\"width:100%\">\n  <tr>\n    <td><input type=\"radio\" id=\"smallblast\" name=\"blastsize\" value=\"smallblast\"><label for=\"smallblast\">Small</label></td>\n    <td><input type=\"radio\" id=\"mediumblast\" name=\"blastsize\" value=\"mediumblast\" checked=\"checked><label for=\"mediumblast\">Medium</label></td>    \n    <td><input type=\"radio\" id=\"largeblast\" name=\"blastsize\" value=\"largeblast\"><label for=\"largeblast\">Large</label></td>    \n  </tr>\n  </table>   \n  `;\n  new Dialog({\n    title: \"Deviation\",\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Go!\",\n        callback: async (html) => {\n          rollForIt(html);\n        },\n      }\n    },\n  }).render(true);\n}\n\nasync function rollForIt(html) {\n  const weapontype=html.find('input[name=\"weapontype\"]:checked').val();\n  const range=html.find('input[name=\"range\"]:checked').val();\n  const blastsize=html.find('input[name=\"blastsize\"]:checked').val();\n  \n  if (weapontype=='thrown') {\n    await diceRoll('1d6', range, blastsize);\n  } else {\n    await diceRoll('2d6', range, blastsize);\n  }\n}\n\nasync function diceRoll(die, range, blastsize) {\n  const rangeMultiplier = rangeCheck(range);\n  const rollDirection = (await new Roll(\"1d12\").evaluate({async: true}));\n  const direction = rollDirection.total;\n  const rollDistance = (await new Roll(die).evaluate({async: true}));\n  const distance = (rollDistance.total)*rangeMultiplier;\n\n  let myTitle = `<img style=\"vertical-align:middle\" src=${chaticon} width=\"28\" height=\"28\">Deviation`;    \n  \n  message = `<p>Move the blast <b>${distance}\"</b> to <b style=\"color:red\">${direction}</b> O'Clock.</p>`;\n  if (directionCheck(direction)) {\n    message += `<p><b style=\"color:red\">A weapon can never deviate more than half the distance to the original target (that keeps it from going behind the thrower).</b></p>`;\n  }\n  message += `<p style=\"text-align:center\"><img style=\"vertical-align:middle\" src=${chatimage} width=\"200\" height=\"200\"><p></div>`;\n\n  sm.styledChatMessage(myTitle, '', message);\n  await rollDirection.toMessage();\n  await rollDistance.toMessage();\n  \n  const callbacks = {\n    pre: async (location, updates) => {\n      //const offset = await getOffset(direction, distance);\n      location.x = location.x;\n      location.y = location.y;      \n    },\n    post: async (template, tokenD) => { \n      await createTemplate(tokenD, blastsize);\n      tokenD.delete();\n    }\n  }\n\n  await actorExists(); \n  warpgate.spawn(\"explosive\", {}, callbacks);   // work await warpgate.spawn('explosive', {}, {});\n}\n\nfunction rangeCheck(range) {\n  if (range=='short') {\n    return 1;\n  } else if (range=='medium') {\n    return 2;\n  } else if (range=='long') {\n    return 3;\n  } else if (range=='extreme') {\n    return 4;\n  }\n}\n\nfunction directionCheck(direction) {\n  if (direction==4 || direction==5 || direction==6 || direction==7 || direction==8) {\n    return true;\n  } else {\n    return false;\n  } \n}\n\nasync function getOffset(direction, distance) {\n  const gridSize = canvas.grid.size;\n  const finalDistance = gridSize*distance;\n\n  switch (direction) {\n    case 1:\n    case 2:\n      return {x: finalDistance, y: -finalDistance};\n    case 3:\n      return {x: finalDistance, y: 0};\n    case 4:\n    case 5:\n      return {x: finalDistance, y:finalDistance};\n    case 6:\n      return {x: 0, y: finalDistance};\n    case 7:\n    case 8:\n      return {x: -finalDistance, y:finalDistance};\n    case 9:\n      return {x: -finalDistance, y:0};\n    case 10:\n    case 11:\n      return {x: -finalDistance, y:-finalDistance};\n    case 12:\n      return {x: 0, y:-finalDistance};\n  }\n}\n\n// smallblast mediumblast largeblast\nasync function createTemplate(tokenD, templateSize) {  \n  let size;\n  switch (templateSize) {\n    case 'smallblast':\n      size = 1;\n      break;\n    case 'mediumblast':\n      size = 2;\n      break;\n    case 'largeblast':\n      size = 3;\n      break;\n  }\n\n  await canvas.scene.createEmbeddedDocuments(\"MeasuredTemplate\", [{\n    t: \"circle\",\n    user: game.user.id,\n    x: tokenD.data.x + canvas.grid.size/2,\n    y: tokenD.data.y + canvas.grid.size/2,\n    direction: 0,\n    distance: size,\n    borderColor: \"#FF0000\",\n    //fillColor: \"#FF3366\",\n  }]);\n}\n\n// This function will check the actor directory for an actor.\nasync function actorExists() {\n  \n  if(game.actors.getName(\"explosive\")===undefined) {    \n    let data = {\n      name: 'explosive',\n      type: \"npc\",\n      img: \"icons/weapons/thrown/dynamite-simple-brown.webp\",    \n      data: {},\n      token: {},\n      items: [],\n      flags: {},\n      data: {}\n    }\n\n    const instantBomb = await Actor.create(data);\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"cf":null,"combat-utility-belt":{"macroTrigger":""}}}
{"_id":"cbOOezTOQmWbGJww","name":"Everyday Macro Manager","type":"script","author":"tckKxzbezKvre3KI","img":"icons/sundries/documents/document-symbol-skull-tan.webp","scope":"global","command":"const version = '0.6';\n\n/*\n  GM Menu\n  \n  icons: icons/sundries/documents/document-writing-pink.webp\n  \n  Fill the constant macros with the names of your macros, when you click the button it will run the macro.\n\n  Dialog Window will not close until the X button is pressed.\n*/\nconst managerType = 'Everyday - Macro Manager';\n\n(()=>{\n  const macros = [\n    \"3D Measure\",\n    \"Next Turn\",\n    \"Token Vision\"\n  ];\n\n  let buttons = {}, dialog, content = `<div sytle=\"width:100%;text-align:center;><h2>Choose Macro</h2></div>`;\n  \n  macros.forEach((str)=> {\n    let macro = game.macros.getName(str);\n    if(!macro) return;\n\n    buttons[str] = {\n      label : `\n        <div style=\"display:flex;flex-direction:row;justify-content:center;align-items:center;width\">\n          <div style=\"display:flex;justify-content:left;flex-grow:1;\"><img src=\"${macro.data.img}\" width=\"25\" height=\"25\" style=\"background-color:#5c5c5c;\"/></div>\n          <div style=\"display:flex;justify-content:left;flex-grow:4\"><label>${str}</label></div>\n        </div>`,\n      callback : () => {\n        game.macros.getName(str).execute();\n        //dialog.render(true);\n      }\n    }\n  });\n  dialog = new Dialog({title : `${managerType}`,content, buttons}).render(true);\n})();","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":null}}
{"_id":"cgEFd8i6cRKH616L","name":"Chase","type":"script","author":"tckKxzbezKvre3KI","img":"icons/sundries/gaming/playing-cards.webp","scope":"global","command":"const version = 'v1.8';\nconst defaultTable = game.settings.get(\"swademacros\", \"chasedecktable\");\n\n/* Chase\nFeatures\n- Draw n cards placing them in the scene\n- This macro can reset the table preventing from the error\n- This macro can line up the cards\nsource:\nicon: icons/sundries/gaming/playing-cards.webp\n*/\n\nasync function makeTiles(html) {\n    let spacingX = parseInt(html.find('#spacing-x')[0].value);\n    let spacingY = parseInt(html.find('#spacing-y')[0].value);\n    const rows = parseInt(html.find('#card-rows')[0].value);\n    const columns = parseInt(html.find('#card-columns')[0].value);\n    const stackCards = html.find('#stack-cards')[0].checked;\n    const tableName = html.find('#table-name')[0].value;\n    let cardHeight = parseInt(html.find('#card-height')[0].value);\n    let cardWidth = parseInt(html.find('#card-width')[0].value);\n\n    if (tableName === '') {\n        ui.notifications.warn(`Please select a RollTable from which to draw.`);\n    } else {\n        const cardsToDraw = rows * columns;\n        const cardDraws = (\n            await game.tables\n                .find((t) => t.data.name == tableName)\n                .drawMany(cardsToDraw, { displayChat: false })\n        ).results;\n\n        const sceneWidth = canvas.scene.dimensions.sceneWidth;\n        const sceneHeight = canvas.scene.dimensions.sceneHeight;\n        const sceneRectX = canvas.scene.dimensions.sceneRect.x;\n        const sceneRectY = canvas.scene.dimensions.sceneRect.y;\n\n        let totalSpacingX = spacingX * (columns - 1);\n        let totalSpacingY = spacingY * (rows - 1);\n        let fullSpreadWidth = (cardWidth * columns) + totalSpacingX;\n        let fullSpreadHeight = (cardHeight * rows) + totalSpacingY;\n\n        if (fullSpreadWidth > sceneWidth || fullSpreadHeight > sceneHeight) {\n            let newSpreadRatio = 1;\n\n            if (fullSpreadWidth > sceneWidth) {\n                newSpreadRatio = sceneWidth / fullSpreadWidth;\n                cardWidth = cardWidth * newSpreadRatio;\n                cardHeight = cardHeight * newSpreadRatio;\n                spacingX = spacingX * newSpreadRatio;\n                spacingY = spacingY * newSpreadRatio;\n                totalSpacingX = spacingX * (columns - 1);\n                totalSpacingY = spacingY * (rows - 1);\n                fullSpreadWidth = cardWidth * columns + totalSpacingX;\n                fullSpreadHeight = cardHeight * rows + totalSpacingY;\n            }\n\n            if (fullSpreadHeight > sceneHeight) {\n                newSpreadRatio = sceneHeight / fullSpreadHeight;\n                cardWidth = cardWidth * newSpreadRatio;\n                cardHeight = cardHeight * newSpreadRatio;\n                spacingX = spacingX * newSpreadRatio;\n                spacingY = spacingY * newSpreadRatio;\n                totalSpacingX = spacingX * (columns - 1);\n                totalSpacingY = spacingY * (rows - 1);\n                fullSpreadWidth = cardWidth * columns + totalSpacingX;\n                fullSpreadHeight = cardHeight * rows + totalSpacingY;\n            }\n        }\n\n        let startX = sceneRectX + ((sceneWidth - fullSpreadWidth) / 2);\n        let startY = sceneRectY + ((sceneHeight - fullSpreadHeight) / 2);\n\n        if (stackCards) {\n            startX = sceneRectX + ((sceneWidth - cardWidth) / 2);\n            startY = sceneRectY + ((sceneHeight - cardHeight) / 2);\n        }\n\n        let positionX = startX;\n        let positionY = startY;\n        let i = 0;\n\n        for (let y = 0; y < rows; y++) {\n            for (let x = 0; x < columns; x++) {\n                const tData = {\n                    img: cardDraws[i].data.img,\n                    width: cardWidth,\n                    height: cardHeight,\n                    x: positionX,\n                    y: positionY,\n                    'flags.swademacros.isChaseCard': true\n                };\n                if (!stackCards) {\n                    positionX = positionX + cardWidth + spacingX;\n                }\n                await TileDocument.create(tData, { parent: canvas.scene });\n                i++;\n            }\n            if (!stackCards) {\n                positionY = positionY + cardHeight + spacingY;\n            }\n            positionX = startX;\n        }\n    }\n}\n\nfunction main() {\n    //How Many Cards to Draw\n    //Width/Height\n    //Which Table to Draw From\n    const grid = canvas.scene.data.grid;\n\n    let cardsList = ``;\n    Array.from(game.tables).map((t) => {\n      if (defaultTable==t.data.name) {\n        cardsList += `<option value=\"${t.data.name}\" selected>${t.data.name}</option>`;\n      } else {\n        cardsList += `<option value=\"${t.data.name}\">${t.data.name}</option>`;\n      }\n    });\n\n    const template = `\n        <style scoped>\n            .custom-sizing-spacing {\n                margin: 1em 0;\n            }\n        </style>\n        <form>\n            <fieldset>\n                <legend>Choose a Roll Table</legend>\n                <p>\n                    <label for=\"table-name\">Table to Draw From: <select id=\"table-name\">${cardsList}</select></label>\n                </p>\n            </fieldset>\n            <fieldset>\n                <legend>Layout</legend>\n                <table style=\"text-align: center;\">\n                <tbody>\n                  <tr>\n                    <td><label for=\"card-rows\">Rows: <input id=\"card-rows\" type=\"number\" min=\"1\" style=\"width: 50px;\" value=\"1\"></label></td>\n                    <td><label for=\"card-columns\">Columns: <input id=\"card-columns\" type=\"number\" min=\"1\" style=\"width: 50px;\" value=\"9\"></label></td>\n                  </tr>\n                </tbody>\n                </table>\n                <p>--OR--</p>\n                <p>\n                    <label for=\"stack-cards\"><input type=\"checkbox\" id=\"stack-cards\"/> Stack cards into single pile</label>\n                </p>\n            </fieldset>\n            <details class=\"custom-sizing-spacing\">\n                <summary>Customize Card Size and Spacing</summary>\n                <fieldset>\n                    <legend>Card Size (in pixels)</legend>\n                    <table style=\"text-align: center;\">\n                    <tbody>\n                      <tr>\n                        <td>\n                          <label for=\"card-height\">Height: <input id=\"card-height\" type=\"number\" min=\"1\" style=\"width: 50px;\" value=\"${grid * 3.5}\"></label>\n                        </td>\n                        <td>\n                          <label for=\"card-width\">Width: <input id=\"card-width\" type=\"number\" min=\"1\" style=\"width: 50px;\" value=\"${grid * 2.5}\"></label>\n                        </td>\n                      </tr>\n                    </tbody>\n                    </table>\n                </fieldset>\n                <fieldset>\n                    <legend>Spacing between Cards (in pixels)</legend>\n                      <table style=\"text-align: center;\">\n                      <tbody>\n                        <tr>\n                          <td>\n                            <label for=\"spacing-x\">Columns: <input id=\"spacing-x\" type=\"number\" min=\"0\" value=\"${grid / 2}\" step=\"1\" style=\"width: 50px;\"></label>\n                          </td>\n                          <td>\n                            <label for=\"spacing-y\">Rows: <input id=\"spacing-y\" type=\"number\" min=\"0\" value=\"${grid / 2}\" step=\"1\" style=\"width: 50px;\"></label>\n                          </td>\n                        </tr>\n                      </tbody>\n                      </table>\n                </fieldset>\n            </details>\n        </form>\n        `;\n    new Dialog({\n        title: `Draw Cards To Table - ${version}`,\n        content: template,\n        buttons: {\n            ok: {\n                label: `<b>Draw</b>`,\n                callback: async (html) => {\n                    makeTiles(html);\n                },\n            },\n            resetTable: {\n                label: `<b style=\"color:red\">Reset</b>`,\n                callback: async (html) => {\n                    const tableName = html.find('#table-name')[0].value;\n                    const table = await game.tables.find((t) => t.data.name === tableName);\n                    if (table !== undefined) {\n                        table.reset();\n                        ui.notifications.info(`The RollTable \"${tableName}\" has been reset.`)\n\n                    } else {\n                        ui.notifications.warn(`Please select a RollTable to reset.`)\n                    }\n                    const chaseCards = await canvas.scene.tiles.filter(t => t.getFlag('swademacros', 'isChaseCard') === true);\n                    if (chaseCards.length) {\n                        for await (const card of chaseCards) {\n                            await card.delete();\n                        }\n                        ui.notifications.info(`All tiles from ${tableName} have been removed from the scene.`)\n                    }\n                }\n            },\n            cancel: {\n                label: 'Cancel',\n            },\n        },\n    }).render(true);\n}\n\nmain();","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":null}}
{"_id":"chrs1V3n0cM02Zl4","name":"Vehicle Maneuvers","type":"script","author":"tckKxzbezKvre3KI","img":"icons/tools/nautical/steering-wheel.webp","scope":"global","command":"/* vehicle_maneuvers\nicon: icons/tools/nautical/steering-wheel.webp\n*/\n\nlet tokenD;\nconst version = 'v1.1';\nconst chatimage = \"icons/tools/nautical/steering-wheel.webp\";\nlet coreRules = false;\nlet rules = '@Compendium[swade-core-rules.swade-rules.nB1vsvPTn5jSRG6v]{Chases and Vehicles}';\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\nmain();\n  \nasync function main(){\n  let maneuversOptions = ['CHANGE POSITION','EVADE', 'FLEE', 'FORCE', 'HOLD STEADY', 'RAM'];\n  let maneuversOptionsLabels = ['CHANGE POSITION - (Action or Free Action)','EVADE - (Action or Free Action)', 'FLEE - (Action)', 'FORCE - (Action)', 'HOLD STEADY - (Free Action)', 'RAM - (Action)'];\n\n  let maneuversOptionsList = ``;\n  for (let i = 0; i < maneuversOptions.length; i++) {\n    maneuversOptionsList += `<option value=\"${maneuversOptions[i]}\">${maneuversOptionsLabels[i]}</option>`;\n  }\n  \n  new Dialog({\n    title: `Vehicle Maneuvers - ${version}`,\n    content: `\n    <h2>Maneuvers</h2>\n    <p>\n      <select id=\"maneuversOptionsID\" type=\"text\" style=\"width: 100%; box-sizing: border-box;border: none; text-align: center;\">\n        ${maneuversOptionsList}\n      </select>      \n    </p>\n    <br>\n    `,\n    buttons: {\n      roll: {\n        label: \"Do It!\",\n        callback: (html) => {\n          showManeuversOptions(html);\n        }\n      }, \n      cancel: {\n        label: \"Cancel\"\n      }\n    }\n  }).render(true)\n}\n\nasync function showManeuversOptions(html) {\n  let maneuver = html.find(\"#maneuversOptionsID\")[0].value;  \n  let message='';\n  \n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${rules}</h2></div>`;\n  } else {\n    message = `<div><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Chases and Vehicles</h2><div>`;\n  }\n  \n  message += checkManeuver(maneuver);\n  \n  let chatData = {\n    content: message\n  };  \n  ChatMessage.create(chatData, {});  \n}\n\nfunction checkManeuver(maneuver) {\n  let message = '';\n  if (maneuver=='CHANGE POSITION') {\n    message+=`<h3><b>${maneuver} - (Action or Free Action)</b><h3>`;\n    message+=`<p>Success allows him to move up or down one Chase Card, and up to two with a raise.</p>`;\n    message+=`<ul><li><b>Action:</b> +2</li>`;\n    message+=`<li><b>Speed Bonus:</b> +1 faster / +2 twice as fast</li>`;\n    message+=`<li><b>Dropping Back:</b> a character may drop “back” one or two Chase Cards without making a maneuvering roll.</li></ul>`;\n  } else if (maneuver=='EVADE') {\n    message+=`<h3><b>${maneuver} - (Action or Free Action)</b><h3>`;\n    message+=`<p>Melee and ranged attacks will suffer a −2 penalty until the start of that vehicle’s next turn. <b>The character and any occupants on his mount or in his vehicle also take the penalty</b></p>`;\n    message+=`<ul><li><b>Action:</b> If the character performs this maneuver as an action, the penalty increases to −4 (in both directions).</li>`;\n  } else if (maneuver=='FLEE') {\n    message+=`<h3><b>${maneuver} - (Action)</b><h3>`;\n    message+=`<p>A character or vehicle may escape the chase if there are at least four Chase Cards between himself and the closest foe. If so, he makes a maneuvering roll at −4 and escapes if successful.</p><p>The penalty is reduced to −2 if there are at least five cards between them, and 0 if there are six or more.</p>`;\n  } else if (maneuver=='FORCE') {\n    message+=`<h3><b>${maneuver} - (Action)</b><h3>`;\n    message+=`<p>The attacker attempts to force a rival away from his vehicle or into an obstacle.</p>`;\n    message+=`<p>To do so, both must be on the same Chase Card and make <b>opposed maneuvering rolls</b>. If the attacker wins, he Bumps his foe.</p>`;\n    message+=`<ul><li><b>Raise:</b> raise is treated as if the defender rolled a Critical Failure on a maneuvering roll</li>`;\n  } else if (maneuver=='HOLD STEADY') {\n    message+=`<h3><b>${maneuver} - (Free Action)</b><h3>`;\n    message+=`<p>They <b>ignore the Unstable Platform and Running penalties</b>, but <b>attacks against the vehicle and all its occupants are made at +2</b> until the beginning of their next turn (this does not stack with Vulnerable).</p>`;\n  } else if (maneuver=='RAM') {\n    message+=`<h3><b>${maneuver} - (Action)</b><h3>`;\n    message+=`<p>An attacker can Ram a defender if they’re on the same Chase Card by making opposed maneuvering rolls. If successful, both participants cause the following damage to the other:</p>`;\n    message+=`<ul><li><b>Action:</b> +2</li>`;\n    message+=`<li><b>Scale:</b> The base damage is based on Scale: Small ([[/r 1d6x]]), Normal ([[/r 2d6x]]), Large ([[/r 3d6x]]), Huge ([[/r 4d6x]]), and Gargantuan ([[/r 5d6x]]).</li>`;\n    message+=`<li><b>Raise:</b> +[[/r 1d6x]] bonus damage for the attacker if he got a raise on his maneuvering roll.</li>`;\n    message+=`<li><b>Toughness:</b> +[[/r 1d6x]] if the vehicle’s Toughness is higher than his foe’s; +2d6 if Toughness is twice as high.</li>`;\n    message+=`<li><b>Speed:</b> +[[/r 1d6]] to both sides if the attacker’s Top Speed is between 60 and 120 mph; +[[/r 2d6x]] if it’s over 120 mph.</li></ul>`;\n  }\n  \n  return message;\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.mg7NSUhwdCre0yoV"},"cf":null}}
{"_id":"f1R8G7lU13HOYIyg","name":"Survival Guide","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/symbols/star-solid-gold.webp","scope":"global","command":"//icon: \nlet compendiumName2 = 'swademacros.guide-macros-for-swade';\nlet pack = game.packs.get(compendiumName2);\nlet content = await pack.getDocuments();\nlet guide = content.find( i => (i.data.name === 'Survival Guide') );\nguide.sheet.render(true);","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":null}}
{"_id":"gaplx9QDL58aYBRL","name":"Gang Up","type":"script","author":"tckKxzbezKvre3KI","img":"icons/creatures/mammals/wolf-shadow-black.webp","scope":"global","command":"const version = 'v1.6';\nconst chatimage = \"icons/creatures/mammals/wolf-shadow-black.webp\";\nconst rules = '@Compendium[swade-core-rules.swade-rules.hdXOHCe38O8KGyUz]{Ganging Up}';\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\nconst debug_flag=true;\n  \n/* Gang Up p101 SWADE core\nIMPORTANT\n- YOU SHOULD DEFINE TOKEN DISPOSITION: FRIENDLY FOR PCS AND ALLIES. HOSTILE FOR ENEMIES\n\nMODULES\n- OPTIONAL: Token Faction\n\nTODO\n- detect dead\n- JB2A\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/GangUp.js\nicon: icons/creatures/mammals/wolf-shadow-black.webp\n*/\n\n// Requires at least 1 target\nif (canvas.tokens.controlled[0]===undefined || Array.from(game.user.targets)[0]===undefined){ \n  ui.notifications.warn(\"You must select a token and target another one!\");    \n} else {\n  let target=Array.from(game.user.targets)[0]; // token will not be count\n  let attacker=canvas.tokens.controlled[0];  \n  messageToTheChat(attacker, target);\n}\n\nfunction messageToTheChat(attacker, target) {\n  let message = ``;\n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${rules}</h2></div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Ganging Up</h2>`;\n  }\n  \n  message += `<p><b style=\"color:red\">${attacker.name}</b> will receive ${gangUp(attacker, target)} to attack <b style=\"color:darkblue\">${target.name}</b>.</p>`;\n  \n  // send message\n  let chatData = {\n    user: game.user.id,    \n    content: message\n  };  \n  ChatMessage.create(chatData, {});  \n}\n\n// pg 101 swade core\n// - Each additional adjacent foe (who isn’t Stunned)\n// - adds +1 to all the attackers’ Fighting rolls, up to a maximum of +4.\n// - Each ally adjacent to the defender cancels out one point of Gang Up bonus from an attacker adjacent to both.\nfunction gangUp(attacker, target) {\n  let itemRange=1; // dist 1''\n  let enemies;\n  let allies;\n  let modifier=0;\n  \n  let withinRangeOfToken;\n  let alliedWithinRangeOfToken;\n  let alliedWithinRangeOfTargetAndAttacker;\n  \n  if (attacker.data.disposition===-1) { // NPC (hostile) is attacking PCs (friendly)\n    withinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== attacker.id \n      && t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && t.visible \n      && withinRange(target, t, itemRange)\n    );    \n    alliedWithinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== target.id \n      && t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(target, t, itemRange)\n    );    \n    //alliedWithinRangeOfTargetAndAttacker intersection with attacker and target\n    alliedWithinRangeOfTargetAndAttacker = alliedWithinRangeOfToken.filter(t => \n      t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(attacker, t, itemRange)\n    );    \n  } else if (attacker.data.disposition===1) { // PCs (friendly) is attacking NPC (hostile)\n    withinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== attacker.id \n      && t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && t.visible \n      && withinRange(target, t, itemRange)\n    );    \n    alliedWithinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== target.id \n      && t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(target, t, itemRange)\n    );    \n    //alliedWithinRangeOfTargetAndAttacker intersection with attacker and target\n    alliedWithinRangeOfTargetAndAttacker = alliedWithinRangeOfToken.filter(t => \n      t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(attacker, t, itemRange)\n    ); \n  }\n\n  enemies = withinRangeOfToken.length;   \n  allies = alliedWithinRangeOfTargetAndAttacker.length;\n  modifier = Math.max(0, (enemies-allies) );  \n\n  //debug\n  if (debug_flag) {\n    console.log('-----------------------');\n    console.log('Enemies: ' + withinRangeOfToken.length);\n    console.log('Allies: ' + alliedWithinRangeOfToken.length);\n    console.log('Allies Adjacent to Both: ' + alliedWithinRangeOfTargetAndAttacker.length);\n    console.log('Modifier: ' + modifier);\n    console.log('-----------------------');\n  }\n  return Math.min( 4, modifier );\n}\n\n// function from Kekilla\nfunction withinRange(origin, target, range) {\n    const ray = new Ray(origin, target);\n    let distance = canvas.grid.measureDistances([{ ray }], { gridSpaces: true })[0];\n    return range >= distance;\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":null}}
{"_id":"loLcMEkmQmhqJw5S","name":"Fear Table","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/death/undead-ghost-scream-teal.webp","scope":"global","command":"/* Fear + Fear Table\nicon: icons/magic/death/undead-ghost-scream-teal.webp\n*/\n\nlet tokenD;\nconst version = 'v1.5';\nconst chatimage = \"icons/magic/death/undead-ghost-scream-teal.webp\";\nlet coreRules = false;\nlet rules = '@Compendium[swade-core-rules.swade-rules.jaYcLBJnBk1ai5EH]{Fear}';\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\n// ------------------------\n// Select the table\nlet tableFearID;\nlet fearTable;\n\nlet fearTablePath = game.settings.get(\"swademacros\", \"feartablepath\");\nif (fearTablePath=='SWADE') {\n  fearTablePath = \"swade-core-rules.swade-tables\";\n  tableFearID = await game.packs.get(fearTablePath).index.find(el => el.name == \"Fear Table\")._id;\n  fearTable = await game.packs.get(fearTablePath).getDocument( tableFearID );    \n} else if (fearTablePath=='SWPF') {\n  fearTablePath = \"swpf-core-rules.swpf-tables\";\n  tableFearID = await game.packs.get(fearTablePath).index.find(el => el.name == \"Fear\")._id;\n  fearTable = await game.packs.get(fearTablePath).getDocument( tableFearID );        \n} else {\n  fearTable = await game.tables.getName('fearTablePath');  \n}\n\nif (canvas.tokens.controlled[0]===undefined) {\n  ui.notifications.error(\"Please, select a token.\"); // No Token is Selected\n} else if (fearTable==undefined) {\n  ui.notifications.error(\"Please, choose a valid table in Macros for SWADE settings\"); // check the table\n} else {\n  tokenD = canvas.tokens.controlled[0];\n  main();\n}\n\nasync function main(){\n  new Dialog({\n    title:\"Fear Table Modifier\",\n    content: `\n    <h2>Creature Fear Penalty</h2>\n    <p>\n      <input type=\"number\" id=\"fearPenalty\" value=0 min=\"-20\" max=\"+20\" style=\"text-align:center;\"/>\n    </p>\n    <br>\n    \n    <h2>Fear Type</h2>\n    <p style=\"text-align: center;\">\n      <input type=\"radio\" id=\"feartype1\" name=\"feartype\" value=\"nausea\" checked>\n      <label for=\"feartype1\">Nausea</label>\n      <input type=\"radio\" id=\"feartype2\" name=\"feartype\" value=\"terror\">\n      <label for=\"feartype2\">Terror</label>\n    </p>\n    <br>\n    `,\n    buttons: {\n      roll: {\n        label: \"Roll\",\n        callback: (html) => {\n          rollFearTable(html);\n        }\n      }, \n      cancel: {\n        label: \"Cancel\"\n      }\n    }\n  }).render(true)\n}\n\nasync function rollFearTable(html) {\n  let mod = html.find(\"#fearPenalty\")[0].value;  \n  const fearType = html.find('input[name=\"feartype\"]:checked').val();\n  let message=``;\n\n  const rollOutcome = await rollSpirit();\n  let shouldRollFearTable = false;\n\n  let tableRoll;  \n  let output;\n  let result;\n  let total;\n\n  // chat message\n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${rules}</h2></div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Fear</h2>`;\n  }\n    \n  if (fearType=='nausea') {\n    message += '<p>The fear source is <b>Nausea</b>.</p>';\n    if (rollOutcome=='critical') {\n      await tokenD.actor.update({ \"data.status.isShaken\": true });\n      await sm.applyFatigue(tokenD, 1);\n      shouldRollFearTable = true;\n      message += '<p>You rolled a <b style=\"color:red\">CRITICAL FAILURE</b>!</p>';\n      message += '<p>You are <b>Shaken and Fatigued</b> and must roll on the <b>Fear Table</b> as well.</p>';\n    } else if (rollOutcome=='failure') {\n      await tokenD.actor.update({ \"data.status.isShaken\": true });\n      await sm.applyFatigue(tokenD, 1);      \n      message += '<p>You rolled a <b style=\"color:red\">FAILURE</b>!</p>';\n      message += '<p>You are <b>Shaken and Fatigued</b>.</p>';\n    } else {\n      message += '<p>You <b style=\"color:darkgreen\">SUCCEEDED</b>!</p>';\n    }\n  } else {    \n    message += '<p>The fear source is <b>Terror</b>.</p>';\n    if (rollOutcome=='critical') {\n      mod = mod + 2;\n      message += '<p>You rolled a <b style=\"color:red\">CRITICAL FAILURE</b>!</p>';\n      message += '<p>You must roll on the <b>Fear Table</b> with <b>+2</b>.</p>';\n      shouldRollFearTable = true;\n    } else if (rollOutcome=='failure') {\n      message += '<p>You rolled a <b style=\"color:red\">FAILURE</b>!</p>';\n      message += '<p>You must roll on the <b>Fear Table</b>.</p>';\n      shouldRollFearTable = true;\n    } else {\n      message += '<p>You <b style=\"color:darkgreen\">SUCCEEDED</b>!</p>';\n    }\n  }    \n  \n  if (shouldRollFearTable) {\n    tableRoll = await new Roll(`1d20 + ${mod}`);  \n    output = await fearTable.draw({roll: tableRoll});\n    result = output.results[0].data.text;\n    total = output.roll.total;\n    message += `<p><b style=\"color:red\">${tokenD.name}</b> shoud deal with: </p>`;  \n    message += result;    \n  }\n  \n  // send message\n  let chatData = {\n    content: message\n  };\n  ChatMessage.create(chatData, {});    \n  \n  applyFearOutcome(tokenD, total);\n}\n\nasync function applyFearOutcome(tokenD, val) {   \n  if ( val>=4 && val<=6 ) {\n    await tokenD.actor.update({ \"data.status.isDistracted\": true });    \n  } else if ( val>=7 && val<=9 ) {\n    await tokenD.actor.update({ \"data.status.isVulnerable\": true });    \n  } else if ( val>=10 && val<=12 ) {\n    await tokenD.actor.update({ \"data.status.isShaken\": true });    \n  } else if ( val==13 ) {\n    await tokenD.actor.update({ \"data.status.isStunned\": true });    \n  } else if ( val>=16 && val<=17 ) {\n    await tokenD.actor.update({ \"data.status.isShaken\": true });    \n  }  \n}\n\nasync function rollSpirit() {\n  let rolled = await tokenD.actor.rollAttribute('spirit');    // ROLL SPIRIT AND CHECK COMBAT REFLEXES  \n  let rolledTotal = rolled.total;\n  \n  // Checking for a Critical Failure.\n  if ( sm.isCritical(rolled) ) {\n    return 'critical';\n  } else {    \n    if (rolledTotal <= 3) {\n      return 'failure';\n    } else if (rolledTotal >= 4) {\n      return 'success';\n    }\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"core":{"sourceId":"Macro.tt5wQLZWCHErlY8L"},"combat-utility-belt":{"macroTrigger":""},"cf":null}}
{"_id":"mpqzwwN1oWD4Qyjn","name":"Next Turn","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/time/arrows-circling-pink.webp","scope":"global","command":"/*\nSkip the current turn.\n*/\n\ngame.combat.nextTurn()","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"cf":null}}
{"_id":"n3nBOaZqQeZdPpNd","name":"Potion of Speed","type":"script","author":"dJvi2seC8CqTkxhs","img":"icons/consumables/potions/bottle-conical-corked-purple.webp","scope":"global","command":"const version = 'v0.3';\nconst itemName = 'Potion of Speed';\nconst icon = 'icons/consumables/potions/bottle-conical-corked-purple.webp';\n\nconst myActiveEffect = {\n  changes: [\n    {\"key\":\"data.stats.speed.value\", \"mode\":CONST.ACTIVE_EFFECT_MODES.ADD, \"value\":\"2\"},\n    {\"key\":\"data.stats.speed.runningDie\", \"mode\":CONST.ACTIVE_EFFECT_MODES.ADD, \"value\":\"2\"}\n  ],\n  icon: icon,\n  label: itemName\n}  \n\n/* \nsource: \nicon: \n*/\nlet tokenD=canvas.tokens.controlled[0];\nconst myTitle = `Potion`;\n  \nif (tokenD===undefined) {\n  ui.notifications.error(\"Please select a token.\"); // No Token is Selected\n} else {\n  main();\n} \n\n// Modified from a macro by spacemandev\nasync function main() {\n  let myItem = await sm.getItem(tokenD, itemName);\n  if(undefined == myItem) {\n    return; \n  }\n  \n  // Active Effect On?\n  const temp = sm.getActiveEffect(tokenD, itemName);\n  if( temp != undefined ) {\n    sm.styledChatMessageSimple(itemName, `You already used it.`, icon);       \n    return;\n  }\n\n  // Subtract item\n  await sm.useItem(tokenD, itemName);\n  \n  // Item does stuff\n  sm.addActiveEffectToOwnedToken(tokenD, myActiveEffect); \n\n  // message\n  sm.styledChatMessageSimple(itemName, `${tokenD.actor.name} used a ${itemName}.`, icon);\n}","folder":null,"sort":0,"permission":{"default":0,"dJvi2seC8CqTkxhs":3},"flags":{"core":{"sourceId":"Macro.pEZxVFjyPvfArG9E"}}}
{"name":"Adventure Deck - Deck","type":"script","author":"AUlNbXaKGdJP4sUu","img":"icons/sundries/gaming/playing-cards-grey.webp","scope":"global","command":"/* Adventure Deck\nsource:\nicon: icons/sundries/gaming/playing-cards-grey.webp\n\nSNIPPETS: https://gitlab.com/peginc/swade/-/blob/develop/src/module/chaseUtils.ts#L108\nAPI: https://foundryvtt.com/api/Cards.html#_drawCards\n*/\n\nconst version = 'v1.0';\nconst icon = 'icons/sundries/gaming/playing-cards-grey.webp';\nconst adventureCardName = 'Adventure Card';\nconst flagType = 'Adventure Card'\nconst showTableDrawToChat = false;\nconst defaultDeck = game.settings.get(\"swademacros\", \"adventuredeckdeck\");\nlet tableToDrawAdventureCards = 'Action Cards';\n\nif (canvas.tokens.controlled[0] === undefined) {\n  ui.notifications.error(\"Please, select a token.\"); // No Token is Selected\n} else {\n  main();\n}\n\nfunction main() {\n  const tokens = canvas.tokens.controlled;\n\n  let playerNameList = `<option value=\"everyone\" selected>Everyone</option>`;\n  for (const tokenD of tokens) {\n    playerNameList += `<option value=\"${tokenD.actor.id}\">${tokenD.name}</option>`;\n  }\n\n  let tableNameList = ``;  \n  Array.from(game.cards).map((t) => {\n    if (defaultDeck==t.data.name) {\n      tableNameList += `<option value=\"${t.data.name}\" selected>${t.data.name}</option>`;\n    } else {\n      tableNameList += `<option value=\"${t.data.name}\">${t.data.name}</option>`;\n    }\n  });\n\n  let template = `\n    <style type=\"text/css\">\n      .tg  {border-collapse:collapse;border-spacing:0;margin:0px auto;}\n      .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n        overflow:hidden;padding:10px 5px;word-break:normal;}\n      .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n        font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n      .tg .tg-baqh{text-align:center;vertical-align:top}\n      .tg .tg-xwyw{border-color:#000000;text-align:center;vertical-align:middle}\n    </style>\n\n    <table class=\"tg\">\n    <tbody>\n      <tr>\n        <td class=\"tg-baqh\">\n          <b>All selected tokens will receive Adventure Cards</b>\n        </td>\n      </tr>\n\n      <tr>\n        <td class=\"tg-xwyw\" colspan=\"4\"><b>Players: </b><select id=\"playerName\" style=\"width: 200px\">${playerNameList}</select></td>\n      </tr>\n\n      <tr>\n        <td class=\"tg-xwyw\" colspan=\"4\"><b>Tables: </b><select id=\"tableName\" style=\"width: 200px\">${tableNameList}</select></td>\n      </tr>\n\n    </tbody>\n    </table>\n\n  `;\n\n  new Dialog({\n    title: `Adventure Card - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        icon: \"<i class='fas fa-dice'></i>\",\n        label: \"Give Cards\",\n        callback: async (html) => {\n          adventureCardManager(html);\n        },\n      },\n      reset: {\n        icon: \"<i class='fas fa-skull'></i>\",\n        label: \"Reset Deck\",\n        callback: async (html) => {\n          resetDeck(html)\n        }\n      },\n      cancel: {\n        icon: \"<i class='fas fa-window-close'></i>\",        \n        label: \"Cancel\",\n      },\n    },\n  }).render(true);\n}\n\n// -------------------------------------------------------\n// Functions\nasync function adventureCardManager(html) {\n  let actorID = html.find(\"#playerName\")[0].value;\n  tableToDrawAdventureCards = html.find(\"#tableName\")[0].value;\n\n  if (actorID == 'everyone') {\n    let tokens = canvas.tokens.controlled;\n    for (var tokenD of tokens) {\n      let actorID = tokenD.actor.id;\n      await updateAdventureCards(actorID);\n      cardMessage(actorID);\n    }\n  } else {\n    await updateAdventureCards(actorID);\n    cardMessage(actorID);\n  }\n\n}\n\nasync function updateAdventureCards(actorID) {\n  // get amount of cards to give\n  const cardsToGive = await getAdventureCardsToDraw(actorID);\n  //get deck\n  const deck = await game.cards.find((t) => t.data.name == tableToDrawAdventureCards);\n  let cardsDrawn = deck._drawCards(3, CONST.CARD_DRAW_MODES.TOP);\n  let updates = cardsDrawn.map((v) => {\n    return {\n      _id: v.id,\n      drawn: true,\n    };\n  });\n  await deck.updateEmbeddedDocuments('Card', updates);\n\n  // add cards to the actor\n  await createCards(actorID, cardsDrawn); \n}\n\nasync function wipeAdventureCards(actorID) {\n  const character = await game.actors.get(actorID);\n\n  const cards = await character.items.filter(item => item.getFlag('swademacros', 'type') === flagType);\n\n  for (const card of cards) {\n    await card.delete()\n  }\n}\n\nasync function createCards(actorID, cardsDrawn) { \n  const cardsToAdd = []\n  const character = await game.actors.get(actorID);\n  for (const card of cardsDrawn) {\n    const resultName = card.name;\n\n    if (resultName == '') {\n      resultName = adventureCardName;\n    }\n\n    const data = {\n      name: resultName,\n      type: 'gear',\n      img: icon,\n      data: {\n        description: `<img src=\"${card.img}\"/>`\n      }\n    };\n\n    cardsToAdd.push(data)\n  }\n  const cards = await character.createEmbeddedDocuments('Item', cardsToAdd);\n  //const cards = await character.getEmbeddedCollection('Item').filter((i) => i.getFlag('swademacros', 'type') === flagType);\n  for (const card of cards) {\n    await card.setFlag('swademacros', 'type', flagType)\n  }\n}\n\nasync function cardMessage(actorID) {\n  const character = game.actors.get(actorID);\n  const amountCards = await getAdventureCardsToDraw(actorID);\n  const message1 = `<b>${character.name}</b> received <b>${amountCards}</b> cards.`;\n  const message2 = `Check your items. Your card is under <b>gear</b>.`;\n  sm.styledChatMessage('Adventure Cards', message1, message2);\n}\n\nasync function getAdventureCardsToDraw(actorID) {\n  const character = await game.actors.get(actorID);\n  const cardsByRank = await getCardsByRank(actorID);\n  \n  if (character.data.data.additionalStats.adventurecards != undefined) {\n    return parseInt(character.data.data.additionalStats.adventurecards.value);\n  } else if (  cardsByRank != 0) {\n    return cardsByRank;\n  } else {\n    return 1;\n  }\n}\n\nasync function getCardsByRank(actorID) {\n  const character = game.actors.get(actorID);\n  switch (character.data.data.advances.rank) {\n    case 'Novice':\n      return 1;\n    case 'Seasoned':\n      return 2;\n    case 'Veteran':\n      return 3;\n    case 'Heroic':\n      return 4;\n    case 'Legendary':\n      return 5;\n    default:\n      return 0;\n  }\n}\n\nasync function resetDeck(html) {\n  tableToDrawAdventureCards = html.find(\"#tableName\")[0].value;\n  \n  // Remove from actors\n  const actorsWithCards = await game.actors.filter((a) => a.items.some((i) => i.getFlag('swademacros', 'type') === flagType))\n  for (const actor of actorsWithCards) {\n    const cardItems = await actor.items.filter((i) => i.getFlag('swademacros', 'type') === flagType)\n\n    for (const item of cardItems) {\n      await item.delete()\n    }\n  }\n  \n  // Reset the table\n  const deck = await game.cards.find((t) => t.data.name == tableToDrawAdventureCards);\n  await deck.reset({ chatNotification: false });\n  await deck.shuffle({ chatNotification: false });\n  \n  sm.styledChatMessageSimple('Adventure Cards', `<p>The deck was reset. The adventure cards were removed from the actors.</p>`);\n}","folder":null,"sort":0,"permission":{"default":0,"AUlNbXaKGdJP4sUu":3},"flags":{"core":{"sourceId":"Macro.Do7XVLq1jlJ5dFPO"}},"_id":"nFhl9dePxmnXfi1w"}
{"_id":"sIQtJo2qv1Q0GqOt","name":"Token Vision","type":"script","author":"tckKxzbezKvre3KI","img":"icons/sundries/lights/torch-brown-lit.webp","scope":"global","command":"const version = 'v1.2';\nconst chatimage = \"icons/sundries/lights/torch-brown-lit.webp\";\n\nif (canvas.tokens.controlled[0]===undefined) {\n  ui.notifications.error(\"Please, select a token.\"); // No Token is Selected\n} else {\n  main();\n}\n\nfunction main() {\n  // Add Vision Type only if the Game Master is using the Macro\n  let dialogue_content = `\n    <form>\n      <div class=\"form-group\">\n        <label>Light Source:</label>\n        <select id=\"light-source\" name=\"light-source\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"none\">None</option>\n          <option value=\"candle\">Candle [dim=0/bright=2]</option>\n          <option value=\"lamp\">Lantern [dim=0/bright=4]</option>\n          <option value=\"bullseye\">Lantern (Bullseye) [dim=0/bright=2/angle=50]</option>\n          <option value=\"torch\">Torch [dim=0/bright=4]</option>\n          <option value=\"flLight\">Flashlight [dim=0/bright=10/angle=50]</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Vision Type:</label>\n        <select id=\"vision-type\" name=\"vision-type\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"pDark\">Pitch Darkness (0\") [dim=0/bright=0]</option>\n          <option value=\"dark\">Dark (10\") [dim=10/bright=0]</option>\n          <option value=\"dim\">Dim [dim=1000/bright=10]</option>\n          <option value=\"lowLiVis\">Low Light Vision [dim=1000/bright=0]</option>\n          <option value=\"infrVis\">Infravision [dim=1000/bright=0]</option>\n          <option value=\"fullNiVis\">Full Night Vision [dim=0/bright=1000]</option>\n        </select>\n      </div>\n    </form>\n`;\n\n  let applyChanges = false;\n  let dialogButtons = {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: (html) => {\n        changeVision(html);\n      }\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    }   \n  }  \n  \n  // Main Dialogue    \n  new Dialog({\n    title: `Token Vision - ${version}`,\n    content: dialogue_content,\n    buttons: dialogButtons,\n    default: \"yes\",\n  }).render(true);\n}\n\nasync function changeVision(html) {\n  for (let tokenD of canvas.tokens.controlled) {\n    let visionType;\n    let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\n    let dimSight = 0;\n    let brightSight = 0;\n    let dimLight = 0;\n    let brightLight = 0;\n    let lightAngle = 360;\n    let lockRotation = tokenD.data.lockRotation;\n\n    // Get Vision Type Values\n    visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\n    switch (visionType) {\n      case \"pDark\":\n        dimSight = 0;\n        brightSight = 0;\n        break;\n      case \"dark\":\n        dimSight = 10;\n        brightSight = 0;\n        break;\n      case \"dim\":\n        dimSight = 1000;\n        brightSight = 10;\n        break;\n      case \"lowLiVis\":\n        dimSight = 1000;\n        brightSight = 0;\n        break;\n      case \"infrVis\":\n        dimSight = 1000;\n        brightSight = 0;\n        break;\n      case \"fullNiVis\":\n        dimSight = 0;\n        brightSight = 1000;\n        break;\n      case \"nochange\":\n        break;\n      default:\n        dimSight = tokenD.data.dimSight;\n        brightSight = tokenD.data.brightSight;\n    }\n    // Get Light Source Values\n    switch (lightSource) {\n      case \"none\":\n        dimLight = 0;\n        brightLight = 0;\n        break;\n      case \"candle\":\n        dimLight = 0;\n        brightLight = 2;\n        break;\n      case \"lamp\":\n        dimLight = 0;\n        brightLight = 4;\n        break;\n      case \"bullseye\":\n        dimLight = 0;\n        brightLight = 4;\n        lockRotation = true;\n        lightAngle = 52.5;\n        break;\n      case \"torch\":\n        dimLight = 0;\n        brightLight = 4;\n        break;\n      case \"flLight\":\n        dimLight = 0;\n        brightLight = 10;\n        lockRotation = true;\n        lightAngle = 52.5;\n        break;\n      case \"nochange\":\n        break;\n      default:\n        dimLight = tokenD.data.light.dim;\n        brightLight = tokenD.data.light.bright;\n        lightAngle = tokenD.data.light.angle;\n        lockRotation = tokenD.data.lockRotation;\n        break;\n    }\n    // Update Token\n    const updatePromise = await tokenD.document.update({\n      vision: true,\n      dimSight: dimSight,\n      brightSight: brightSight,\n      light: {\n        dim: dimLight,\n        bright: brightLight,\n        angle: lightAngle\n      },\n      lockRotation: lockRotation\n    });\n\n    // chat\n    let message=``;    \n    const myTitle = `<img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Illumination`;      \n    message += `<p><b>${tokenD.name}</b> made changes to vision/illumination.</p>`;\n    message += `<ul><li>Dim Sight: ${dimSight}</li>`;\n    message += `<li>Bright Sight: ${brightSight}</li>`;\n    message += `<li>Dim Light: ${dimLight}</li>`;\n    message += `<li>Bright Light: ${brightLight}</li>`;\n    message += `<li>Light Angle: ${lightAngle}</li></ul>`;\n    sm.styledChatMessage(myTitle, '', message); // send message\n  }  // end for     \n} // end changeVision\n\n\n/*\n// Open a dialog for quickly changing token vision parameters of the controlled tokens.\n// This macro was originally written by @Sky#9453\n// https://github.com/Sky-Captain-13/foundry\n// SWADE (this) version by SalieriC\n\n// Since return only works in functions, the sole purpose of the main() function is to stop the macro from executing if no token is selected.\n*/","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.e3HFjRo6KaIDsfCR"},"cf":null}}
{"_id":"so4bl3hD9cDELmqm","name":"Quick Combat","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/time/clock-stopwatch-white-blue.webp","scope":"global","command":"/* All tokens to Combat v1.3\n* - This macro select all tokens in the scene\n* - Add all of them to the combat tracker\n\n* source: \n* icon: icons/magic/time/clock-stopwatch-white-blue.webp\n*/\n\n(async () => {\n  \n  const combat = !game.combat ? await Combat.create({scene: canvas.scene.id, active: true}) : game.combat;\n\n  let toCreate = [];\n\n  const tokens = canvas.tokens.placeables;\n\n  if(tokens.length){\n      for(let t of tokens){\n          if(t.inCombat) continue;\n          toCreate.push({tokenId: t.id, hidden: t.data.hidden});\n      }\n      const combatants = await combat.createEmbeddedDocuments(\"Combatant\", toCreate);\n  }\n\n})()","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"cf":null,"combat-utility-belt":{"macroTrigger":""}}}
{"_id":"wTKmjh0VbDLH8amT","name":"Adventure Generator","type":"script","author":"tckKxzbezKvre3KI","img":"modules/deadlands-core-rules/assets/icons/deadlands-logo.webp","scope":"global","command":"const version = '1.0';\n// icon: modules/deadlands-core-rules/assets/icons/deadlands-logo.webp\n\nmain();\n\nasync function main() {\n  let message;\n\n  let Objective = await drawFromTable('Objective');\n  let Obstacle = await drawFromTable('Obstacle');\n  let Complication = await drawFromTable('Complication');\n  \n  let adventureContent = `<h2>Objective</h2>` + Objective.results[0].text;\n  adventureContent += `<h2>Obstacle</h2>` + Obstacle.results[0].text;\n  adventureContent += `<h2>Complication</h2>` + Complication.results[0].text;  \n\n  let data = {\n    name: 'My New Adventure',\n    content: adventureContent\n  };\n\n  addEventListenerOnHtmlElement(\"#createAdventure\", 'click', (e) => {    \n    createAdventure(data);\n  });            \n  message+=`<p>If you click the button this adventure will be posted in a journal.</p>`;\n  message+=`<button style=\"background:#d10000;color:white\" id=\"createAdventure\">Create Adventure</button>`;\n  \n  let chatData = {\n    user: game.user.id,    \n    content: message,\n    whisper : ChatMessage.getWhisperRecipients(\"GM\")\n  };   \n  ChatMessage.create(chatData, {});  \n}\n\nfunction addEventListenerOnHtmlElement(element, event, func){    \n    Hooks.once(\"renderChatMessage\", (chatItem, html) => { // Use Hook to add event to chat message html element\n        html[0].querySelector(element).addEventListener(event, func);        \n    });\n} // end addEventListenerOnHtmlElement\n\nasync function createAdventure(data) {  \n  const instantAdventure = await JournalEntry.create(data);\n  await instantAdventure.sheet.render(true);    \n}\n\nasync function drawFromTable(tableName) {\n  let list_compendium = await game.packs.filter(p=>p.documentName=='RollTable');      \n  let inside = await list_compendium.filter( p=>p.metadata.label=='Deadlands Tables' )[0].getDocuments();      \n  let table = await inside.filter( p=>p.data['name']==tableName )[0];\n  \n  if (!table) {\n    ui.notifications.warn(`Table ${tableName} not found.`, {});\n    return;\n  }\n  return await table.draw({rollMode: 'gmroll'});\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":null}}
{"_id":"x1acpDQwSwRWRS6X","name":"Potion of Invigoration","type":"script","author":"dJvi2seC8CqTkxhs","img":"icons/consumables/potions/potion-tube-corked-bubbling-green.webp","scope":"global","command":"const itemName = 'Potion of Invigoration';\n\n/* \nsource: \nicon: \n*/\nconst version = 'v0.3';\nlet tokenD=canvas.tokens.controlled[0];\nconst myTitle = `Potion`;\n  \nif (tokenD===undefined) {\n  ui.notifications.error(\"Please select a token.\"); // No Token is Selected\n} else {\n  main();\n} \n\n// Modified from a macro by spacemandev\nasync function main() {\n  let myItem = await sm.getItem(tokenD, itemName);\n  if(undefined == myItem) {\n    return; \n  }\n  \n  //If token is max health if so, don't do anything\n  if( sm.getFatigue(tokenD) == 0 ) {\n    sm.styledChatMessageSimple(itemName, `You are not fatigued.`)       \n    return;\n  }\n\n  //Subtract item\n  await sm.useItem(tokenD, itemName);\n  \n  // remove 1 \n  sm.applyFatigue(tokenD, -1);\n\n  sm.styledChatMessageSimple(itemName, `${tokenD.actor.name} used a ${itemName} and removed 1 level of fatigue.`);\n}","folder":null,"sort":0,"permission":{"default":0,"dJvi2seC8CqTkxhs":3},"flags":{"core":{"sourceId":"Macro.pEZxVFjyPvfArG9E"}}}
{"_id":"yNOMIUyOO4UCAoC4","name":"Power Point Management","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/symbols/elements-air-earth-fire-water.webp","scope":"global","command":"/* Power Point Management\n- \n\nicon: icons/magic/symbols/elements-air-earth-fire-water.webp\n*/\n\nconst version = 'v1.0';\nconst chatimage = \"icons/magic/symbols/elements-air-earth-fire-water.webp\";\nconst rule = '@Compendium[swade-core-rules.swade-rules.6SGCG8rZNklN3U6w]{Recharging}';\nlet coreRules = sm.isModuleOn(\"swade-core-rules\");\nlet tokenD;\n\nif (canvas.tokens.controlled[0]===undefined) {\n  ui.notifications.error(\"Please, select a token.\"); // No Token is Selected\n} else {\n  tokenD = canvas.tokens.controlled[0];\n  main();\n}\n\nfunction main() {\n  let dialogText = `    \n\n  <style type=\"text/css\">\n    .tg  {border-collapse:collapse;border-spacing:0;}\n    .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n      overflow:hidden;padding:10px 5px;word-break:normal;}\n    .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n      font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n    .tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:top}\n    .tg .tg-xwyw{border-color:#000000;text-align:center;vertical-align:middle}\n  </style>\n  <table class=\"tg\">\n  <tbody>\n    <tr>\n      <td class=\"tg-xwyw\">\n        <p style=text-align: center;\">Only use this input if you will use the <b>Manual Change</b>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"tg-c3ow\">\n        <p>Power Points: <input id=\"powerpoints\" type=\"number\" min=\"-30\" max=\"30\" style=\"width: 80px; text-align: center;\" value=0></input></p>\n      </td>\n    </tr>\n  </tbody>\n  </table>\n\n  `;\n\n  dialogButtons = {\n    one: {\n      label: \"Natural Recover\",\n      callback: (html) => {\n        naturalRecover(html);\n      }\n    },\n    two: {\n      label: \"Benny Recover\",\n      callback: (html) => {\n        bennyRecover(html);\n      }\n    },\n    three: {\n      label: \"Manual Change\",\n      callback: (html) => {\n        manualChange(html);\n      }\n    }    \n  }\n\n  // Main Dialogue    \n  new Dialog({\n    title: `Power Point Management - ${version}`,\n    content: dialogText,\n    buttons: dialogButtons,\n    default: \"one\",\n  }).render(true);\n\n}\n\n// MACRO FUNCTIONS\n\n/*\nRecharging p151\nA character recovers 5 Power Points per hour spent resting, meditating, etc.\n*/\nasync function naturalRecover(html) {  \n  let message;\n  \n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${rule}</h2></div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Recharging</h2>`;\n  }\n\n  await changePowerPoints(tokenD, 5);\n  message += `<p><b style=\"color:red;\">${tokenD.name}</b> recovered 5 Power Points after 1 hour. The current power points are: <b>${tokenD.actor.data.data.powerPoints.value}</b> </p>`;\n\n  ChatMessage.create({ content: message });\n}\n\n/*\nREGAIN POWER POINTS: A character with an Arcane Background can spend a Benny to regain 5 Power Points (Power Points and their use are explained on page 147.)\n*/\nasync function bennyRecover(html) {\n  let message;\n  \n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${rule}</h2></div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Recharging</h2>`;\n  }\n\n  if ( sm.checkBennies(tokenD)>0 ) {\n    sm.spendBenny(tokenD);\n    await changePowerPoints(tokenD, 5);\n    message += `<p><b style=\"color:red;\">${tokenD.name}</b> recovered 5 Power Points after spent a benny. The current power points are: <b>${tokenD.actor.data.data.powerPoints.value}</b>.</p>`;\n  } else {\n    message += `<p><b style=\"color:red;\">${tokenD.name}</b> don't have bennies to spend. The current power points are: <b>${tokenD.actor.data.data.powerPoints.value}</b>.</p>`;\n  }\n\n  ChatMessage.create({ content: message });\n}\n\nasync function manualChange(html) {\n  let message;\n  const powerpoints = parseInt( html.find(\"#powerpoints\")[0].value );    \n  \n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${rule}</h2></div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Recharging</h2>`;\n  }\n\n  await changePowerPoints(tokenD, powerpoints);\n  \n  message += `<p><b style=\"color:red;\">${tokenD.name}</b> manually added ${powerpoints} Power Points. The current power points are: <b>${tokenD.actor.data.data.powerPoints.value}</b>.</p>`;\n  \n  ChatMessage.create({ content: message });\n}\n\nasync function changePowerPoints(tokenD, val) {\n  let maximumPP = tokenD.actor.data.data.powerPoints.max;\n  let currentPP = tokenD.actor.data.data.powerPoints.value;\n  \n  if ( (currentPP+val)> maximumPP ) {\n    await tokenD.actor.update({ \"data.powerPoints.value\": maximumPP });    \n  } else if ( (currentPP+val)<0 ) {\n    await tokenD.actor.update({ \"data.powerPoints.value\": 0 });    \n  } else {\n    await tokenD.actor.update({ \"data.powerPoints.value\": (currentPP+val) });    \n  }  \n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":null}}
{"_id":"zOyIkKfPGMTyPv2g","name":"Potion of Growth","type":"script","author":"AUlNbXaKGdJP4sUu","img":"icons/consumables/potions/potion-flask-corked-cyan.webp","scope":"global","command":"const version = 'v0.2';\nconst itemName = 'Potion of Growth';\nconst icon = 'icons/consumables/potions/potion-flask-corked-cyan.webp';\n\nconst myActiveEffect = {\n  changes: [{\n    \"key\": \"data.stats.size\",\n    \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n    \"value\": \"2\"\n  }],\n  icon: icon,\n  label: itemName,\n  duration: {\n    seconds: 30,\n    rounds: 5,\n  }  \n}  \n\n/* \nsource: \nicon: \n*/\nlet tokenD=canvas.tokens.controlled[0];\nconst myTitle = `Potion`;\n  \nif (tokenD===undefined) {\n  ui.notifications.error(\"Please select a token.\"); // No Token is Selected\n} else {\n  main();\n} \n\n// Modified from a macro by spacemandev\nasync function main() {\n  let myItem = await sm.getItem(tokenD, itemName);\n  if(undefined == myItem) {\n    return; \n  }\n  \n  // Active Effect On?\n  const temp = sm.getActiveEffect(tokenD, itemName);\n  if( temp != undefined ) {\n    sm.styledChatMessageSimple(itemName, `You already used it.`)       \n    return;\n  }\n\n  // Subtract item\n  await sm.useItem(tokenD, itemName);\n  \n  // Item does stuff\n  sm.addActiveEffectToOwnedToken(tokenD, myActiveEffect); \n\n  // message\n  sm.styledChatMessageSimple(itemName, `${tokenD.actor.name} used a ${itemName}.`, icon );\n}","folder":null,"sort":0,"permission":{"default":0,"AUlNbXaKGdJP4sUu":3},"flags":{"core":{"sourceId":"Macro.MS1hnfEc7e8Jwfti"}}}
{"_id":"zlaAdNDgCfQIwaOV","name":"Dramatic Tasks","type":"script","author":"tckKxzbezKvre3KI","img":"icons/commodities/tech/detonator-timer.webp","scope":"global","command":"const version = 'v1.0';\nconst chatimage = 'icons/commodities/tech/detonator-timer.webp';\nconst coreRulesLink = '@Compendium[swade-core-rules.swade-rules.G9H6LoPoQu10TI4R]{Dramatic Tasks}';\nlet coreRules = sm.isModuleOn(\"swade-core-rules\");\n\nmain();\n\nfunction main() {  \n  let template =`\n<style type=\"text/css\">\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:0px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:0px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-xwyw{border-color:#000000;text-align:center;vertical-align:middle}\n.tg .tg-0lax{border-color:#000000;text-align:center;vertical-align:middle}\n</style>\n\n<table class=\"tg\">\n<tbody>\n  <tr>\n    <td class=\"tg-xwyw\">\n        <h3><b style=\"font-size:20px\">Players</b></h3>\n        <select id=\"playersAmount\" name=\"playersAmount\">\n          <option value=\"1\" selected=\"selected\">1</option>\n          <option value=\"2\">2</option>\n          <option value=\"3\">3</option>\n          <option value=\"4\">4</option>\n          <option value=\"5\">5</option>\n          <option value=\"6\">6</option>\n        </select> \n    </td>\n    <td class=\"tg-0lax\">\n      <h3><b style=\"font-size:20px\">Difficult</b></h3>\n      <p>\n      <select id=\"difficult\" name=\"difficult\">\n        <option value=\"challenging\" selected=\"selected\">Challenging</option>\n        <option value=\"difficult\">Difficult</option>\n        <option value=\"complex\">Complex</option>\n      </select>  \n      </p>\n    </td>\n  </tr>\n</tbody>\n</table>\n`;\n  \n  new Dialog({\n    title: `Dramatic Task - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Guess!\",\n        callback: async (html) => {\n          dramaticTask(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      }\n    },\n    default: \"ok\"\n  }, {}).render(true);\n}\n\n\nasync function dramaticTask(html) {\n  const players = html.find(\"#playersAmount\")[0].value;    \n  const difficult = html.find(\"#difficult\")[0].value;      \n  let message=``;\n    \n  if (coreRules === true) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${coreRulesLink}</h2></div>`;\n  }  else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Dramatic Tasks</h2>`;      \n  }\n  \n  message += calculateTaskTokens(players, difficult);\n\n  // send message\n  let chatData = {\n    content: message,\n    whisper : ChatMessage.getWhisperRecipients(\"GM\")\n  };\n  ChatMessage.create(chatData, {}); \n}\n\nfunction calculateTaskTokens(players, difficult) {\n  let tasksTokens=0;\n  let tasksTurns=0;\n  let difficultName='';\n  let message=``;\n  if (difficult=='challenging') {\n    tasksTokens=players*4;    \n    tasksTurns=3;\n    difficultName='Challenging';\n  } else if (difficult=='difficult') {\n    tasksTokens=players*6;    \n    tasksTurns=4;\n    difficultName='Difficult';\n  } else if (difficult=='complex') {\n    tasksTokens=players*8;\n    tasksTurns=5;\n    difficultName='Complex';\n  }\n  message+=`<p>This is <b>${difficult}</b> for <b>${players}</b> player(s).</p>`;\n  message+=`<ul><li>Task Tokens: <b style=\"color:red;\">${tasksTokens}</b></li><li>Rounds: <b style=\"color:red;\">${tasksTurns}</b></p>`;\n  return message;\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":null}}
